import asyncio
from datetime import datetime, timezone, timedelta
from decimal import Decimal, ROUND_DOWN
from typing import Dict, Any, Tuple, Optional

import ccxt

import config
from core.bybit_connector import BybitConnector
from core.circuit_breaker import get_circuit_breaker_manager, CircuitBreakerOpenError
from core.enums import Timeframe, SignalType
# from core.integrated_system import IntegratedTradingSystem
from core.schemas import TradingSignal, GridSignal
from data.database_manager import AdvancedDatabaseManager

from utils.logging_config import setup_logging, get_logger
# from config.trading_params import DEFAULT_LEVERAGE  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
from core.data_fetcher import DataFetcher
import logging
signal_logger = logging.getLogger('SignalTrace')
logger = get_logger(__name__)


class TradeExecutor:
  def __init__(self, connector: BybitConnector, db_manager: AdvancedDatabaseManager, data_fetcher: DataFetcher,settings: Dict[str, Any],risk_manager=None ):
    """

    """
    self.connector = connector
    self.db_manager = db_manager
    self.risk_manager = risk_manager
    # self.telegram_bot = telegram_bot
    self.data_fetcher = data_fetcher
    self.config = settings
    # self.trading_system = IntegratedTradingSystem(db_manager=db_manager)
    self.pending_orders = {}
    self.shadow_trading = None
    self.integrated_system = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ IntegratedTradingSystem
    self.state_manager = None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CCXT exchange –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not hasattr(self.connector, 'exchange') or self.connector.exchange is None:
      try:
        import ccxt
        self.connector.exchange = ccxt.bybit({
          'apiKey': self.connector.api_key,
          'secret': self.connector.api_secret,
          'enableRateLimit': True,
          'options': {
            'defaultType': 'linear',  # USDT perpetual
            'recvWindow': 5000
          }
        })
        logger.info("CCXT exchange –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ TradeExecutor")
      except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CCXT: {e}")

    self.execution_stats = {
      'orders_placed': 0,
      'orders_filled': 0,
      'orders_failed': 0,
      'total_slippage': 0.0
    }

    self.execution_stats = {
      'orders_placed': 0,
      'orders_filled': 0,
      'orders_failed': 0,
      'total_slippage': 0.0
    }

  async def _get_roi_details(self, symbol: str, signal: TradingSignal) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ ROI –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
    try:
      # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ risk_manager
      if not self.risk_manager:
        logger.warning(f"Risk manager –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ROI –¥–µ—Ç–∞–ª–µ–π {symbol}")
        return None

      # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ risk_manager
      roi_details = await self.risk_manager.calculate_roi_details(symbol, signal)
      return roi_details

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ROI –¥–µ—Ç–∞–ª–µ–π –¥–ª—è {symbol}: {e}")
      return None

  async def execute_trade(self, signal: TradingSignal, symbol: str, quantity: float) -> Tuple[bool, Optional[Dict]]:
    """
    –†–ï–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: –ò—Å–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è—è –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂—É.
    """
    logger.info(
      f"–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨ –¥–ª—è {symbol}: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ. –°–∏–≥–Ω–∞–ª: {signal.signal_type.value}, –ö–æ–ª-–≤–æ: {quantity:.5f}")
    logger.info(
        f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal.strategy_name}")

    try:
      # === –ù–û–í–´–ô –ë–õ–û–ö: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞ ===
      # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞
      try:
        current_time = datetime.now(timezone.utc)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ timezone —É timestamp —Å–∏–≥–Ω–∞–ª–∞
        if signal.timestamp.tzinfo is None:
          # –ï—Å–ª–∏ –Ω–µ—Ç timezone, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º UTC
          signal_timestamp_utc = signal.timestamp.replace(tzinfo=timezone.utc)
        else:
          # –ï—Å–ª–∏ –µ—Å—Ç—å timezone, –ø—Ä–∏–≤–æ–¥–∏–º –∫ UTC
          signal_timestamp_utc = signal.timestamp.astimezone(timezone.utc)

        signal_age = current_time - signal_timestamp_utc

      except Exception as tz_error:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ timezone –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {tz_error}")
        # Fallback: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ
        signal_age = timedelta(seconds=0)

      # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –æ–Ω –µ—â–µ
      if signal_age.total_seconds() > 1800:  # 3 –º–∏–Ω—É—Ç
        logger.warning(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol} —É—Å—Ç–∞—Ä–µ–ª ({signal_age}). –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_data = await self.data_fetcher.get_historical_candles(
          symbol,
          Timeframe.FIVE_MINUTES,
          limit=50
        )

        if current_data.empty:
          logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ {symbol}")
          return False, None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—à–ª–∞ –ª–∏ —Ü–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
        current_price = current_data['close'].iloc[-1]
        price_deviation = abs(current_price - signal.price) / signal.price

        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É—à–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 0.15% - –æ—Ç–º–µ–Ω—è–µ–º
        if price_deviation > 0.015:
          logger.warning(f"‚ùå –¶–µ–Ω–∞ {symbol} —Å–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞—Å—å –æ—Ç —Å–∏–≥–Ω–∞–ª–∞ ({price_deviation:.1%}). –û—Ç–º–µ–Ω—è–µ–º.")

          # –£–¥–∞–ª—è–µ–º –∏–∑ pending_signals
          if hasattr(self, 'integrated_system') and self.integrated_system:
            pending_signals = self.integrated_system.state_manager.get_pending_signals()
            if symbol in pending_signals:
              del pending_signals[symbol]
              self.integrated_system.state_manager.update_pending_signals(pending_signals)

          return False, {"reason": "price_deviation_too_high", "deviation": price_deviation}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞
        if hasattr(self.integrated_system, '_check_ltf_entry_trigger'):
          ltf_valid = self.integrated_system._check_ltf_entry_trigger(
            current_data,
            signal.signal_type
          )

          if not ltf_valid:
            logger.info(f"üìä –¢–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è {symbol}. –ñ–¥–µ–º –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π.")
            # –ù–µ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º
            return False, {"reason": "waiting_better_entry", "retry": True}

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é
        signal.price = current_price
        logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price}")

      # === –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –° –†–ï–ó–ï–†–í–û–ú ===

      # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
      balance_data = await self.connector.get_account_balance(account_type="UNIFIED", coin="USDT")
      if not balance_data or 'coin' not in balance_data:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        return False, None

      available_balance = float(balance_data.get('totalAvailableBalance', 0))

      # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (20% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
      reserve_ratio = 0.2
      usable_balance = available_balance * (1 - reserve_ratio)

      # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É
      leverage = self.config.get('trade_settings', {}).get('leverage', 10)
      required_amount = quantity * signal.price / leverage

      if required_amount > usable_balance:
        logger.warning(
          f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è {symbol}. –ù—É–∂–Ω–æ: ${required_amount:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${usable_balance:.2f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
        if hasattr(self, 'integrated_system') and self.integrated_system:
          pending_signals = self.integrated_system.state_manager.get_pending_signals()

          # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å * –≤–æ–∑—Ä–∞—Å—Ç)
          signal_priorities = []
          for sym, sig_data in pending_signals.items():
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å timezone
            signal_time_str = sig_data['metadata']['signal_time']
            if signal_time_str.endswith('Z'):
              signal_time = datetime.fromisoformat(signal_time_str.replace('Z', '+00:00'))
            elif '+' in signal_time_str or signal_time_str.count('-') > 2:
              signal_time = datetime.fromisoformat(signal_time_str)
            else:
              # –ï—Å–ª–∏ –Ω–µ—Ç timezone info, –¥–æ–±–∞–≤–ª—è–µ–º UTC
              signal_time = datetime.fromisoformat(signal_time_str).replace(tzinfo=timezone.utc)

            sig_age = (datetime.now(timezone.utc) - signal_time).total_seconds() / 3600
            priority = sig_data['confidence'] * (1 + sig_age * 0.1)  # –°—Ç–∞—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ–ª—É—á–∞—é—Ç –Ω–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å
            signal_priorities.append((sym, priority))

          signal_priorities.sort(key=lambda x: x[1], reverse=True)

          # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª –Ω–µ –≤ —Ç–æ–ø-3 –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É - –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º
          current_priority = next((i for i, (sym, _) in enumerate(signal_priorities) if sym == symbol), -1)
          if current_priority > 2:
            logger.info(
              f"üìä –°–∏–≥–Ω–∞–ª {symbol} –∏–º–µ–µ—Ç –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ({current_priority + 1}). –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.")
            return False, {"reason": "low_priority", "priority": current_priority}

      # === –ò–°–ü–û–õ–ù–ï–ù–ò–ï –û–†–î–ï–†–ê ===

      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞
      order_type = 'Market'
      if signal_age.total_seconds() > 600:  # –ï—Å–ª–∏ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç–Ω—ã–π
        order_type = 'Limit'
        # –î–ª—è BUY —Å—Ç–∞–≤–∏–º —á—É—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã, –¥–ª—è SELL - —á—É—Ç—å –≤—ã—à–µ
        if signal.signal_type == SignalType.BUY:
          signal.price *= 0.999  # -0.1%
        else:
          signal.price *= 1.001  # +0.1%

      logger.info(f"üöÄ –†–∞–∑–º–µ—â–∞–µ–º {order_type} –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}")

      # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
      trade_settings = self.config.get('trade_settings', {})
      leverage = trade_settings.get('leverage', 10)

      balance_data = await self.connector.get_account_balance(account_type="UNIFIED", coin="USDT")
      if balance_data and 'coin' in balance_data and balance_data['coin']:
        available_balance = float(balance_data.get('totalAvailableBalance', 0))
        leverage = self.config.get('trade_settings', {}).get('leverage', 10)
        cost_of_trade = (signal.price * quantity) / leverage

        if cost_of_trade > available_balance:
          logger.error(
            f"–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è {symbol}. –¢—Ä–µ–±—É–µ—Ç—Å—è: {cost_of_trade:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_balance:.2f}")
          signal_logger.error("–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨: –û–¢–ö–õ–û–ù–ï–ù–û. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
          return False, None
      else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.")


      # 1. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ä–¥–µ—Ä–∞
      params = {
        'symbol': symbol,
        'side': 'Buy' if signal.signal_type == SignalType.BUY else 'Sell',
        'orderType': 'Market',
        'qty': str(quantity),
        'positionIdx': 0
      }

      # Bybit API —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã SL/TP –±—ã–ª–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
      # if signal.stop_loss and signal.stop_loss != 0:
      #   params['stopLoss'] = str(abs(signal.stop_loss))
      # if signal.take_profit and signal.take_profit != 0:
      #   params['takeProfit'] = str(abs(signal.take_profit))
      if signal.stop_loss and signal.stop_loss != 0:
        params['stopLoss'] = str(signal.stop_loss)
      if signal.take_profit and signal.take_profit != 0:
        params['takeProfit'] = str(signal.take_profit)

      # leverage = self.config.get('trade_settings', {}).get('leverage', 10)

      try:
        roi_info = self.risk_manager.convert_roi_to_price_targets(
          entry_price=signal.price,
          signal_type=signal.signal_type
        )

        logger.info(f"ROI –î–ï–¢–ê–õ–ò –°–î–ï–õ–ö–ò –¥–ª—è {symbol}:")
        logger.info(f"  –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal.price:.6f}")
        logger.info(f"  SL: {signal.stop_loss:.6f} (ROI: {roi_info['stop_loss']['roi_pct']:.1f}%)")
        logger.info(f"  TP: {signal.take_profit:.6f} (ROI: {roi_info['take_profit']['roi_pct']:.1f}%)")
        logger.info(f"  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è: ${roi_info['stop_loss']['distance_abs'] * quantity:.2f}")
        logger.info(f"  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${roi_info['take_profit']['distance_abs'] * quantity:.2f}")

      except Exception as roi_error:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ROI –¥–µ—Ç–∞–ª–∏ –¥–ª—è {symbol}: {roi_error}")

      # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂—É
      logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ: {params}")
      if not hasattr(signal, 'strategy_name') or not signal.strategy_name:
        signal.strategy_name = 'Unknown_new'

      # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è bybit_connector.place_order
      order_params = {
        'symbol': symbol,
        'side': 'Buy' if signal.signal_type == SignalType.BUY else 'Sell',
        'orderType': 'Market',  # Bybit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç orderType, –Ω–µ order_type
        'qty': str(quantity),  # Bybit —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è qty
        'category': 'linear',  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è v5
        'positionIdx': 0  # –î–ª—è one-way mode
      }

      # –î–æ–±–∞–≤–ª—è–µ–º SL/TP –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
      if signal.stop_loss and signal.stop_loss != 0:
        order_params['stopLoss'] = signal.stop_loss
      if signal.take_profit and signal.take_profit != 0:
        order_params['takeProfit'] = signal.take_profit

      logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ: {order_params}")

      from core.circuit_breaker import get_circuit_breaker_manager, CircuitBreakerOpenError

      # –ü–æ–ª—É—á–∞–µ–º circuit breaker
      circuit_manager = get_circuit_breaker_manager()
      order_breaker = circuit_manager.get_breaker('order_execution')

      try:
        order_response = await order_breaker.call(
          self.connector.place_order,
          symbol=order_params['symbol'],
          side=order_params['side'],
          order_type='Market',  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
          quantity=float(order_params['qty']),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ float
          category=order_params.get('category', 'linear'),
          positionIdx=order_params.get('positionIdx', 0)
        )
      except CircuitBreakerOpenError as e:
        logger.error(f"Circuit breaker –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}: {e}")
        return False, None

      # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      if order_response and order_response.get('orderId'):
        order_id = order_response.get('orderId')
        logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ {symbol} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –±–∏—Ä–∂–µ–π. OrderID: {order_id}")

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ strategy_name –∑–∞–ø–∏—Å–∞–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if not signal.metadata:
          signal.metadata = {}
        signal.metadata['strategy_name'] = signal.strategy_name

        # –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
        trade_details = await self.db_manager.add_trade_with_signal(
          signal=signal,
          order_id=order_id,
          quantity=quantity,
          leverage=leverage
        )

        if trade_details:
          logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î: ID={trade_details.get('id')}, Symbol={symbol}")
        else:
          logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–¥–µ–ª–∫—É –≤ –ë–î –¥–ª—è {symbol}")

        if hasattr(signal, 'metadata') and signal.metadata:
          shadow_id = signal.metadata.get('shadow_tracking_id')
          if shadow_id and hasattr(self, 'shadow_trading') and self.shadow_trading:
            try:
              await self.shadow_trading.signal_tracker.mark_signal_executed(
                shadow_id,
                order_id,
                quantity,
                leverage
              )
            except Exception as e:
              logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Shadow Trading: {e}")

        return True, trade_details
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –∏ –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏

      else:
        if order_response:
          # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å, –Ω–æ –≤ –Ω–µ–º –æ—à–∏–±–∫–∞
          ret_msg = order_response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
          logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}. –ü—Ä–∏—á–∏–Ω–∞: {ret_msg}. –û—Ç–≤–µ—Ç –±–∏—Ä–∂–∏: {order_response}")
          signal_logger.error(f"–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨: –û–®–ò–ë–ö–ê. –û—Ä–¥–µ—Ä –Ω–µ –ø—Ä–∏–Ω—è—Ç. –û—Ç–≤–µ—Ç: {ret_msg}")
        else:
          # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç —Å–æ–≤—Å–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–π–º–∞—É—Ç —Å–µ—Ç–∏)
          logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}. –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–∏—Ä–∂–∏.")
          signal_logger.error("–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨: –û–®–ò–ë–ö–ê. –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–∏—Ä–∂–∏.")

        signal_logger.info(f"====== –¶–ò–ö–õ –°–ò–ì–ù–ê–õ–ê –î–õ–Ø {symbol} –ó–ê–í–ï–†–®–ï–ù ======\n")
        return False, None

    except Exception as e:
      logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ {symbol}: {e}", exc_info=True)
      return False, None

  async def _revalidate_pending_signals(self):
    """
    –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ä–µ–≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö pending —Å–∏–≥–Ω–∞–ª–æ–≤
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    """
    try:
      pending_signals = self.state_manager.get_pending_signals()

      if not pending_signals:
        return

      logger.info(f"üîÑ –†–µ–≤–∞–ª–∏–¥–∞—Ü–∏—è {len(pending_signals)} –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")

      for symbol, signal_data in list(pending_signals.items()):
        try:
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
          # signal_time = datetime.fromisoformat(signal_data['metadata']['signal_time'])
          # age_hours = (datetime.now() - signal_time).total_seconds() / 3600
          signal_time_str = signal_data['metadata']['signal_time']
          signal_time_naive = datetime.fromisoformat(signal_time_str)
          signal_time = signal_time_naive.replace(
            tzinfo=timezone.utc) if signal_time_naive.tzinfo is None else signal_time_naive
          age_hours = (datetime.now(timezone.utc) - signal_time).total_seconds() / 3600

          # –ï—Å–ª–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ - —É–¥–∞–ª—è–µ–º
          if age_hours > 2:
            logger.warning(f"‚ùå –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–∏–≥–Ω–∞–ª {symbol} (–≤–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f}—á)")
            del pending_signals[symbol]
            continue

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
          current_data = await self.data_fetcher.get_historical_candles(
            symbol, Timeframe.FIFTEEN_MINUTES, limit=20
          )

          if current_data.empty:
            continue

          current_price = current_data['close'].iloc[-1]
          original_price = signal_data['price']
          deviation = abs(current_price - original_price) / original_price

          # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
          signal_data['metadata']['current_price'] = current_price
          signal_data['metadata']['price_deviation'] = deviation
          signal_data['metadata']['last_revalidation'] = datetime.now().isoformat()

          # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ - –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
          if deviation > 0.01:  # 2%
            signal_data['metadata']['needs_urgent_check'] = True
            logger.warning(f"‚ö†Ô∏è {symbol}: –±–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã ({deviation:.1%})")

        except Exception as e:
          logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {e}")

      # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      self.state_manager.update_pending_signals(pending_signals)

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

  async def execute_trade_with_smart_pricing(self, signal: TradingSignal, symbol: str, quantity: float) -> Tuple[
    bool, Optional[Dict]]:
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–∫–∞–Ω –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤."""
    try:
      # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤
      order_book = await self.connector.fetch_order_book(symbol, depth=10)

      if order_book and 'bids' in order_book and 'asks' in order_book:
        best_bid = float(order_book['bids'][0][0]) if order_book['bids'] else 0
        best_ask = float(order_book['asks'][0][0]) if order_book['asks'] else 0

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å –æ–±—ä–µ–º–æ–≤
        total_bid_volume = sum(float(bid[1]) for bid in order_book['bids'][:5])
        total_ask_volume = sum(float(ask[1]) for ask in order_book['asks'][:5])

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        if total_bid_volume > total_ask_volume * 2:
          logger.info("–°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")
        elif total_ask_volume > total_bid_volume * 2:
          logger.warning("–°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")
          quantity *= 0.8

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º market order –Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ø—Ä–µ–¥–µ
        spread = best_ask - best_bid
        spread_pct = (spread / best_bid) * 100 if best_bid > 0 else 0

        logger.info(f"–°—Ç–∞–∫–∞–Ω {symbol}: bid={best_bid:.4f}, ask={best_ask:.4f}, spread={spread_pct:.3f}%")

        # –ï—Å–ª–∏ —Å–ø—Ä–µ–¥ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–π, –º–æ–∂–µ–º –æ—Ç–ª–æ–∂–∏—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        if spread_pct > 0.5:  # –ë–æ–ª–µ–µ 0.5%
          logger.warning(f"–®–∏—Ä–æ–∫–∏–π —Å–ø—Ä–µ–¥ {spread_pct:.3f}% –¥–ª—è {symbol}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å")

      # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
      return await self.execute_trade(signal, symbol, quantity)

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
      # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
      return await self.execute_trade(signal, symbol, quantity)

  async def close_position(self, symbol: str) -> bool:
    """
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ä—ã–Ω–∫—É.
    """
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É {symbol}...")

    try:
      # 1. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö —Å –±–∏—Ä–∂–∏
      positions = await self.connector.fetch_positions(symbol)
      active_position = next((pos for pos in positions if float(pos.get('size', 0)) > 0), None)

      # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ –±–∏—Ä–∂–µ
      if not active_position:
        logger.warning(f"–ù–∞ –±–∏—Ä–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}.")

        # --- –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–û–ú–ë–ò-–ü–û–ó–ò–¶–ò–ò ---
        local_trade = await self.db_manager.get_open_trade_by_symbol(symbol)
        if local_trade:
          logger.warning(
            f"–ù–∞–π–¥–µ–Ω–∞ '–∑–æ–º–±–∏-–ø–æ–∑–∏—Ü–∏—è' –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (ID: {local_trade['id']}). –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ...")
          # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
          last_kline = await self.data_fetcher.get_historical_candles(symbol, Timeframe.ONE_MINUTE, limit=1)
          close_price = last_kline['close'].iloc[-1] if not last_kline.empty else 0

          await self.db_manager.force_close_trade(
            trade_id=local_trade['id'],
            close_price=close_price,
            reason=f"Forced closure due to no position on exchange"
          )
          logger.info(f"–ó–æ–º–±–∏-–ø–æ–∑–∏—Ü–∏—è (ID: {local_trade['id']}) —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –≤ –ë–î.")
        # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò ---
        return True  # –°—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

      # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
      pos_size_str = active_position.get('size', '0')
      pos_side = active_position.get('side')
      logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ: {pos_side} {pos_size_str} {symbol}")

      # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
      close_side = "Sell" if pos_side == "Buy" else "Buy"
      params = {
        'symbol': symbol,
        'side': close_side,
        'orderType': 'Market',
        'qty': str(float(pos_size_str)),
        'reduceOnly': True,
        'positionIdx': 0
      }
      # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
      # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è bybit_connector.place_order
      order_params = {
        'symbol': symbol,
        'side': 'Buy' if signal.signal_type == SignalType.BUY else 'Sell',
        'order_type': 'Market',
        'quantity': quantity,
        'price': None,  # –î–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        'time_in_force': 'GTC'
      }

      # –î–æ–±–∞–≤–ª—è–µ–º SL/TP –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
      if signal.stop_loss and signal.stop_loss != 0:
        order_params['stopLoss'] = signal.stop_loss
      if signal.take_profit and signal.take_profit != 0:
        order_params['takeProfit'] = signal.take_profit

      logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ: {order_params}")

      from core.circuit_breaker import get_circuit_breaker_manager, CircuitBreakerOpenError

      # –ü–æ–ª—É—á–∞–µ–º circuit breaker
      circuit_manager = get_circuit_breaker_manager()
      order_breaker = circuit_manager.get_breaker('order_execution')

      try:
        order_response = await order_breaker.call(
          self.connector.place_order,
          symbol=order_params['symbol'],
          side=order_params['side'],
          order_type=order_params['order_type'],
          quantity=order_params['quantity'],
          price=order_params.get('price'),
          time_in_force=order_params.get('time_in_force', 'GTC'),
          **{k: v for k, v in order_params.items() if
             k not in ['symbol', 'side', 'order_type', 'quantity', 'price', 'time_in_force']}
        )
      except CircuitBreakerOpenError as e:
        logger.error(f"Circuit breaker –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}: {e}")
        return False, None

      # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if order_response and order_response.get('orderId'):
        logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ {symbol} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –±–∏—Ä–∂–µ–π. OrderID: {order_response.get('orderId')}")

        # if hasattr(self, 'integrated_system') and self.integrated_system:
        #     await self.integrated_system.position_manager.on_position_closed(symbol, profit_loss)

        # –í–ê–ñ–ù–û: –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º—ã —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ä–¥–µ—Ä.
        # –†–∞—Å—á–µ—Ç PnL –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î –Ω–∞ 'CLOSED' –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å
        # –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤.

        return True


      else:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è {symbol}. –û—Ç–≤–µ—Ç –±–∏—Ä–∂–∏: {order_response}")
        return False

    except Exception as e:
      logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}", exc_info=True)
      return False
#-----------------------------------------------------------
  # async def close_position(self, symbol: str, db_trade_id: [int] = None, open_order_id: [str] = None,
  #                          quantity_to_close: [float] = None) -> bool:
  #   """
  #   –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é (–∏–ª–∏ –µ–µ —á–∞—Å—Ç—å).
  #   –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.
  #
  #   Args:
  #       symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª.
  #       db_trade_id (Optional[int]): ID —Å–¥–µ–ª–∫–∏ –≤ –Ω–∞—à–µ–π –ë–î (–µ—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é).
  #       open_order_id (Optional[str]): ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ (–µ—Å–ª–∏ db_trade_id –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω).
  #       quantity_to_close (Optional[float]): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è. –ï—Å–ª–∏ None, –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤—Å—è –ø–æ–∑–∏—Ü–∏—è –∏–∑ –ë–î.
  #
  #   Returns:
  #       bool: True, –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
  #   """
  #   trade_info = None
  #   if db_trade_id:
  #     # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º, –µ—Å–ª–∏ db_manager –Ω–µ async
  #     # trade_info = self.db_manager.get_trade_by_id(db_trade_id) # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –µ—Å—Ç—å —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥
  #     # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∏—â–µ–º –ø–æ order_id –∏–ª–∏ –¥—Ä—É–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
  #     pass  # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ –±—ã –º—ã –∏—Å–∫–∞–ª–∏ –ø–æ ID –∏–∑ –Ω–∞—à–µ–π –ë–î
  #
  #   if not trade_info and open_order_id:
  #     trade_info = self.db_manager.get_trade_by_order_id(open_order_id)
  #
  #   if not trade_info:
  #     # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ë–î, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å –±–∏—Ä–∂–∏
  #     logger.warning(
  #       f"–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ –≤ –ë–î –¥–ª—è {symbol} (OrderID: {open_order_id}). –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å –±–∏—Ä–∂–∏.")
  #     positions = await self.connector.fetch_positions(symbols=[symbol])
  #     if positions:
  #       # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É. Bybit fetch_positions –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ (–¥–ª—è hedge mode)
  #       # –î–ª—è one-way mode –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞ –∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π.
  #       current_pos = None
  #       for pos_item in positions:
  #         if pos_item['symbol'] == symbol and float(pos_item.get('contracts', 0)) != 0:
  #           current_pos = pos_item
  #           break
  #
  #       if current_pos:
  #         pos_size = float(current_pos.get('contracts', 0))
  #         pos_side = 'buy' if pos_size > 0 else 'sell'  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
  #
  #         close_side = 'sell' if pos_side == 'buy' else 'buy'
  #         qty_to_close = abs(pos_size)
  #
  #         logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è {symbol}: {pos_side} {qty_to_close}. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è.")
  #         # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
  #         # Bybit API v5 –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç—Ä–µ–±—É–µ—Ç `reduceOnly=True`
  #         close_order_params = {
  #           'category': self.connector.exchange.options.get('defaultType', 'linear'),
  #           'reduceOnly': True
  #         }
  #         close_order_response = await self.connector.place_order(
  #           symbol=symbol,
  #           side=close_side,
  #           order_type='market',
  #           amount=qty_to_close,
  #           params=close_order_params
  #         )
  #
  #         if close_order_response and 'id' in close_order_response:
  #           close_order_id = close_order_response['id']
  #           # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏ PnL –±—É–¥—É—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞.
  #           # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î.
  #           logger.info(f"–û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} (ID: {close_order_id}) —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω.")
  #           # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–∂–¥–∞—Ç—å—Å—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ë–î, —ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä.
  #           # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î —Å PnL, –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è.
  #           # –ú–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ WebSocket –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å.
  #           # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ.
  #           # db_manager.update_close_trade(...) –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ.
  #           return True
  #         else:
  #           logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è {symbol}. –û—Ç–≤–µ—Ç: {close_order_response}")
  #           return False
  #       else:
  #         logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è {symbol} –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
  #         return False
  #     else:
  #       logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö —Å –±–∏—Ä–∂–∏ –¥–ª—è {symbol}.")
  #       return False
  #
  #   # –ï—Å–ª–∏ –∂–µ —É –Ω–∞—Å –µ—Å—Ç—å trade_info –∏–∑ –Ω–∞—à–µ–π –ë–î (—Ç.–µ. –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é)
  #   if trade_info and trade_info['status'] == 'OPEN':
  #     original_side = trade_info['side']
  #     original_quantity = trade_info['quantity']
  #     open_order_id_from_db = trade_info['order_id']
  #
  #     close_side = 'sell' if original_side == 'buy' else 'buy'
  #     qty_to_close = quantity_to_close if quantity_to_close else original_quantity
  #
  #     logger.info(
  #       f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ë–î (OrderID: {open_order_id_from_db}): {symbol} {close_side} {qty_to_close}")
  #
  #     close_order_params = {
  #       'category': self.connector.exchange.options.get('defaultType', 'linear'),
  #       'reduceOnly': True  # –í–∞–∂–Ω–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
  #     }
  #
  #     # –ï—Å–ª–∏ –º—ã –∑–Ω–∞–µ–º ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ, –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ `clientOrderId` –¥–ª—è —Å–≤—è–∑–∏,
  #     # –Ω–æ —ç—Ç–æ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤ CCXT.
  #     # if open_order_id_from_db:
  #     #    close_order_params['clientOrderId'] = f"close_{open_order_id_from_db}"
  #
  #     close_order_response = await self.connector.place_order(
  #       symbol=symbol,
  #       side=close_side,
  #       order_type='market',  # –û–±—ã—á–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—é—Ç —Ä—ã–Ω–æ—á–Ω—ã–º
  #       amount=qty_to_close,
  #       params=close_order_params
  #     )
  #
  #     if close_order_response and 'id' in close_order_response:
  #       close_order_id = close_order_response['id']
  #       logger.info(
  #         f"–û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ (ID: {close_order_id}) –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {open_order_id_from_db} ({symbol}) —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω.")
  #
  #       # –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î —Å P/L, –∫–æ–º–∏—Å—Å–∏–µ–π –∏ —Ü–µ–Ω–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å
  #       # –ü–û–°–õ–ï —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
  #       # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ polling).
  #       # –ó–¥–µ—Å—å –º—ã —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ. –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –±—É–¥–µ—Ç –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ,
  #       # –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤.
  #
  #       # –ü–æ–∫–∞ —á—Ç–æ, –º—ã –º–æ–∂–µ–º –ø–æ–º–µ—Ç–∏—Ç—å –≤ –ë–î, —á—Ç–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–∫—Ä—ã—Ç–∏–µ, –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è.
  #       # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–º –∫–æ–ª–ª–±—ç–∫ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–∑–∂–µ.
  #       return True
  #     else:
  #       logger.error(
  #         f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {open_order_id_from_db} ({symbol}). –û—Ç–≤–µ—Ç: {close_order_response}")
  #       return False
  #   else:
  #     logger.warning(
  #       f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ –≤ –ë–î —Å ID {db_trade_id} –∏–ª–∏ OrderID {open_order_id} –¥–ª—è {symbol}, –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –Ω–µ 'OPEN'.")
  #     return False

  # async def update_trade_status_from_exchange(self, order_id: str, symbol: str):
  #   """
  #   –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î, –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ).
  #   –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏–ª–∏ –ø–æ —Å–æ–±—ã—Ç–∏—é –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ.
  #   """
  #   if not self.connector.exchange:
  #     logger.error("CCXT exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏.")
  #     return
  #
  #   try:
  #     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ —Å –±–∏—Ä–∂–∏
  #     # Bybit —Ç—Ä–µ–±—É–µ—Ç 'category' –≤ params
  #     order_info = await self.connector.exchange.fetch_order(order_id, symbol, params={'category': BYBIT_CATEGORY})
  #     logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ {order_id} ({symbol}) —Å –±–∏—Ä–∂–∏: {order_info}")
  #
  #     if not order_info:
  #       logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ {order_id} ({symbol}) —Å –±–∏—Ä–∂–∏.")
  #       return
  #
  #     order_status = order_info.get('status')  # 'closed' (–∏—Å–ø–æ–ª–Ω–µ–Ω), 'open', 'canceled'
  #
  #     # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ä–¥–µ—Ä–æ–º –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
  #     # –∏ –æ–Ω –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω ('closed' –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö CCXT –æ–∑–Ω–∞—á–∞–µ—Ç filled)
  #
  #     db_trade_record = self.db_manager.get_trade_by_order_id(
  #       order_id)  # –≠—Ç–æ –µ—Å–ª–∏ order_id - —ç—Ç–æ ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –û–¢–ö–†–´–¢–ò–ï.
  #     # –ù–∞–º –Ω—É–∂–µ–Ω –º–µ—Ö–∞–Ω–∏–∑–º —Å–≤—è–∑–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å –æ—Ä–¥–µ—Ä–æ–º –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ.
  #
  #     # –î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –û–¢–ö–†–´–¢–ò–ï, –∏ –º—ã —Ö–æ—Ç–∏–º –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å
  #     # –≠—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, —Ç.–∫. `order_id` –∑–¥–µ—Å—å - —ç—Ç–æ ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ó–ê–ö–†–´–¢–ò–ï.
  #     # –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –û–¢–ö–†–´–¢–£–Æ —Å–¥–µ–ª–∫—É –≤ –Ω–∞—à–µ–π –ë–î, –∫–æ—Ç–æ—Ä—É—é —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã–ª.
  #     # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å, –∏–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º—É —Å–∞–π–¥—É.
  #
  #     # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –º—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ (close_order_id) –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è.
  #     # –ù–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—É—é —Å–¥–µ–ª–∫—É (original_open_order_id) –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–µ.
  #     # –í –¥–∞–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ `order_id` - —ç—Ç–æ ID –æ—Ä–¥–µ—Ä–∞, —á–µ–π —Å—Ç–∞—Ç—É—Å –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º.
  #     # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ, –∏ –æ–Ω 'closed' (filled):
  #     if order_status == 'closed':  # 'filled' –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö –±–∏—Ä–∂–∏
  #       filled_price = float(order_info.get('average', order_info.get('price', 0.0)))  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
  #       filled_qty = float(order_info.get('filled', 0.0))
  #       commission_cost = float(order_info.get('fee', {}).get('cost', 0.0)) if order_info.get('fee') else 0.0
  #       # commission_currency = order_info.get('fee', {}).get('currency')
  #
  #       # –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –û–¢–ö–†–´–¢–£–Æ —Å–¥–µ–ª–∫—É –≤ –Ω–∞—à–µ–π –ë–î, –∫–æ—Ç–æ—Ä—É—é —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã–ª.
  #       # –≠—Ç–æ —Å–∞–º–∞—è —Å–ª–æ–∂–Ω–∞—è —á–∞—Å—Ç—å, –µ—Å–ª–∏ –º—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —è–≤–Ω—É—é —Å–≤—è–∑—å.
  #       # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º—ã –∑–∞–∫—Ä—ã–≤–∞–ª–∏ –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É `symbol`.
  #       # –ò—â–µ–º –≤ –ë–î –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É.
  #       open_trades_in_db = self.db_manager.get_open_positions_from_db()
  #       target_trade_to_update = None
  #       for trade in open_trades_in_db:
  #         if trade['symbol'] == symbol:
  #           # –ï—Å–ª–∏ –º—ã –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏, –ª–æ–≥–∏–∫–∞ —É—Å–ª–æ–∂–Ω—è–µ—Ç—Å—è.
  #           # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ä–∞–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.
  #           if abs(filled_qty - trade['quantity']) < 1e-9:  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ float
  #             target_trade_to_update = trade
  #             break
  #
  #       if target_trade_to_update:
  #         original_open_order_id = target_trade_to_update['order_id']
  #         open_price_db = target_trade_to_update['open_price']
  #         original_side_db = target_trade_to_update['side']
  #         original_qty_db = target_trade_to_update['quantity']
  #
  #         # –†–∞—Å—á–µ—Ç P/L
  #         pnl = 0
  #         if original_side_db == 'buy':  # –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –ª–æ–Ω–≥, –∑–∞–∫—Ä—ã–ª–∏ –ø—Ä–æ–¥–∞–∂–µ–π
  #           pnl = (filled_price - open_price_db) * original_qty_db
  #         elif original_side_db == 'sell':  # –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ —à–æ—Ä—Ç, –∑–∞–∫—Ä—ã–ª–∏ –ø–æ–∫—É–ø–∫–æ–π
  #           pnl = (open_price_db - filled_price) * original_qty_db
  #
  #         # PnL —Å —É—á–µ—Ç–æ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞ —É–∂–µ –∑–∞–ª–æ–∂–µ–Ω –≤ —Ç–æ–º, —á—Ç–æ quantity - —ç—Ç–æ —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.
  #         # –ö–æ–º–∏—Å—Å–∏—è –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ PnL
  #         net_pnl = pnl - commission_cost
  #
  #         logger.info(f"–û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ {order_id} –¥–ª—è {symbol} –∏—Å–ø–æ–ª–Ω–µ–Ω. "
  #                     f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {filled_price}, –ö–æ–ª-–≤–æ: {filled_qty}, –ö–æ–º–∏—Å—Å–∏—è: {commission_cost}. –†–∞—Å—á–µ—Ç–Ω—ã–π P/L: {net_pnl}")
  #
  #         await self.db_manager.update_close_trade(
  #           order_id=original_open_order_id,  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏—Å—Ö–æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ
  #           close_timestamp=datetime.fromtimestamp(order_info['timestamp'] / 1000, tz=timezone.utc) if order_info.get(
  #             'timestamp') else datetime.now(timezone.utc),
  #           close_price=filled_price,
  #           profit_loss=net_pnl,
  #           commission=commission_cost
  #         )
  #       else:
  #         logger.warning(
  #           f"–ò—Å–ø–æ–ª–Ω–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ {order_id} ({symbol}), –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ –≤ –ë–î –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
  #     elif order_status in ['open', 'partially_filled']:
  #       logger.info(f"–û—Ä–¥–µ—Ä {order_id} ({symbol}) –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω (—Å—Ç–∞—Ç—É—Å: {order_status}).")
  #     elif order_status in ['canceled', 'rejected', 'expired']:
  #       logger.warning(f"–û—Ä–¥–µ—Ä {order_id} ({symbol}) –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω (—Å—Ç–∞—Ç—É—Å: {order_status}).")
  #       # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—à–µ–π –ë–î, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ.
  #       # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ, —Ç–æ –ø–æ–∑–∏—Ü–∏—è –≤—Å–µ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–∞.
  #
  #   except ccxt.OrderNotFound:
  #     logger.warning(
  #       f"–û—Ä–¥–µ—Ä {order_id} –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –¥–∞–≤–Ω–æ –∏–ª–∏ ID –Ω–µ–≤–µ—Ä–µ–Ω.")
  #     # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –Ω–∞—à–µ–π –ë–î –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏ –ø–æ–º–µ—Ç–∏—Ç—å –µ–≥–æ –∫–∞–∫ "–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–π" –∏–ª–∏ "–æ—à–∏–±–∫–∞".
  #   except Exception as e:
  #     logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {order_id} ({symbol}): {e}", exc_info=True)

  async def update_trade_status_from_exchange(self, order_id: str, symbol: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ get_execution_history
    –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ BybitConnector.
    """
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {order_id} –ø–æ —Å–∏–º–≤–æ–ª—É {symbol}")

    # >>> –ù–ê–ß–ê–õ–û –ü–ê–¢–ß–ê <<<
    try:
        # 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        # –ü–æ–ª—É—á–∞–µ–º 50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
        execution_history = await self.connector.get_execution_history(symbol=symbol, limit=50)

        if not execution_history:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è {symbol}.")
            return

        # 2. –ò—â–µ–º –Ω–∞—à –æ—Ä–¥–µ—Ä –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        order_info = None
        for execution in execution_history:
            if execution.get('orderId') == order_id:
                order_info = execution
                break # –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π –æ—Ä–¥–µ—Ä, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

        if not order_info:
            logger.warning(f"–û—Ä–¥–µ—Ä {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –¥–∞–≤–Ω–æ.")
            return

        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Ö–æ–∂–µ–π –Ω–∞ –≤–∞—à—É)
        order_status = order_info.get('orderStatus', '').lower() # Bybit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'Filled'

        logger.debug(f"–û—Ä–¥–µ—Ä {order_id} ({symbol}): —Å—Ç–∞—Ç—É—Å = {order_status}")

        # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω (—Å—Ç–∞—Ç—É—Å 'Filled' –≤ –æ—Ç–≤–µ—Ç–µ Bybit)
        if order_status == 'filled':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ get_execution_history ('execPrice', 'execFee')
            filled_price = float(order_info.get('execPrice', 0))
            filled_qty = float(order_info.get('execQty', 0))

            logger.info(
                f"–û—Ä–¥–µ—Ä {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π: —Ü–µ–Ω–∞={filled_price}, –∫–æ–ª-–≤–æ={filled_qty}"
            )

            # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î) –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ reconcile_filled_orders,
            # –Ω–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã.

        elif order_status in ['cancelled', 'rejected']:
            logger.warning(f"–û—Ä–¥–µ—Ä {order_id} –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω, —Å—Ç–∞—Ç—É—Å: {order_status}")
            # ... (–≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}", exc_info=True)

  async def execute_grid_trade(self, grid_signal: GridSignal) -> bool:
    """
    –ò–°–ü–û–õ–ù–Ø–ï–¢ –°–ï–¢–û–ß–ù–´–ô –°–ò–ì–ù–ê–õ –° –ü–†–û–í–ï–†–ö–û–ô –ë–ê–õ–ê–ù–°–ê –ò –ö–û–ù–¢–†–û–õ–ï–ú –ß–ê–°–¢–û–¢–´ –ó–ê–ü–†–û–°–û–í.
    """
    logger.info(f"–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨ –¥–ª—è {grid_signal.symbol}: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –°–ï–¢–ö–ò.")
    signal_logger.info(
      f"–°–ï–¢–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è {grid_signal.symbol}. Buy: {len(grid_signal.buy_orders)}, Sell: {len(grid_signal.sell_orders)} —É—Ä–æ–≤–Ω–µ–π.")

    try:
      # --- –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –±–∞–ª–∞–Ω—Å –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π ---

      # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      trade_settings = self.config.get('trade_settings', {})
      total_allocation_usdt = trade_settings.get('grid_total_usdt_allocation', 50.0)
      min_order_value_usdt = trade_settings.get('min_order_value_usdt', 5.5)

      # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –û–î–ù–û–ì–û –æ—Ä–¥–µ—Ä–∞ –≤ —Å–µ—Ç–∫–µ
      num_buy_orders = len(grid_signal.buy_orders)
      num_sell_orders = len(grid_signal.sell_orders)

      if num_buy_orders == 0 or num_sell_orders == 0:
        logger.warning("–°–µ—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞: –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É.")
        signal_logger.warning("–°–ï–¢–ö–ê: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ - –Ω–µ—Ç —É—Ä–æ–≤–Ω–µ–π.")
        return False

      # –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É
      buy_order_size_usdt = total_allocation_usdt / num_buy_orders
      sell_order_size_usdt = total_allocation_usdt / num_sell_orders

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä –û–î–ù–û–ì–û –æ—Ä–¥–µ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏
      if buy_order_size_usdt < min_order_value_usdt or sell_order_size_usdt < min_order_value_usdt:
        logger.error(
          f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–µ—Ç–∫—É: —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ({buy_order_size_usdt:.2f} USDT) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_order_value_usdt} USDT).")
        signal_logger.error(f"–°–ï–¢–ö–ê: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ - —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª.")
        logger.info("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£–≤–µ–ª–∏—á—å—Ç–µ 'grid_total_usdt_allocation' –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ 'grid_levels' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return False

      # --- –®–ê–ì 2: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ---

      instrument_info = await self.data_fetcher.get_instrument_info(grid_signal.symbol)
      lot_size_filter = instrument_info.get('lotSizeFilter', {})
      qty_step_str = lot_size_filter.get('qtyStep', '1')

      all_orders_params = []

      # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É
      for order in grid_signal.buy_orders:
        qty = (buy_order_size_usdt / order.price) if order.price > 0 else 0
        adjusted_qty = float(
          (Decimal(str(qty)) / Decimal(qty_step_str)).to_integral_value(rounding=ROUND_DOWN) * Decimal(qty_step_str))
        if adjusted_qty > 0:
          all_orders_params.append(
            {'symbol': grid_signal.symbol, 'side': 'Buy', 'orderType': 'Limit', 'qty': str(adjusted_qty),
             'price': str(order.price),'positionIdx': 0})

      # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
      for order in grid_signal.sell_orders:
        qty = (sell_order_size_usdt / order.price) if order.price > 0 else 0
        adjusted_qty = float(
          (Decimal(str(qty)) / Decimal(qty_step_str)).to_integral_value(rounding=ROUND_DOWN) * Decimal(qty_step_str))
        if adjusted_qty > 0:
          all_orders_params.append(
            {'symbol': grid_signal.symbol, 'side': 'Sell', 'orderType': 'Limit', 'qty': str(adjusted_qty),
             'price': str(order.price)})

      if not all_orders_params:
        logger.warning("–ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
        return False

      logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ {len(all_orders_params)} –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–µ—Ç–∫–∏ {grid_signal.symbol} —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π...")

      success_count = 0
      # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞ –ü–û –û–î–ù–û–ú–£ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å rate limit
      for params in all_orders_params:
        try:
          result = await self.connector.place_order(**params)
          if result and result.get('orderId'):
            success_count += 1
            logger.debug(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä: {params}")
          else:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –≤ —Å–µ—Ç–∫–µ: {result.get('retMsg', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")

          # --- –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ ---
          await asyncio.sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 120 –º—Å (8 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫)
        except Exception as e:
          logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ {params}: {e}")

      logger.info(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ {success_count} –∏–∑ {len(all_orders_params)} –æ—Ä–¥–µ—Ä–æ–≤ —Å–µ—Ç–∫–∏.")
      signal_logger.info(f"–°–ï–¢–ö–ê: –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ {success_count}/{len(all_orders_params)} –æ—Ä–¥–µ—Ä–æ–≤.")
      return success_count > 0

    except Exception as e:
      logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–µ—Ç–∫–∏ {grid_signal.symbol}: {e}", exc_info=True)
      return False

  async def reverse_position(self, symbol: str, current_position: Dict,
                               new_signal: TradingSignal, force: bool = False) -> bool:
      """
      –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é Bybit "–æ–±—Ä–∞—Ç–Ω—ã–π".

      Args:
          symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
          current_position: –¢–µ–∫—É—â–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
          new_signal: –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
          force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏

      Returns:
          bool: True –µ—Å–ª–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç —É—Å–ø–µ—à–µ–Ω
      """
      try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π
        if not current_position or not new_signal:
          logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ {symbol}")
          return False

        current_side = current_position.get('side')
        new_side = 'BUY' if new_signal.signal_type == SignalType.BUY else 'SELL'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç
        if (current_side == 'BUY' and new_side == 'BUY') or \
            (current_side == 'SELL' and new_side == 'SELL'):
          logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é {symbol} –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
          return False

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ force)
        if not force:
          open_price = float(current_position.get('open_price', 0))
          current_price = new_signal.price

          # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π –ø—Ä–∏–±—ã–ª–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          if current_side == 'BUY':
            profit_pct = ((current_price - open_price) / open_price) * 100
          else:
            profit_pct = ((open_price - current_price) / open_price) * 100

          # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ (–ø–æ–∫—Ä—ã—Ç–∏–µ 2x –∫–æ–º–∏—Å—Å–∏–π + –±—É—Ñ–µ—Ä)
          commission_rate = 0.00075  # Taker fee
          min_profit_for_reverse = (commission_rate * 2) * 100 * 1.5  # 0.225%

          if profit_pct < min_profit_for_reverse:
            logger.warning(
              f"–†–∞–∑–≤–æ—Ä–æ—Ç {symbol} –æ—Ç–∫–ª–æ–Ω–µ–Ω: –ø—Ä–∏–±—ã–ª—å {profit_pct:.3f}% "
              f"–º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {min_profit_for_reverse:.3f}%"
            )
            return False

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        min_confidence = self.config.get('strategy_settings', {}).get(
          'signal_confidence_threshold', 0.4
        )
        if new_signal.confidence < min_confidence * 1.2:  # –¢—Ä–µ–±—É–µ–º –Ω–∞ 20% –≤—ã—à–µ –æ–±—ã—á–Ω–æ–≥–æ
          logger.warning(
            f"–†–∞–∑–≤–æ—Ä–æ—Ç {symbol} –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å "
            f"{new_signal.confidence:.2f} < {min_confidence * 1.2:.2f}"
          )
          return False

        # 4. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        current_size = float(current_position.get('position_size', 0))
        if current_size <= 0:
          logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {current_size}")
          return False

        # 5. –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç —á–µ—Ä–µ–∑ API Bybit
        logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É—é —Ä–∞–∑–≤–æ—Ä–æ—Ç –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {current_side} -> {new_side}")

        # –î–ª—è Bybit v5 –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä —Å reduceOnly=false
        # –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
        reverse_size = current_size * 2

        params = {
          'symbol': symbol,
          'side': new_side,
          'orderType': 'Market',
          'qty': str(reverse_size),
          'reduceOnly': False,  # –í–∞–∂–Ω–æ: false –¥–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
          'timeInForce': 'ImmediateOrCancel'
        }

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SL/TP –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        sl_tp_levels = await self.risk_manager.calculate_unified_sl_tp(
          new_signal,
          method='dynamic'
        )

        if sl_tp_levels.get('stop_loss'):
          params['stopLoss'] = str(sl_tp_levels['stop_loss'])
        if sl_tp_levels.get('take_profit'):
          params['takeProfit'] = str(sl_tp_levels['take_profit'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
        circuit_manager = get_circuit_breaker_manager()
        order_breaker = circuit_manager.get_breaker('order_execution')

        try:
          order_response = await order_breaker.call(self.connector.place_order, **params)
        except CircuitBreakerOpenError as e:
          logger.error(f"Circuit breaker –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {e}")
          return None

        if order_response and order_response.get('orderId'):
          order_id = order_response['orderId']
          logger.info(f"‚úÖ –†–∞–∑–≤–æ—Ä–æ—Ç –ø–æ–∑–∏—Ü–∏–∏ {symbol} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω. OrderID: {order_id}")

          # 6. –û–±–Ω–æ–≤–ª—è–µ–º –ë–î - –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é
          if current_position.get('db_trade_id'):
            close_price = new_signal.price
            self.db_manager.update_close_trade(
              current_position['db_trade_id'],
              close_price=close_price,
              close_order_id=order_id,
              close_reason="REVERSE"
            )

          # 7. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
          new_trade_data = {
            'symbol': symbol,
            'order_id': order_id,
            'signal_data': new_signal.to_dict(),
            'entry_price': new_signal.price,
            'quantity': current_size,  # –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
            'side': new_side,
            'leverage': current_position.get('leverage', 10),
            'stop_loss': sl_tp_levels.get('stop_loss'),
            'take_profit': sl_tp_levels.get('take_profit'),
            'strategy_name': new_signal.strategy,
            'confidence': new_signal.confidence,
            'reverse_from': current_position.get('order_id')  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
          }

          await self.db_manager.add_trade_with_signal(new_trade_data)

          # 8. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–∑–∏—Ü–∏–π
          self.position_manager.open_positions[symbol] = {
            'symbol': symbol,
            'side': new_side,
            'position_size': current_size,
            'open_price': new_signal.price,
            'order_id': order_id,
            'is_reversed': True,
            'reversed_from': current_position.get('order_id'),
            'timestamp': datetime.now()
          }

          return True

        else:
          logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é {symbol}. –û—Ç–≤–µ—Ç: {order_response}")
          return False

      except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}", exc_info=True)
        return False