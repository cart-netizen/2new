import pandas as pd
import numpy as np
import pandas_ta as ta
from typing import Dict, List, Optional, Tuple, Any
from sklearn.model_selection import train_test_split, TimeSeriesSplit, cross_val_score
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import asyncio
import joblib
from datetime import datetime
import warnings

from core.enums import SignalType
from core.schemas import TradingSignal
from data.database_manager import AdvancedDatabaseManager
from ml.lorentzian_classifier import LorentzianClassifier, create_training_labels
from utils.logging_config import get_logger

class EnsembleMLStrategy:
  """Ensemble ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ–º"""

  def __init__(self, db_manager: AdvancedDatabaseManager, ml_model: LorentzianClassifier):
    self.strategy_name = "Ensemble_ML_Strategy"
    self.db_manager = db_manager
    self.base_model = ml_model
    self.models = {}
    self.performance_threshold = 0.6  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    self.retrain_interval = 24 * 60 * 60  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    self.last_retrain = {}
    # self.models = {}

    print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EnsembleMLStrategy. ml_model type: {type(ml_model)}")



  def _prepare_features(self, data: pd.DataFrame) -> pd.DataFrame:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML –º–æ–¥–µ–ª–∏"""
    if len(data) < 50:
      return pd.DataFrame()

    df = data.copy()

    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['rsi'] = ta.rsi(df['close'], length=14)
    df['rsi_fast'] = ta.rsi(df['close'], length=7)
    df['rsi_slow'] = ta.rsi(df['close'], length=21)

    df['macd'] = ta.macd(df['close'])['MACD_12_26_9']
    df['macd_signal'] = ta.macd(df['close'])['MACDs_12_26_9']
    df['macd_hist'] = ta.macd(df['close'])['MACDh_12_26_9']

    bb_data = ta.bbands(df['close'])
    if bb_data is not None and not bb_data.empty:
      bb_cols = bb_data.columns.tolist()
      upper_col = [col for col in bb_cols if 'BBU' in col][0] if any('BBU' in col for col in bb_cols) else None
      lower_col = [col for col in bb_cols if 'BBL' in col][0] if any('BBL' in col for col in bb_cols) else None

      if upper_col and lower_col:
        df['bb_upper'] = bb_data[upper_col]
        df['bb_lower'] = bb_data[lower_col]
        df['bb_percent'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'])
      else:
        df['bb_upper'] = df['close'] * 1.02
        df['bb_lower'] = df['close'] * 0.98
        df['bb_percent'] = 0.5
    else:
      df['bb_upper'] = df['close'] * 1.02
      df['bb_lower'] = df['close'] * 0.98
      df['bb_percent'] = 0.5

    df['atr'] = ta.atr(df['high'], df['low'], df['close'], length=14)
    df['atr_percent'] = df['atr'] / df['close']

    # Moving averages
    df['sma_10'] = ta.sma(df['close'], length=10)
    df['sma_20'] = ta.sma(df['close'], length=20)
    df['sma_50'] = ta.sma(df['close'], length=50)
    df['ema_12'] = ta.ema(df['close'], length=12)
    df['ema_26'] = ta.ema(df['close'], length=26)

    # Price patterns
    df['price_change'] = df['close'].pct_change()
    df['price_change_5'] = df['close'].pct_change(5)
    df['volatility'] = df['price_change'].rolling(20).std()

    # Volume indicators (–µ—Å–ª–∏ –µ—Å—Ç—å volume)
    if 'volume' in df.columns:
      df['volume_sma'] = ta.sma(df['volume'], length=20)
      df['volume_ratio'] = df['volume'] / df['volume_sma']

    # Market structure
    df['higher_high'] = (df['high'] > df['high'].shift(1)).astype(int)
    df['lower_low'] = (df['low'] < df['low'].shift(1)).astype(int)

    return df

  def _create_labels(self, data: pd.DataFrame, lookahead: int = 5) -> pd.Series:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—É–¥—É—â–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã"""
    future_returns = data['close'].shift(-lookahead) / data['close'] - 1

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
    buy_threshold = 0.01  # 1% –ø—Ä–∏–±—ã–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    sell_threshold = -0.01  # 1% —É–±—ã—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏

    labels = pd.Series(0, index=data.index)  # 0 = HOLD
    labels[future_returns > buy_threshold] = 1  # 1 = BUY
    labels[future_returns < sell_threshold] = 2  # 2 = SELL

    return labels

  async def should_retrain(self, symbol: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"""
    if symbol not in self.last_retrain:
      return True

    time_since_retrain = (datetime.datetime.now() - self.last_retrain[symbol]).total_seconds()
    return time_since_retrain > self.retrain_interval

  async def train_ensemble_model(self, symbol: str, data: pd.DataFrame):
    """–û–±—É—á–∞–µ—Ç ensemble –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    print(f"üîÑ –û–±—É—á–µ–Ω–∏–µ ensemble –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}...")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    features_df = self._prepare_features(data)
    if features_df.empty:
      print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è {symbol}")
      return

    labels = self._create_labels(features_df)

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–µ–∑ NaN
    feature_columns = features_df.select_dtypes(include=[np.number]).columns
    feature_columns = [col for col in feature_columns if col not in ['open', 'high', 'low', 'close', 'volume']]

    X = features_df[feature_columns].fillna(0)
    y = labels

    # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –Ω–µ—Ç –º–µ—Ç–æ–∫
    valid_idx = ~y.isna()
    X = X[valid_idx]
    y = y[valid_idx]

    self.models[symbol] = {
      'model': None,
      'feature_columns': ['rsi', 'macd'],  # –ü—Ä–∏–º–µ—Ä —Ñ–∏—á–µ–π
      'accuracy': 0.75  # –ü—Ä–∏–º–µ—Ä —Ç–æ—á–Ω–æ—Å—Ç–∏
    }
    self.last_retrain[symbol] = datetime.datetime.now()


    if len(X) < 100:
      print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è {symbol} (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100)")
      return



  async def generate_signals(self, symbol: str, data: pd.DataFrame) -> Optional[TradingSignal]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ensemble –º–æ–¥–µ–ª–∏"""
    try:
      # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ self.models - —Å–ª–æ–≤–∞—Ä—å
      if not isinstance(self.models, dict):
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ self.models. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback.")
        return await self._fallback_strategy(symbol, data)

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å
      if await self.should_retrain(symbol):
        await self.train_ensemble_model(symbol, data)

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
      if symbol not in self.models:
        print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        return await self._fallback_strategy(symbol, data)

      # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
      features_df = self._prepare_features(data)
      if features_df.empty:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        return await self._fallback_strategy(symbol, data)

      model_info = self.models[symbol]
      latest_features = features_df[model_info['feature_columns']].fillna(0).tail(1)

      if latest_features.empty:
        return None

      # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
      prediction_proba = None
      if model_info['model']:
        prediction_proba = model_info['model'].predict_proba(latest_features)

      if prediction_proba is None:
        return await self._fallback_strategy(symbol, data)

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å
      if await self.should_retrain(symbol):
        await self.train_ensemble_model(symbol, data)

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
      if symbol not in self.models:
        print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        return await self._fallback_strategy(symbol, data)

      model_info = self.models[symbol]
      model = model_info['model']

      # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
      latest_features = features_df[model_info['feature_columns']].fillna(0).tail(1)

      if latest_features.empty:
        return None
    except Exception as e:
      print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
      return await self._fallback_strategy(symbol, data)
      # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    try:
        prediction_proba = model.predict_proba(latest_features)
        if prediction_proba is None:
          return await self._fallback_strategy(symbol, data)

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        hold_prob, buy_prob, sell_prob = prediction_proba[0]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        max_prob = max(hold_prob, buy_prob, sell_prob)
        confidence = float(max_prob)

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence < 0.6:
          signal_type = SignalType.HOLD
        elif buy_prob == max_prob:
          signal_type = SignalType.BUY
        elif sell_prob == max_prob:
          signal_type = SignalType.SELL
        else:
          signal_type = SignalType.HOLD

        if signal_type == SignalType.HOLD:
          return None

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        current_price = float(data['close'].iloc[-1])
        current_atr = float(features_df['atr'].iloc[-1]) if not pd.isna(
          features_df['atr'].iloc[-1]) else current_price * 0.02

        # –í—ã—á–∏—Å–ª—è–µ–º Stop Loss –∏ Take Profit
        atr_multiplier = 2.0 if signal_type == SignalType.BUY else 2.0

        if signal_type == SignalType.BUY:
          stop_loss = current_price - (atr_multiplier * current_atr)
          take_profit = current_price + (3.0 * current_atr)
        else:  # SELL
          stop_loss = current_price + (atr_multiplier * current_atr)
          take_profit = current_price - (3.0 * current_atr)

        # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        signal = TradingSignal(
          signal=signal_type,
          price=current_price,
          confidence=confidence,
          stop_loss=round(stop_loss, 4),
          take_profit=round(take_profit, 4),
          strategy_name=self.strategy_name,
          timestamp=datetime.datetime.now(),
          metadata={
            'symbol': symbol,
            'model_accuracy': model_info['accuracy'],
            'atr': current_atr,
            'buy_prob': float(buy_prob),
            'sell_prob': float(sell_prob),
            'hold_prob': float(hold_prob)
          }
        )

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        self.db_manager.log_signal(signal, symbol)

        print(f"üéØ {self.strategy_name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}:")
        print(f"   –°–∏–≥–Ω–∞–ª: {signal_type.value}, –¶–µ–Ω–∞: {current_price}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}")
        print(f"   SL: {stop_loss}, TP: {take_profit}")

        return signal

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
        return await self._fallback_strategy(symbol, data)

  async def _fallback_strategy(self, symbol: str, data: pd.DataFrame) -> Optional[TradingSignal]:
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    if len(data) < 50:
      return None

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    data['rsi'] = ta.rsi(data['close'], length=14)
    data['macd'] = ta.macd(data['close'])['MACD_12_26_9']
    data['atr'] = ta.atr(data['high'], data['low'], data['close'], length=14)

    latest = data.iloc[-1]

    if pd.isna(latest['rsi']) or pd.isna(latest['atr']):
      return None

    rsi = latest['rsi']
    macd = latest['macd'] if not pd.isna(latest['macd']) else 0
    current_price = latest['close']
    current_atr = latest['atr']

    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
    signal_type = SignalType.HOLD
    confidence = 0.5

    if rsi < 25 and macd > 0:
      signal_type = SignalType.BUY
      confidence = 0.7
    elif rsi > 75 and macd < 0:
      signal_type = SignalType.SELL
      confidence = 0.7

    if signal_type == SignalType.HOLD:
      return None

    # Stop Loss –∏ Take Profit
    if signal_type == SignalType.BUY:
      stop_loss = current_price - (2 * current_atr)
      take_profit = current_price + (3 * current_atr)
    else:
      stop_loss = current_price + (2 * current_atr)
      take_profit = current_price - (3 * current_atr)

    return TradingSignal(
      signal=signal_type,
      price=current_price,
      confidence=confidence,
      stop_loss=round(stop_loss, 4),
      take_profit=round(take_profit, 4),
      strategy_name="Fallback_RSI_MACD",
      timestamp=datetime.datetime.now(),
      metadata={'symbol': symbol, 'rsi': rsi, 'macd': macd}
    )

  async def initialize_models(self, symbols: List[str]):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    print(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π EnsembleMLStrategy –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
    for symbol in symbols:
      # –ï—Å–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ —É–∂–µ –µ—Å—Ç—å –º–æ–¥–µ–ª—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if symbol in self.models:
        continue
      try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–ª–æ–Ω, –Ω–æ –ª–æ–≤–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
        model_clone = self.base_model.clone() if self.base_model else None
      except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}: {e}")
        model_clone = None

      # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
      if self.base_model:
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        self.models[symbol] = {
          'model': self.base_model.clone(),  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ clone()
          'feature_columns': self.base_model.feature_columns.copy(),
          'accuracy': self.base_model.accuracy
        }
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è {symbol} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤–æ–π)")
      else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        self.models[symbol] = {
          'model': LorentzianClassifier(k_neighbors=8),
          'feature_columns': ['close', 'volume'],
          'accuracy': 0.75
        }
        print(f"‚úÖ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {symbol}")

  async def retrain_with_feedback(self, symbol: str, results: list):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–¥–µ–ª–æ–∫"""
    try:
      print(f"üîÑ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {symbol} –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(results)} —Å–¥–µ–ª–æ–∫...")

      # –ï—Å–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –Ω–µ—Ç –º–æ–¥–µ–ª–∏, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é
      if symbol not in self.models:
        self.models[symbol] = {
          'model': None,
          'feature_columns': ['close', 'volume'],
          'accuracy': 0.75
        }

      # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–¥–µ–ª–æ–∫
      win_rate = sum(1 for r in results if r['profit_loss'] > 0) / len(results) if results else 0.5
      avg_profit = sum(r['profit_loss'] for r in results) / len(results) if results else 0

      # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      current_accuracy = self.models[symbol].get('accuracy', 0.75)
      new_accuracy = current_accuracy * 0.9 + win_rate * 0.1

      # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
      self.models[symbol]['accuracy'] = new_accuracy
      self.last_retrain[symbol] = datetime.datetime.now()

      print(f"‚úÖ –ú–æ–¥–µ–ª—å {symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: "
            f"–¢–æ—á–Ω–æ—Å—Ç—å: {current_accuracy:.2f} ‚Üí {new_accuracy:.2f}, "
            f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.4f}")

    except Exception as e:
      print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {symbol}: {e}")
