# tune_and_compare_models.py

import asyncio
import pandas as pd
import warnings

# --- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è ML ---
from sklearn.model_selection import GridSearchCV, TimeSeriesSplit
from sklearn.metrics import accuracy_score, classification_report
from lightgbm import LGBMClassifier

# --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ ---
from core.data_fetcher import DataFetcher
from core.bybit_connector import BybitConnector
from ml.feature_engineering import feature_engineer
from ml.lorentzian_classifier import LorentzianClassifier
from config import settings
from utils.logging_config import setup_logging

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
warnings.simplefilter(action='ignore', category=FutureWarning)
warnings.filterwarnings("ignore", message="pkg_resources is deprecated as an API")


async def run_analysis():
  """
  –û—Ñ—Ñ–ª–∞–π–Ω-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.
  """
  print("--- –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ---")

  # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  connector = BybitConnector()
  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Ç.–∫. –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
  data_fetcher = DataFetcher(connector, settings={})

  # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  symbol_to_analyze = "BTCUSDT"
  print(f"\n[1/4] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol_to_analyze}...")
  features, labels = await feature_engineer.create_multi_timeframe_features(symbol_to_analyze, data_fetcher)

  if features is None or labels is None:
    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –º–µ—Ç–∫–∏. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
    await connector.close()
    return

  print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã. –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏: {len(features)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π.")

  # 3. –ü–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è LorentzianClassifier
  print("\n[2/4] –ü–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è LorentzianClassifier... (–ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)")

  param_grid = {
    'k_neighbors': [4, 8, 12, 16]  # –°–µ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π k, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
  }
  time_series_cv = TimeSeriesSplit(n_splits=5)

  # n_jobs=-1 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ —è–¥—Ä–∞ CPU
  grid_search = GridSearchCV(LorentzianClassifier(), param_grid, cv=time_series_cv, scoring='accuracy', n_jobs=-1)
  grid_search.fit(features, labels)

  best_params = grid_search.best_params_
  best_score_lc = grid_search.best_score_
  print(f"‚úÖ –ü–æ–¥–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}, –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {best_score_lc:.4f}")

  # 4. –û–±—É—á–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞ LightGBM –Ω–∞ —Ç–µ—Ö –∂–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  print("\n[3/4] –û–±—É—á–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞ LightGBM...")

  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ TimeSeriesSplit, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É
  train_index, test_index = list(time_series_cv.split(features))[-1]
  X_train, X_test = features.iloc[train_index], features.iloc[test_index]
  y_train, y_test = labels.iloc[train_index], labels.iloc[test_index]

  lgbm_model = LGBMClassifier(objective='multiclass', random_state=42)
  lgbm_model.fit(X_train, y_train)
  lgbm_predictions = lgbm_model.predict(X_test)
  accuracy_lgbm = accuracy_score(y_test, lgbm_predictions)
  print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ LightGBM –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: {accuracy_lgbm:.4f}")

  # 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  print("\n--- [4/4] –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ---")
  print("=" * 30)
  print(f"Lorentzian Classifier (best params: {best_params}): {best_score_lc:.4f}")
  print(f"LightGBM Classifier:                            {accuracy_lgbm:.4f}")
  print("=" * 30)

  if accuracy_lgbm > best_score_lc:
    print("\nüèÜ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: LightGBM –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
  else:
    print("\nüèÜ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –í–∞—à Lorentzian Classifier —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")

  await connector.close()


if __name__ == "__main__":
  setup_logging("WARNING")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å WARNING, —á—Ç–æ–±—ã –Ω–µ –≤–∏–¥–µ—Ç—å –ª–∏—à–Ω–∏–µ INFO –ª–æ–≥–∏
  asyncio.run(run_analysis())