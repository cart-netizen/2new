# –§–ò–ù–ê–õ–¨–ù–´–ô –ü–ê–¢–ß –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø SAR –°–¢–†–ê–¢–ï–ì–ò–ò

# 1. –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: test_sar_strategy.py

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import sys
import os

from strategies.sar_strategy import StopAndReverseStrategy

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


from config.config_manager import ConfigManager
from utils.logging_config import get_logger

logger = get_logger(__name__)


class SARTester:
  def __init__(self):
    self.config_manager = ConfigManager()
    # self.config = self.config_manager.load_config()
    self.test_config = {
      "stop_and_reverse_strategy": {
        "enabled": True,
        "chop_threshold": 40,
        "adx_threshold": 25,
        "atr_multiplier": 1.25,
        "psar_start": 0.02,
        "psar_step": 0.02,
        "psar_max": 0.2,
        "min_signal_score": 4,
        "min_daily_volume_usd": 1000000,
        "rsi_period": 14,
        "rsi_overbought": 70,
        "rsi_oversold": 30,
        "macd_fast": 12,
        "macd_slow": 26,
        "macd_signal": 9,
        "mfi_period": 14,
        "mfi_overbought": 80,
        "mfi_oversold": 20,
        "aroon_period": 25,
        "ema_short": 50,
        "ema_long": 200,
        "hma_fast_period": 14,
        "hma_slow_period": 28,
        "hma_rsi_period": 14,
        "hma_adx_threshold": 20,
        "ichimoku_conversion": 9,
        "ichimoku_base": 26,
        "ichimoku_span_b": 52,
        "ichimoku_displacement": 26,
        "use_shadow_system": True,
        "use_ml_confirmation": False
      }
    }
  def generate_test_data(self, symbol: str = "BTCUSDT", bars: int = 500) -> pd.DataFrame:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)

    dates = pd.date_range(start=datetime.now() - timedelta(hours=bars),
                          periods=bars, freq='15min')

    # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —Å —Ç—Ä–µ–Ω–¥–æ–º
    base_price = 45000
    trend = np.linspace(0, 2000, bars)  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    noise = np.random.normal(0, 200, bars).cumsum()

    close_prices = base_price + trend + noise

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLC –Ω–∞ –æ—Å–Ω–æ–≤–µ close
    data = []
    for i, close in enumerate(close_prices):
      volatility = abs(np.random.normal(0, 100))

      open_price = close + np.random.normal(0, 50)
      high = max(open_price, close) + abs(np.random.normal(0, volatility / 2))
      low = min(open_price, close) - abs(np.random.normal(0, volatility / 2))
      volume = abs(np.random.normal(1000, 300))

      data.append({
        'timestamp': dates[i],
        'open': open_price,
        'high': high,
        'low': low,
        'close': close,
        'volume': volume
      })

    df = pd.DataFrame(data)
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df)} –±–∞—Ä–æ–≤ –¥–ª—è {symbol}")
    return df

  async def test_regime_filters(self, strategy: StopAndReverseStrategy, data: pd.DataFrame):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–µ–∂–∏–º–æ–≤...")

    try:
      can_trade, reason = await strategy.should_trade_symbol("TESTUSDT", data)

      logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤: {can_trade}")
      logger.info(f"üìã –ü—Ä–∏—á–∏–Ω–∞: {reason}")

      # –¢–µ—Å—Ç–∏—Ä—É–µ–º Choppiness Index
      chop = strategy._calculate_choppiness_index(data, 14)
      logger.info(f"üìä Choppiness Index: {chop:.2f}")

      return can_trade

    except Exception as e:
      logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
      return False

  async def test_signal_components(self, strategy: StopAndReverseStrategy, data: pd.DataFrame):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏–≥–Ω–∞–ª–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–∞...")

    try:
      components = await strategy._analyze_signal_components("TESTUSDT", data)

      logger.info(f"üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏–≥–Ω–∞–ª–∞:")
      logger.info(f"  - PSAR —Ç—Ä–∏–≥–≥–µ—Ä: {components.psar_trigger}")
      logger.info(f"  - RSI –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: {components.rsi_divergence}")
      logger.info(f"  - MACD –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: {components.macd_divergence}")
      logger.info(f"  - RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞: {components.rsi_extreme_zone}")
      logger.info(f"  - MFI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞: {components.mfi_extreme_zone}")
      logger.info(f"  - Aroon –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {components.aroon_confirmation}")
      logger.info(f"  - Aroon Oscillator: {components.aroon_oscillator_signal}")
      logger.info(f"  - Ichimoku –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {components.ichimoku_confirmation}")
      logger.info(f"  - –û–±—â–∏–π –±–∞–ª–ª: {components.total_score}")

      return components

    except Exception as e:
      logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
      return None

  async def test_full_signal_generation(self, strategy: StopAndReverseStrategy, data: pd.DataFrame):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞...")

    try:
      signal = await strategy.generate_signal("TESTUSDT", data)

      if signal:
        logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"  - –¢–∏–ø: {signal.signal_type.value}")
        logger.info(f"  - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.3f}")
        logger.info(f"  - –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal.entry_price:.2f}")
        logger.info(f"  - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {signal.metadata}")
      else:
        logger.info("‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)")

      return signal

    except Exception as e:
      logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
      return None

  async def run_comprehensive_test(self):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

    try:
      # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
      strategy = StopAndReverseStrategy(self.test_config)
      logger.info("‚úÖ SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

      # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      test_data = self.generate_test_data()

      # –¢–µ—Å—Ç 1: –§–∏–ª—å—Ç—Ä—ã —Ä–µ–∂–∏–º–æ–≤
      await self.test_regime_filters(strategy, test_data)

      # –¢–µ—Å—Ç 2: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏–≥–Ω–∞–ª–∞
      await self.test_signal_components(strategy, test_data)

      # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
      await self.test_full_signal_generation(strategy, test_data)

      # –¢–µ—Å—Ç 4: –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
      status = strategy.get_strategy_status()
      logger.info(f"üìã –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {status}")

      logger.info("üéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
      return True

    except Exception as e:
      logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
      return False


async def main():
  """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
  tester = SARTester()
  success = await tester.run_comprehensive_test()

  if success:
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")
  else:
    print("\n‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫.")
    sys.exit(1)


if __name__ == "__main__":
  asyncio.run(main())

# 2. –°–ö–†–ò–ü–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò: validate_sar_config.py

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import json
import os
from typing import Dict, Any, List


def validate_sar_config(config_path: str = "config.json") -> bool:
  """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

  print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")

  try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(config_path):
      print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
      return False

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open(config_path, 'r', encoding='utf-8') as f:
      config = json.load(f)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ SAR
    if 'stop_and_reverse_strategy' not in config:
      print("‚ùå –°–µ–∫—Ü–∏—è 'stop_and_reverse_strategy' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
      return False

    sar_config = config['stop_and_reverse_strategy']

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    required_params = [
      'enabled', 'chop_threshold', 'adx_threshold', 'atr_multiplier',
      'psar_start', 'psar_step', 'psar_max', 'min_signal_score',
      'min_daily_volume_usd'
    ]

    missing_params = []
    for param in required_params:
      if param not in sar_config:
        missing_params.append(param)

    if missing_params:
      print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_params}")
      return False

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π
    validations = [
      ('chop_threshold', 20, 60, "Choppiness –ø–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 20 –∏ 60"),
      ('adx_threshold', 15, 35, "ADX –ø–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 15 –∏ 35"),
      ('atr_multiplier', 1.0, 2.0, "ATR –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1.0 –∏ 2.0"),
      ('psar_start', 0.01, 0.05, "PSAR —Å—Ç–∞—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0.01 –∏ 0.05"),
      ('psar_step', 0.01, 0.05, "PSAR —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0.01 –∏ 0.05"),
      ('psar_max', 0.1, 0.3, "PSAR –º–∞–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0.1 –∏ 0.3"),
      ('min_signal_score', 2, 8, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 2 –∏ 8"),
      ('min_daily_volume_usd', 100000, 10000000, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 100k –∏ 10M")
    ]

    validation_errors = []
    for param, min_val, max_val, message in validations:
      value = sar_config.get(param)
      if value is not None and not (min_val <= value <= max_val):
        validation_errors.append(f"{param}: {message} (—Ç–µ–∫—É—â–µ–µ: {value})")

    if validation_errors:
      print("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
      for error in validation_errors:
        print(f"  - {error}")
      return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
    if sar_config['psar_start'] >= sar_config['psar_max']:
      print("‚ùå PSAR start –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ PSAR max")
      return False

    if sar_config['psar_step'] >= sar_config['psar_max']:
      print("‚ùå PSAR step –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ PSAR max")
      return False

    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é!")
    print(f"üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"  - –í–∫–ª—é—á–µ–Ω–∞: {sar_config['enabled']}")
    print(f"  - CHOP –ø–æ—Ä–æ–≥: {sar_config['chop_threshold']}")
    print(f"  - ADX –ø–æ—Ä–æ–≥: {sar_config['adx_threshold']}")
    print(f"  - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {sar_config['min_signal_score']}")
    print(f"  - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: {sar_config['min_daily_volume_usd']:,} USD")

    return True

  except json.JSONDecodeError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    return False
  except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    return False


def create_sample_config():
  """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SAR"""
  sample_config = {
    "stop_and_reverse_strategy": {
      "enabled": True,
      "chop_threshold": 40,
      "adx_threshold": 25,
      "atr_multiplier": 1.25,
      "psar_start": 0.02,
      "psar_step": 0.02,
      "psar_max": 0.2,
      "min_signal_score": 4,
      "min_daily_volume_usd": 1000000
    }
  }

  with open("sar_config_sample.json", "w", encoding="utf-8") as f:
    json.dump(sample_config, f, indent=2, ensure_ascii=False)

  print("üìù –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: sar_config_sample.json")


if __name__ == "__main__":
  import sys

  if len(sys.argv) > 1 and sys.argv[1] == "--create-sample":
    create_sample_config()
  else:
    success = validate_sar_config()
    if not success:
      sys.exit(1)

# 3. –°–ö–†–ò–ü–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê SAR: monitor_sar.py

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import time
from datetime import datetime
from data.state_manager import StateManager
from utils.logging_config import get_logger

logger = get_logger(__name__)


class SARMonitor:
  def __init__(self):
    self.state_manager = StateManager()
    self.last_status = None

  def display_sar_status(self, status: dict):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("\n" + "=" * 60)
    print(f"üéØ SAR STRATEGY STATUS - {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 60)

    if not status:
      print("‚ùå –°—Ç–∞—Ç—É—Å SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
      return

    print(f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {status.get('monitored_symbols_count', 0)}")
    print(f"üíº –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {status.get('current_positions_count', 0)}")

    last_update = status.get('last_symbol_update')
    if last_update:
      try:
        last_update_dt = datetime.fromisoformat(last_update)
        time_diff = datetime.now() - last_update_dt
        print(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {time_diff.seconds // 60} –º–∏–Ω –Ω–∞–∑–∞–¥")
      except:
        print(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = status.get('config', {})
    print(f"\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {config.get('min_signal_score', 'N/A')}")
    print(f"  - CHOP –ø–æ—Ä–æ–≥: {config.get('chop_threshold', 'N/A')}")
    print(f"  - ADX –ø–æ—Ä–æ–≥: {config.get('adx_threshold', 'N/A')}")
    print(f"  - Shadow System: {'‚úÖ' if config.get('use_shadow_system') else '‚ùå'}")
    print(f"  - ML –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {'‚úÖ' if config.get('use_ml_confirmation') else '‚ùå'}")

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    monitored_symbols = status.get('monitored_symbols', [])
    if monitored_symbols:
      print(f"\nüìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã ({len(monitored_symbols)}):")
      for i, symbol in enumerate(monitored_symbols[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        print(f"  {i + 1:2d}. {symbol}")
      if len(monitored_symbols) > 10:
        print(f"     ... –∏ –µ—â–µ {len(monitored_symbols) - 10}")

    # –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    current_positions = status.get('current_positions', [])
    if current_positions:
      print(f"\nüíº –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ SAR ({len(current_positions)}):")
      for position in current_positions:
        print(f"  üîπ {position}")

  def detect_changes(self, current_status: dict):
    """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ"""
    if not self.last_status:
      self.last_status = current_status
      return

    changes = []

    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–æ–≤
    old_count = self.last_status.get('monitored_symbols_count', 0)
    new_count = current_status.get('monitored_symbols_count', 0)
    if old_count != new_count:
      changes.append(f"–°–∏–º–≤–æ–ª—ã: {old_count} ‚Üí {new_count}")

    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–∑–∏—Ü–∏—è—Ö
    old_positions = self.last_status.get('current_positions_count', 0)
    new_positions = current_status.get('current_positions_count', 0)
    if old_positions != new_positions:
      changes.append(f"–ü–æ–∑–∏—Ü–∏–∏: {old_positions} ‚Üí {new_positions}")

    # –ù–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    old_symbols = set(self.last_status.get('monitored_symbols', []))
    new_symbols = set(current_status.get('monitored_symbols', []))
    added_symbols = new_symbols - old_symbols
    removed_symbols = old_symbols - new_symbols

    if added_symbols:
      changes.append(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã: {', '.join(list(added_symbols)[:3])}")
    if removed_symbols:
      changes.append(f"–£–¥–∞–ª–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã: {', '.join(list(removed_symbols)[:3])}")

    if changes:
      print(f"\nüîÑ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–´:")
      for change in changes:
        print(f"  - {change}")

    self.last_status = current_status

  async def run_monitoring(self, interval: int = 30):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}s)")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")

    try:
      while True:
        try:
          # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
          sar_status = self.state_manager.get_custom_data('sar_strategy_status')

          # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å
          self.display_sar_status(sar_status)

          # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          if sar_status:
            self.detect_changes(sar_status)

          # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          await asyncio.sleep(interval)

        except KeyboardInterrupt:
          break
        except Exception as e:
          logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
          await asyncio.sleep(5)

    except KeyboardInterrupt:
      print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")


async def main():
  """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
  import sys

  interval = 30
  if len(sys.argv) > 1:
    try:
      interval = int(sys.argv[1])
    except ValueError:
      print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 30 —Å–µ–∫—É–Ω–¥.")

  monitor = SARMonitor()
  await monitor.run_monitoring(interval)


if __name__ == "__main__":
  asyncio.run(main())

# 4. –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£

"""
–ü–û–®–ê–ì–û–í–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ò –ó–ê–ü–£–°–ö–£ SAR –°–¢–†–ê–¢–ï–ì–ò–ò

1. –ü–û–î–ì–û–¢–û–í–ö–ê –§–ê–ô–õ–û–í:
   - –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å strategies/stop_and_reverse_strategy.py –≤ –ø–∞–ø–∫—É strategies/
   - –û–±–Ω–æ–≤–∏—Ç—å config.json –¥–æ–±–∞–≤–∏–≤ —Å–µ–∫—Ü–∏—é stop_and_reverse_strategy
   - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ç—á–∏ –∏–∑ integration_patches.py

2. –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:
   python validate_sar_config.py

3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò:
   python test_sar_strategy.py

4. –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–ê–¢–ß–ï–ô:
   - –û–±–Ω–æ–≤–∏—Ç—å core/integrated_system.py —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ç—á–∞–º
   - –û–±–Ω–æ–≤–∏—Ç—å core/adaptive_strategy_selector.py
   - –û–±–Ω–æ–≤–∏—Ç—å core/market_regime_detector.py
   - –û–±–Ω–æ–≤–∏—Ç—å dashboard.py

5. –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´:
   python main.py

6. –ú–û–ù–ò–¢–û–†–ò–ù–ì SAR:
   python monitor_sar.py [–∏–Ω—Ç–µ—Ä–≤–∞–ª_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö]

7. –ü–†–û–í–ï–†–ö–ê –í –î–ê–®–ë–û–†–î–ï:
   - –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥: streamlit run dashboard.py
   - –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏"
   - –í–∫–ª—é—á–∏—Ç—å "Stop_and_Reverse"
   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–µ–∫—Ü–∏–∏ SAR Settings

–í–ê–ñ–ù–´–ï –ü–†–û–í–ï–†–ö–ò –ü–û–°–õ–ï –ó–ê–ü–£–°–ö–ê:

‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ª–æ–≥–∞—Ö
‚úÖ –°–∏–º–≤–æ–ª—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å
‚úÖ –°–∏–≥–Ω–∞–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —É—Å–ª–æ–≤–∏—è–º
‚úÖ Shadow Trading –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞
‚úÖ –î–∞—à–±–æ—Ä–¥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å

–£–°–¢–†–ê–ù–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú:

‚ùå "SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞":
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é config.json
   - –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ enabled: true
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞

‚ùå "–°–∏–º–≤–æ–ª—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è":
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ data_fetcher
   - –£–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –±–∏—Ä–∂–∏
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤

‚ùå "–°–∏–≥–Ω–∞–ª—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è":
   - –°–Ω–∏–∑–∏—Ç—å min_signal_score –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã —Ä–µ–∂–∏–º–æ–≤ (CHOP, ADX, ATR)
   - –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–∏–º–≤–æ–ª—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ

‚ùå "–û—à–∏–±–∫–∏ –≤ Shadow Trading":
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é shadow_trading_manager
   - –£–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î

–ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:

üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 10-50)
   - –ß–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (1-5 –≤ –¥–µ–Ω—å)
   - Win Rate SAR —Å–∏–≥–Ω–∞–ª–æ–≤ (—Ü–µ–ª–µ–≤–æ–π: >55%)
   - –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–∏–≥–Ω–∞–ª
   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (<100ms)

üìà –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
   - –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: —É–≤–µ–ª–∏—á–∏—Ç—å min_signal_score
   - –ï—Å–ª–∏ –º–∞–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤: —Å–Ω–∏–∑–∏—Ç—å chop_threshold –∏–ª–∏ adx_threshold
   - –ï—Å–ª–∏ –Ω–∏–∑–∫–∏–π Win Rate: –ø–æ–≤—ã—Å–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º
   - –ï—Å–ª–∏ —É–ø—É—â–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã: —Å–Ω–∏–∑–∏—Ç—å atr_multiplier

üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞:
   - min_signal_score: 4
   - chop_threshold: 45 (—Å—Ç—Ä–æ–∂–µ)
   - adx_threshold: 22 (–º—è–≥—á–µ)
   - atr_multiplier: 1.2
   - use_shadow_system: true
   - use_ml_confirmation: false (–¥–æ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏)

–ü–æ—Å–ª–µ 1-2 –Ω–µ–¥–µ–ª—å —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
–ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ —Å—Ç–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏.
"""

# 5. –°–ö–†–ò–ü–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –£–°–¢–ê–ù–û–í–ö–ò: install_sar.py

"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import os
import json
import shutil
from pathlib import Path


def install_sar_strategy():
  """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""

  print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Stop-and-Reverse —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")

  try:
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    required_dirs = ['strategies', 'config', 'core']
    for dir_name in required_dirs:
      if not os.path.exists(dir_name):
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–ø–∫–∞: {dir_name}")
        return False

    # 2. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    strategy_file = "strategies/stop_and_reverse_strategy.py"
    if not os.path.exists(strategy_file):
      print(f"‚ö†Ô∏è –§–∞–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {strategy_file}")
      print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞")

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º config.json
    config_file = "config.json"
    if os.path.exists(config_file):
      with open(config_file, 'r', encoding='utf-8') as f:
        config = json.load(f)

      if 'stop_and_reverse_strategy' not in config:
        print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SAR –≤ config.json...")

        config['stop_and_reverse_strategy'] = {
          "enabled": True,
          "chop_threshold": 40,
          "adx_threshold": 25,
          "atr_multiplier": 1.25,
          "psar_start": 0.02,
          "psar_step": 0.02,
          "psar_max": 0.2,
          "min_signal_score": 4,
          "min_daily_volume_usd": 1000000,
          "use_shadow_system": True,
          "use_ml_confirmation": False
        }

        with open(config_file, 'w', encoding='utf-8') as f:
          json.dump(config, f, indent=2, ensure_ascii=False)

        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SAR –¥–æ–±–∞–≤–ª–µ–Ω–∞")
      else:
        print("‚ÑπÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SAR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # 4. –°–æ–∑–¥–∞–µ–º backup
    backup_dir = "backup_before_sar"
    if not os.path.exists(backup_dir):
      os.makedirs(backup_dir)
      print(f"üì¶ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è backup: {backup_dir}")

    # 5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    print("\nüìã –¢–†–ï–ë–£–ï–ú–´–ï –†–£–ß–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
    print("1. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á–∏ –∏–∑ integration_patches.py –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞–π–ª–∞–º:")
    print("   - core/integrated_system.py")
    print("   - core/adaptive_strategy_selector.py")
    print("   - core/market_regime_detector.py")
    print("   - dashboard.py")
    print("\n2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é: python validate_sar_config.py")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: python test_sar_strategy.py")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: python main.py")

    print("\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞!")
    return True

  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    return False


if __name__ == "__main__":
  success = install_sar_strategy()
  if not success:
    exit(1)

# 6. –§–ò–ù–ê–õ–¨–ù–´–ô CHECKLIST

"""
üéØ –§–ò–ù–ê–õ–¨–ù–´–ô CHECKLIST –î–õ–Ø –ó–ê–ü–£–°–ö–ê SAR –°–¢–†–ê–¢–ï–ì–ò–ò

–ü–û–î–ì–û–¢–û–í–ö–ê:
‚ñ° –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª strategies/stop_and_reverse_strategy.py
‚ñ° –û–±–Ω–æ–≤–ª–µ–Ω config.json —Å —Å–µ–∫—Ü–∏–µ–π stop_and_reverse_strategy
‚ñ° –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –≤—Å–µ –ø–∞—Ç—á–∏ –∏–∑ integration_patches.py

–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
‚ñ° python validate_sar_config.py - —É—Å–ø–µ—à–Ω–æ
‚ñ° python test_sar_strategy.py - —É—Å–ø–µ—à–Ω–æ  
‚ñ° –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (pandas_ta, numpy, etc.)

–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:
‚ñ° –û–±–Ω–æ–≤–ª–µ–Ω core/integrated_system.py
‚ñ° –û–±–Ω–æ–≤–ª–µ–Ω core/adaptive_strategy_selector.py
‚ñ° –û–±–Ω–æ–≤–ª–µ–Ω core/market_regime_detector.py
‚ñ° –û–±–Ω–æ–≤–ª–µ–Ω dashboard.py —Å –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–æ–π

–ó–ê–ü–£–°–ö:
‚ñ° python main.py –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
‚ñ° –í –ª–æ–≥–∞—Ö –µ—Å—Ç—å "Stop-and-Reverse —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞"
‚ñ° streamlit run dashboard.py —Ä–∞–±–æ—Ç–∞–µ—Ç
‚ñ° –í –¥–∞—à–±–æ—Ä–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ SAR Settings

–ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´:
‚ñ° python monitor_sar.py –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å
‚ñ° –°–∏–º–≤–æ–ª—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å
‚ñ° Shadow Trading –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞
‚ñ° ML –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é

PRODUCTION READY:
‚ñ° –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
‚ñ° –í–∫–ª—é—á–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚ñ° –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚ñ° –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö

üöÄ –ì–û–¢–û–í–û –ö –ó–ê–ü–£–°–ö–£ –í –ü–†–û–î–ê–ö–®–ù!
"""