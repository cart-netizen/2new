import asyncio
import os
import signal  # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
import sys
from datetime import datetime

import aiohttp

from utils.logging_config import setup_logging, get_logger, setup_signal_logger
from config import settings
from core.integrated_system import IntegratedTradingSystem

import warnings
# –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.
# –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è (–≤–¥—Ä—É–≥ –µ–≥–æ —Ç–æ–∂–µ —É–¥–∞–ª—è—Ç), –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–π DeprecationWarning.
try:
    from pkg_resources import PkgResourcesDeprecationWarning
    warnings.filterwarnings("ignore", category=PkgResourcesDeprecationWarning)
except ImportError:
    warnings.filterwarnings("ignore", category=DeprecationWarning)
# --- –ë–õ–û–ö –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô ---
# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É—Å—Ç–∞—Ä–µ–≤—à–µ–º pkg_resources –æ—Ç pandas_ta
# –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ UserWarning, –∞ –Ω–µ DeprecationWarning
warnings.filterwarnings("ignore", message="pkg_resources is deprecated as an API")
# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê --

async def generate_shadow_trading_reports(trading_system):
  """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–æ–≤ Shadow Trading"""

  if not trading_system.shadow_trading:
    return

  try:
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
    daily_report = await trading_system.shadow_trading.generate_daily_report()

    if 'error' not in daily_report:
      logger.info("üìä === –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ SHADOW TRADING ===")

      overall = daily_report.get('overall_performance', {})
      if overall:
        logger.info(f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å: {overall.get('total_signals', 0)}")
        logger.info(f"‚úÖ Win Rate: {overall.get('win_rate_pct', 0)}%")
        logger.info(f"üí∞ –û–±—â–∏–π P&L: {overall.get('total_pnl_pct', 0):+.2f}%")
        logger.info(f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: +{overall.get('avg_win_pct', 0)}%")
        logger.info(f"üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {overall.get('avg_loss_pct', 0)}%")
        logger.info(f"‚öñÔ∏è Profit Factor: {overall.get('profit_factor', 0)}")
        logger.info(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {overall.get('filtered_signals', 0)}")

      # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏
      sources = daily_report.get('performance_by_source', [])
      if sources:
        logger.info("üèÜ –õ—É—á—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for source in sources[:3]:
          logger.info(f"  ‚Ä¢ {source['source']}: WR {source['win_rate_pct']}% "
                      f"({source['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤, P&L: {source['total_pnl_pct']:+.1f}%)")

      # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      recommendations = await trading_system.shadow_trading.performance_analyzer.generate_optimization_recommendations(
        1)
      if 'error' not in recommendations:
        high_priority_recs = [r for r in recommendations.get('recommendations', []) if r['priority'] == 'high']
        if high_priority_recs:
          logger.info("üî¥ –í–ê–ñ–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
          for rec in high_priority_recs[:2]:  # –¢–æ–ø 2
            logger.info(f"  ‚Ä¢ {rec['message']}")
            logger.info(f"    üí° {rec['suggested_action']}")

      logger.info("=" * 50)

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ Shadow Trading: {e}")

logger = get_logger(__name__)


async def test_api_connectivity():
  """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∏ —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"""
  try:
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API...")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π connector –¥–ª—è —Ç–µ—Å—Ç–∞
    from core.bybit_connector import BybitConnector
    test_connector = BybitConnector()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
    server_time_url = test_connector.base_url + "/v5/market/time"
    async with aiohttp.ClientSession() as session:
      async with session.get(server_time_url) as response:
        if response.status == 200:
          data = await response.json()
          server_timestamp = int(data['result']['timeNano']) // 1_000_000
          server_time = datetime.fromtimestamp(server_timestamp / 1000)
          logger.info(f"‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ Bybit: {server_time}")
        else:
          logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {response.status}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è BTCUSDT
    test_candles = await test_connector.get_kline("BTCUSDT", "60", limit=5)
    if test_candles:
      last_candle_timestamp = int(test_candles[0][0])
      last_candle_time = datetime.fromtimestamp(last_candle_timestamp / 1000)
      current_time = datetime.now()
      age_hours = (current_time - last_candle_time).total_seconds() / 3600

      logger.info(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ BTCUSDT: {last_candle_time}")
      logger.info(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö: {age_hours:.1f} —á–∞—Å–æ–≤")

      if age_hours > 2:
        logger.error(f"üö® API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ! –í–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f} —á–∞—Å–æ–≤")
      else:
        logger.info("‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ")
    else:
      logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")

    await test_connector.close()

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
#
# async def main():
#   setup_logging(settings.LOG_LEVEL)
#   setup_signal_logger()
#   logger.info("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏...")
#
#   trading_system = IntegratedTradingSystem()
#   await test_api_connectivity()
#   # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#   # loop = asyncio.get_event_loop()
#   stop_event = asyncio.Event()
#
#   if not os.path.exists("ml_models/anomaly_detector.pkl"):
#     logger.info("–û–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π...")
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
#     await trading_system.connector.sync_time()
#     symbols = await trading_system.data_fetcher.get_active_symbols_by_volume(200)
#     if symbols:
#       await trading_system.train_anomaly_detector(symbols[:100], lookback_days=60)
#
#   if not os.path.exists("ml_models/enhanced_model.pkl"):
#     logger.info("–û–±—É—á–µ–Ω–∏–µ Enhanced ML –º–æ–¥–µ–ª–∏...")
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
#     await trading_system.connector.sync_time()
#     symbols = await trading_system.data_fetcher.get_active_symbols_by_volume(200)
#     if symbols:
#       await trading_system.train_enhanced_ml_model(symbols[:150], lookback_days=60)
#
#     # ============================ –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ============================
#     logger.info("----------- –ù–ê–ß–ê–õ–û –≠–¢–ê–ü–ê –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ò –î–õ–Ø LORENTZIAN –ú–û–î–ï–õ–ï–ô -----------")
#
#     # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ Lorentzian —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤–Ω—É—Ç—Ä–∏ trading_system
#     lorentzian_strategy = trading_system.strategy_manager.strategies.get("Lorentzian_Classification")
#
#     if lorentzian_strategy:
#       # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –µ—Å–ª–∏ –Ω–µ—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
#       if not trading_system.active_symbols:
#         await trading_system.initialize_symbols_if_empty()
#
#       symbols_for_lorentzian = trading_system.active_symbols
#
#       if symbols_for_lorentzian:
#         logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {len(symbols_for_lorentzian)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Lorentzian —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
#         # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
#         await lorentzian_strategy.preload_multiple_symbols(
#           symbols_for_lorentzian,
#           max_concurrent=1  # –î–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏
#         )
#         logger.info("----------- –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ò –û–ë–£–ß–ï–ù–ò–ï LORENTZIAN –ú–û–î–ï–õ–ï–ô –ó–ê–í–ï–†–®–ï–ù–´ -----------")
#       else:
#         logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ Lorentzian –º–æ–¥–µ–ª–µ–π.")
#     else:
#       logger.warning("Lorentzian —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
#     # ============================= –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò =============================
#
#   def signal_handler():
#     logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
#     stop_event.set()
#
#   if sys.platform != 'win32':
#     loop = asyncio.get_running_loop()
#     for sig in (signal.SIGINT, signal.SIGTERM):
#       loop.add_signal_handler(sig, signal_handler)
#   else:
#     # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
#     signal.signal(signal.SIGINT, lambda s, f: signal_handler())
#
#   try:
#     # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
#     await trading_system.start_optimized()  # –í–º–µ—Å—Ç–æ start()
#
#     # –ù–û–í–û–ï: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ Shadow Trading
#     async def periodic_shadow_reports():
#       while not stop_event.is_set():
#         try:
#           await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
#           await generate_shadow_trading_reports(trading_system)
#         except Exception as e:
#           logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
#
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—á–µ—Ç—ã –≤ —Ñ–æ–Ω–µ
#     asyncio.create_task(periodic_shadow_reports())
#
#     # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#     report_counter = 0
#     while not stop_event.is_set() and trading_system.is_running:
#       # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö (_monitoring_loop_optimized –∏ _fast_position_monitoring_loop)
#       # –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
#
#       if report_counter % 5 == 0:  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
#         trading_system.display_balance()
#         trading_system.display_active_symbols()
#
#       # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
#       if hasattr(trading_system, '_monitoring_cycles') and trading_system._monitoring_cycles % 10 == 0:
#         await trading_system._log_performance_stats()
#
#       # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç Shadow Trading
#       if report_counter % 30 == 0:  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
#         try:
#           await generate_shadow_trading_reports(trading_system)
#         except Exception as e:
#           logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
#
#       report_counter += 1
#
#       # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
#       try:
#         await asyncio.wait_for(stop_event.wait(), timeout=60)
#       except asyncio.TimeoutError:
#         continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
#
#   except asyncio.CancelledError:
#     logger.info("–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
#   except Exception as e:
#     logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
#   finally:
#     logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
#     if trading_system.is_running:
#       await trading_system.stop()
#     logger.info("–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
# –§–∞–π–ª: main.py

async def main():
  setup_logging(settings.LOG_LEVEL)
  setup_signal_logger()
  logger.info("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏...")

  # --- –≠–¢–ê–ü 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
  trading_system = IntegratedTradingSystem()
  await test_api_connectivity()

  # --- –≠–¢–ê–ü 2: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –ü–ï–†–ï–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π ---
  logger.info("----------- –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –°–ò–ú–í–û–õ–û–í -----------")

  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–∞–ø—Ä—è–º—É—é
  await trading_system.connector.sync_time()

  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  try:
    symbols = await trading_system.data_fetcher.get_active_symbols_by_volume(limit=200)
    if symbols:
      blacklist = trading_system.config.get('general_settings', {}).get('symbol_blacklist', [])
      trading_system.active_symbols = [s for s in symbols if s not in blacklist]
      trading_system.watchlist_symbols = trading_system.active_symbols.copy()
      logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(trading_system.active_symbols)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    else:
      logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
      return
  except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
    return

  # --- –≠–¢–ê–ü 3: –¢–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–∏–º–≤–æ–ª–æ–≤ ---
  logger.info("----------- –ù–ê–ß–ê–õ–û –≠–¢–ê–ü–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –°–ò–ú–í–û–õ–û–í -----------")
  await trading_system.initialize()
  logger.info("----------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–ú–í–û–õ–û–í –ó–ê–í–ï–†–®–ï–ù–ê -----------")

  # --- –≠–¢–ê–ü 4: –û–±—É—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ---
  if not os.path.exists("ml_models/anomaly_detector.pkl"):
    logger.info("–û–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π...")
    symbols = await trading_system.data_fetcher.get_active_symbols_by_volume(200)
    if symbols:
      await trading_system.train_anomaly_detector(symbols[:100], lookback_days=60)

  if not os.path.exists("ml_models/enhanced_model.pkl"):
    logger.info("–û–±—É—á–µ–Ω–∏–µ Enhanced ML –º–æ–¥–µ–ª–∏...")
    symbols = await trading_system.data_fetcher.get_active_symbols_by_volume(200)
    if symbols:
      await trading_system.train_enhanced_ml_model(symbols[:150], lookback_days=60)

  # --- –≠–¢–ê–ü 5: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ Lorentzian –º–æ–¥–µ–ª–µ–π ---
  logger.info("----------- –ù–ê–ß–ê–õ–û –≠–¢–ê–ü–ê –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ò –î–õ–Ø LORENTZIAN –ú–û–î–ï–õ–ï–ô -----------")

  lorentzian_strategy = trading_system.strategy_manager.strategies.get("Lorentzian_Classification")

  if lorentzian_strategy:
    symbols_for_lorentzian = trading_system.active_symbols

    if symbols_for_lorentzian:
      logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {len(symbols_for_lorentzian)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Lorentzian —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
      await lorentzian_strategy.preload_multiple_symbols(
        symbols_for_lorentzian,
        max_concurrent=2  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
      )
      logger.info("----------- –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ò –û–ë–£–ß–ï–ù–ò–ï LORENTZIAN –ú–û–î–ï–õ–ï–ô –ó–ê–í–ï–†–®–ï–ù–´ -----------")
    else:
      logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ Lorentzian –º–æ–¥–µ–ª–µ–π.")
  else:
    logger.warning("Lorentzian —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

  # --- –≠–¢–ê–ü 6: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ ---
  stop_event = asyncio.Event()

  def signal_handler():
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    stop_event.set()

  if sys.platform != 'win32':
    loop = asyncio.get_running_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
      loop.add_signal_handler(sig, signal_handler)
  else:
    signal.signal(signal.SIGINT, lambda s, f: signal_handler())

  try:
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –≤—ã–∑—ã–≤–∞–µ–º start_optimized(), —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–Ω–æ–≤–∞ –≤—ã–∑—ã–≤–∞–µ—Ç initialize()
    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
    leverage = trading_system.config.get('trade_settings', {}).get('leverage', 10)
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ {leverage} –¥–ª—è {len(trading_system.active_symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
    await trading_system._set_leverage_for_all_symbols(leverage)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
    if not await trading_system._ensure_model_exists():
      logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–∏—á–Ω—É—é ML –º–æ–¥–µ–ª—å. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
      return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
    await trading_system.position_manager.load_open_positions()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º—ã —Ä—ã–Ω–∫–∞
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä—ã–Ω–∫–∞...")
    for symbol in trading_system.active_symbols[:20]:
      try:
        regime = await trading_system.get_market_regime(symbol)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º—ã –≤ state_manager –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º –¥–ª—è {symbol}: {e}")

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    trading_system.is_running = True
    trading_system.state_manager.set_status('running')

    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    trading_system._monitoring_task = asyncio.create_task(trading_system._monitoring_loop_optimized())
    trading_system._fast_monitoring_task = asyncio.create_task(trading_system._fast_position_monitoring_loop())
    trading_system._retraining_task = asyncio.create_task(trading_system._periodic_retraining())
    trading_system._time_sync_task = asyncio.create_task(trading_system._periodic_time_sync())
    trading_system._cache_cleanup_task = asyncio.create_task(trading_system.cleanup_caches())
    trading_system._correlation_task = asyncio.create_task(trading_system._update_portfolio_correlations())
    trading_system._evaluation_task = asyncio.create_task(trading_system.periodic_strategy_evaluation())
    trading_system._regime_analysis_task = asyncio.create_task(trading_system.periodic_regime_analysis())
    trading_system._fast_pending_check_task = asyncio.create_task(trading_system._fast_pending_signals_loop())
    trading_system._revalidation_task = asyncio.create_task(trading_system._revalidation_loop())

    logger.info("‚úÖ –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ Shadow Trading
    async def periodic_shadow_reports():
      while not stop_event.is_set():
        try:
          await asyncio.sleep(3600)
          await generate_shadow_trading_reports(trading_system)
        except Exception as e:
          logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")

    asyncio.create_task(periodic_shadow_reports())

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    report_counter = 0
    while not stop_event.is_set() and trading_system.is_running:
      if report_counter % 5 == 0:
        trading_system.display_balance()
        trading_system.display_active_symbols()

      if hasattr(trading_system, '_monitoring_cycles') and trading_system._monitoring_cycles % 10 == 0:
        await trading_system._log_performance_stats()

      if report_counter % 30 == 0:
        try:
          await generate_shadow_trading_reports(trading_system)
        except Exception as e:
          logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

      report_counter += 1

      try:
        await asyncio.wait_for(stop_event.wait(), timeout=60)
      except asyncio.TimeoutError:
        continue

  except asyncio.CancelledError:
    logger.info("–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
  except Exception as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
  finally:
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    if trading_system.is_running:
      await trading_system.stop()
    logger.info("–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")


if __name__ == "__main__":
  try:
    asyncio.run(main())
  except KeyboardInterrupt:
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt).")
  except Exception as e:
    setup_logging()
    logger.critical(f"–ù–µ—É–ª–æ–≤–ª–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True)

