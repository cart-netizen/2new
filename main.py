import asyncio
import os
import signal  # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
import sys
from datetime import datetime

import aiohttp

from utils.logging_config import setup_logging, get_logger, setup_signal_logger
from config import settings
from core.integrated_system import IntegratedTradingSystem

import warnings
# –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.
# –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è (–≤–¥—Ä—É–≥ –µ–≥–æ —Ç–æ–∂–µ —É–¥–∞–ª—è—Ç), –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–π DeprecationWarning.
try:
    from pkg_resources import PkgResourcesDeprecationWarning
    warnings.filterwarnings("ignore", category=PkgResourcesDeprecationWarning)
except ImportError:
    warnings.filterwarnings("ignore", category=DeprecationWarning)
# --- –ë–õ–û–ö –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô ---
# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É—Å—Ç–∞—Ä–µ–≤—à–µ–º pkg_resources –æ—Ç pandas_ta
# –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ UserWarning, –∞ –Ω–µ DeprecationWarning
warnings.filterwarnings("ignore", message="pkg_resources is deprecated as an API")
# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê --

async def generate_shadow_trading_reports(trading_system):
  """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–æ–≤ Shadow Trading"""

  if not trading_system.shadow_trading:
    return

  try:
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
    daily_report = await trading_system.shadow_trading.generate_daily_report()

    if 'error' not in daily_report:
      logger.info("üìä === –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ SHADOW TRADING ===")

      overall = daily_report.get('overall_performance', {})
      if overall:
        logger.info(f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å: {overall.get('total_signals', 0)}")
        logger.info(f"‚úÖ Win Rate: {overall.get('win_rate_pct', 0)}%")
        logger.info(f"üí∞ –û–±—â–∏–π P&L: {overall.get('total_pnl_pct', 0):+.2f}%")
        logger.info(f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: +{overall.get('avg_win_pct', 0)}%")
        logger.info(f"üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {overall.get('avg_loss_pct', 0)}%")
        logger.info(f"‚öñÔ∏è Profit Factor: {overall.get('profit_factor', 0)}")
        logger.info(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {overall.get('filtered_signals', 0)}")

      # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏
      sources = daily_report.get('performance_by_source', [])
      if sources:
        logger.info("üèÜ –õ—É—á—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for source in sources[:3]:
          logger.info(f"  ‚Ä¢ {source['source']}: WR {source['win_rate_pct']}% "
                      f"({source['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤, P&L: {source['total_pnl_pct']:+.1f}%)")

      # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      recommendations = await trading_system.shadow_trading.performance_analyzer.generate_optimization_recommendations(
        1)
      if 'error' not in recommendations:
        high_priority_recs = [r for r in recommendations.get('recommendations', []) if r['priority'] == 'high']
        if high_priority_recs:
          logger.info("üî¥ –í–ê–ñ–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
          for rec in high_priority_recs[:2]:  # –¢–æ–ø 2
            logger.info(f"  ‚Ä¢ {rec['message']}")
            logger.info(f"    üí° {rec['suggested_action']}")

      logger.info("=" * 50)

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ Shadow Trading: {e}")

logger = get_logger(__name__)


async def test_api_connectivity():
  """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∏ —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"""
  try:
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API...")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π connector –¥–ª—è —Ç–µ—Å—Ç–∞
    from core.bybit_connector import BybitConnector
    test_connector = BybitConnector()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
    server_time_url = test_connector.base_url + "/v5/market/time"
    async with aiohttp.ClientSession() as session:
      async with session.get(server_time_url) as response:
        if response.status == 200:
          data = await response.json()
          server_timestamp = int(data['result']['timeNano']) // 1_000_000
          server_time = datetime.fromtimestamp(server_timestamp / 1000)
          logger.info(f"‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ Bybit: {server_time}")
        else:
          logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {response.status}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è BTCUSDT
    test_candles = await test_connector.get_kline("BTCUSDT", "60", limit=5)
    if test_candles:
      last_candle_timestamp = int(test_candles[0][0])
      last_candle_time = datetime.fromtimestamp(last_candle_timestamp / 1000)
      current_time = datetime.now()
      age_hours = (current_time - last_candle_time).total_seconds() / 3600

      logger.info(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ BTCUSDT: {last_candle_time}")
      logger.info(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö: {age_hours:.1f} —á–∞—Å–æ–≤")

      if age_hours > 2:
        logger.error(f"üö® API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ! –í–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f} —á–∞—Å–æ–≤")
      else:
        logger.info("‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ")
    else:
      logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")

    await test_connector.close()

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")

async def main():
  setup_logging(settings.LOG_LEVEL)
  setup_signal_logger()
  logger.info("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏...")

  trading_system = IntegratedTradingSystem()
  await test_api_connectivity()
  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  # loop = asyncio.get_event_loop()
  stop_event = asyncio.Event()

  if not os.path.exists("ml_models/anomaly_detector.pkl"):
    logger.info("–û–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π...")
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    await trading_system.connector.sync_time()
    symbols = await trading_system.data_fetcher.get_active_symbols_by_volume(200)
    if symbols:
      await trading_system.train_anomaly_detector(symbols[:100], lookback_days=60)

  if not os.path.exists("ml_models/enhanced_model.pkl"):
    logger.info("–û–±—É—á–µ–Ω–∏–µ Enhanced ML –º–æ–¥–µ–ª–∏...")
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    await trading_system.connector.sync_time()
    symbols = await trading_system.data_fetcher.get_active_symbols_by_volume(200)
    if symbols:
      await trading_system.train_enhanced_ml_model(symbols[:150], lookback_days=60)

  def signal_handler():
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    stop_event.set()

  if sys.platform != 'win32':
    loop = asyncio.get_running_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
      loop.add_signal_handler(sig, signal_handler)
  else:
    # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    signal.signal(signal.SIGINT, lambda s, f: signal_handler())

  try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
    await trading_system.start_optimized()  # –í–º–µ—Å—Ç–æ start()

    # –ù–û–í–û–ï: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ Shadow Trading
    async def periodic_shadow_reports():
      while not stop_event.is_set():
        try:
          await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
          await generate_shadow_trading_reports(trading_system)
        except Exception as e:
          logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—á–µ—Ç—ã –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(periodic_shadow_reports())

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    report_counter = 0
    while not stop_event.is_set() and trading_system.is_running:
      # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö (_monitoring_loop_optimized –∏ _fast_position_monitoring_loop)
      # –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

      if report_counter % 5 == 0:  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        trading_system.display_balance()
        trading_system.display_active_symbols()

      # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if hasattr(trading_system, '_monitoring_cycles') and trading_system._monitoring_cycles % 10 == 0:
        await trading_system._log_performance_stats()

      # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç Shadow Trading
      if report_counter % 30 == 0:  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        try:
          await generate_shadow_trading_reports(trading_system)
        except Exception as e:
          logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

      report_counter += 1

      # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      try:
        await asyncio.wait_for(stop_event.wait(), timeout=60)
      except asyncio.TimeoutError:
        continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª

  except asyncio.CancelledError:
    logger.info("–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
  except Exception as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
  finally:
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    if trading_system.is_running:
      await trading_system.stop()
    logger.info("–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")


if __name__ == "__main__":
  try:
    asyncio.run(main())
  except KeyboardInterrupt:
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt).")
  except Exception as e:
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–ª–æ–≤–ª–µ–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
    setup_logging()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ª–æ–≥–≥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    logger.critical(f"–ù–µ—É–ª–æ–≤–ª–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True)