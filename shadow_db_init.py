#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Shadow Trading

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python shadow_db_init.py

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü Shadow Trading
2. –°–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
4. –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""

import sqlite3
import sys
import os
from datetime import datetime
from pathlib import Path


def check_database_file(db_path: str) -> bool:
  """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
  if not os.path.exists(db_path):
    print(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}")
    return False

  print(f"‚úÖ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω: {db_path}")
  return True


def get_existing_tables(db_path: str) -> list:
  """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü"""
  try:
    with sqlite3.connect(db_path) as conn:
      cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
      tables = [row[0] for row in cursor.fetchall()]
      return tables
  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
    return []


def create_shadow_trading_tables(db_path: str) -> bool:
  """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã Shadow Trading"""
  try:
    with sqlite3.connect(db_path) as conn:
      # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
      conn.execute("PRAGMA journal_mode=WAL")
      conn.execute("PRAGMA synchronous=NORMAL")
      conn.execute("PRAGMA cache_size=10000")
      conn.execute("PRAGMA temp_store=MEMORY")

      print("üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã signal_analysis...")

      # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
      conn.execute("""
                CREATE TABLE IF NOT EXISTS signal_analysis (
                    signal_id TEXT PRIMARY KEY,
                    symbol TEXT NOT NULL,
                    signal_type TEXT NOT NULL,
                    entry_price REAL NOT NULL,
                    entry_time TIMESTAMP NOT NULL,
                    confidence REAL NOT NULL,
                    source TEXT NOT NULL,

                    indicators_triggered TEXT,  -- JSON array
                    ml_prediction_data TEXT,    -- JSON object
                    market_regime TEXT,
                    volatility_level TEXT,

                    was_filtered BOOLEAN DEFAULT FALSE,
                    filter_reasons TEXT,        -- JSON array

                    outcome TEXT DEFAULT 'pending',
                    exit_price REAL,
                    exit_time TIMESTAMP,
                    profit_loss_pct REAL,
                    profit_loss_usdt REAL,

                    max_favorable_excursion_pct REAL DEFAULT 0.0,
                    max_adverse_excursion_pct REAL DEFAULT 0.0,
                    time_to_target_seconds INTEGER,
                    time_to_max_profit_seconds INTEGER,

                    volume_at_signal REAL DEFAULT 0.0,
                    price_action_score REAL DEFAULT 0.0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)

      print("üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã price_tracking...")

      # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω
      conn.execute("""
                CREATE TABLE IF NOT EXISTS price_tracking (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    signal_id TEXT NOT NULL,
                    symbol TEXT NOT NULL,
                    price REAL NOT NULL,
                    timestamp TIMESTAMP NOT NULL,
                    minutes_elapsed INTEGER NOT NULL,
                    FOREIGN KEY (signal_id) REFERENCES signal_analysis (signal_id)
                )
            """)

      print("üî® –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

      # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      conn.execute("CREATE INDEX IF NOT EXISTS idx_signal_symbol ON signal_analysis(symbol)")
      conn.execute("CREATE INDEX IF NOT EXISTS idx_signal_entry_time ON signal_analysis(entry_time)")
      conn.execute("CREATE INDEX IF NOT EXISTS idx_signal_outcome ON signal_analysis(outcome)")
      conn.execute("CREATE INDEX IF NOT EXISTS idx_signal_source ON signal_analysis(source)")
      conn.execute("CREATE INDEX IF NOT EXISTS idx_signal_was_filtered ON signal_analysis(was_filtered)")
      conn.execute("CREATE INDEX IF NOT EXISTS idx_price_tracking_signal ON price_tracking(signal_id)")
      conn.execute("CREATE INDEX IF NOT EXISTS idx_price_tracking_timestamp ON price_tracking(timestamp)")

      conn.commit()
      print("‚úÖ –¢–∞–±–ª–∏—Ü—ã Shadow Trading —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
      return True

  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü Shadow Trading: {e}")
    return False


def verify_tables_structure(db_path: str) -> bool:
  """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü"""
  try:
    with sqlite3.connect(db_path) as conn:
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º signal_analysis
      cursor = conn.execute("PRAGMA table_info(signal_analysis)")
      signal_columns = [row[1] for row in cursor.fetchall()]

      required_signal_columns = [
        'signal_id', 'symbol', 'signal_type', 'entry_price', 'entry_time',
        'confidence', 'source', 'outcome', 'was_filtered'
      ]

      missing_columns = [col for col in required_signal_columns if col not in signal_columns]
      if missing_columns:
        print(f"‚ùå –í —Ç–∞–±–ª–∏—Ü–µ signal_analysis –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        return False

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º price_tracking
      cursor = conn.execute("PRAGMA table_info(price_tracking)")
      price_columns = [row[1] for row in cursor.fetchall()]

      required_price_columns = ['id', 'signal_id', 'symbol', 'price', 'timestamp']

      missing_price_columns = [col for col in required_price_columns if col not in price_columns]
      if missing_price_columns:
        print(f"‚ùå –í —Ç–∞–±–ª–∏—Ü–µ price_tracking –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_price_columns}")
        return False

      print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
      return True

  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü: {e}")
    return False


def get_database_statistics(db_path: str) -> dict:
  """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
  try:
    with sqlite3.connect(db_path) as conn:
      stats = {}

      # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      cursor = conn.execute("SELECT COUNT(*) FROM trades")
      stats['total_trades'] = cursor.fetchone()[0]

      cursor = conn.execute("SELECT COUNT(*) FROM signals_log")
      stats['total_signals_log'] = cursor.fetchone()[0]

      # Shadow Trading —Ç–∞–±–ª–∏—Ü—ã
      try:
        cursor = conn.execute("SELECT COUNT(*) FROM signal_analysis")
        stats['shadow_signals'] = cursor.fetchone()[0]

        cursor = conn.execute("SELECT COUNT(*) FROM signal_analysis WHERE outcome = 'profitable'")
        stats['shadow_profitable'] = cursor.fetchone()[0]

        cursor = conn.execute("SELECT COUNT(*) FROM signal_analysis WHERE was_filtered = 1")
        stats['shadow_filtered'] = cursor.fetchone()[0]

        cursor = conn.execute("SELECT COUNT(*) FROM price_tracking")
        stats['price_tracking_records'] = cursor.fetchone()[0]

      except sqlite3.OperationalError:
        stats['shadow_signals'] = 0
        stats['shadow_profitable'] = 0
        stats['shadow_filtered'] = 0
        stats['price_tracking_records'] = 0

      return stats

  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    return {}


def add_sample_data(db_path: str) -> bool:
  """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
  try:
    with sqlite3.connect(db_path) as conn:
      # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
      test_signal_data = (
        'TEST_BTCUSDT_20250624_120000_BUY',
        'BTCUSDT',
        'BUY',
        50000.0,
        datetime.now().isoformat(),
        0.85,
        'test_init_script',
        '["rsi_oversold"]',
        '{"confidence": 0.85}',
        'trending',
        'normal',
        False,
        '[]',
        0.0,
        0.0
      )

      conn.execute("""
                INSERT OR IGNORE INTO signal_analysis (
                    signal_id, symbol, signal_type, entry_price, entry_time,
                    confidence, source, indicators_triggered, ml_prediction_data,
                    market_regime, volatility_level, was_filtered, filter_reasons,
                    volume_at_signal, price_action_score
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, test_signal_data)

      conn.commit()
      print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
      return True

  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    return False


def main():
  """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
  print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Shadow Trading Database")
  print("=" * 50)

  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  db_path = "trading_data.db"

  # –ò—â–µ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö
  possible_paths = [
    db_path,
    f"../{db_path}",
    f"data/{db_path}",
    f"../data/{db_path}"
  ]

  actual_db_path = None
  for path in possible_paths:
    if os.path.exists(path):
      actual_db_path = path
      break

  if not actual_db_path:
    print(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é: {db_path}")
    actual_db_path = db_path

  print(f"üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {actual_db_path}")

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
  existing_tables = get_existing_tables(actual_db_path)
  print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

  shadow_tables = [t for t in existing_tables if t in ['signal_analysis', 'price_tracking']]

  if shadow_tables:
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã Shadow Trading: {shadow_tables}")
  else:
    print("‚ùå –¢–∞–±–ª–∏—Ü—ã Shadow Trading –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
  print("\nüî® –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...")
  if create_shadow_trading_tables(actual_db_path):
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã Shadow Trading –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
  else:
    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
    return False

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...")
  if not verify_tables_structure(actual_db_path):
    print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return False

  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
  stats = get_database_statistics(actual_db_path)

  for key, value in stats.items():
    print(f"   {key}: {value}")

  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
  if stats.get('shadow_signals', 0) == 0:
    print("\nüß™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    add_sample_data(actual_db_path)

  print("\n" + "=" * 50)
  print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Shadow Trading –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
  print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
  print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ dashboard.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
  print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
  print("   3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫")

  return True


if __name__ == "__main__":
  try:
    success = main()
    sys.exit(0 if success else 1)
  except KeyboardInterrupt:
    print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    sys.exit(1)
  except Exception as e:
    print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    sys.exit(1)