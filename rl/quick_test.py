"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç RL —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""

import asyncio
import pandas as pd
from datetime import datetime, timedelta

from core.enums import Timeframe
from core.integrated_system import IntegratedTradingSystem
from config.config_manager import ConfigManager
from utils.logging_config import get_logger

logger = get_logger(__name__)


async def quick_rl_test():
  """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç RL –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
  logger.info("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç RL —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")

  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  config_manager = ConfigManager()
  config = config_manager.load_config()

  # –í–∫–ª—é—á–∞–µ–º RL
  config['rl_trading']['enabled'] = True
  config['general_settings']['monitoring_interval_seconds'] = 10  # –ë—ã—Å—Ç—Ä–µ–µ –¥–ª—è —Ç–µ—Å—Ç–∞

  # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
  system = IntegratedTradingSystem(config=config)

  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –æ–¥–Ω–æ–º —Å–∏–º–≤–æ–ª–µ
  test_symbol = 'BTCUSDT'

  try:
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await system.data_fetcher.get_historical_candles(
      symbol=test_symbol,
      timeframe=Timeframe.ONE_HOUR,
      limit=100
    )

    if data is None or data.empty:
      logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
      return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –±–∞—Ä–æ–≤ –¥–ª—è {test_symbol}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
    rl_strategy = system.strategy_manager.strategies.get('RL_Strategy')

    if not rl_strategy:
      logger.error("RL —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
      return

    signal = await rl_strategy.generate_signal(test_symbol, data)

    if signal:
      logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {signal.signal_type.value}")
      logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}")
      logger.info(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal.entry_price}")
      logger.info(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {signal.metadata}")
    else:
      logger.info("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    status = rl_strategy.get_strategy_status()

    logger.info("\nüìä –°—Ç–∞—Ç—É—Å RL —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
    logger.info(f"   –ê–ª–≥–æ—Ä–∏—Ç–º: {status['algorithm']}")
    logger.info(f"   –û–±—É—á–µ–Ω–∞: {status['is_trained']}")
    logger.info(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status['total_signals']}")
    logger.info(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {status['average_confidence']:.2f}")

    logger.info("\n‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}", exc_info=True)
  finally:
    # await system.shutdown()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if system and hasattr(system, 'connector') and system.connector:
      await system.connector.close()
    if system and hasattr(system, 'data_fetcher') and hasattr(system.data_fetcher, 'connector'):
      await system.data_fetcher.connector.close()

if __name__ == "__main__":
  asyncio.run(quick_rl_test())