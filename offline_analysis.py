# offline_analysis.py

import asyncio
import pandas as pd
import warnings

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
from core.data_fetcher import DataFetcher
from core.bybit_connector import BybitConnector
from ml.feature_engineering import feature_engineer, analyze_feature_importance
from config import settings
from utils.logging_config import setup_logging
from core.enums import Timeframe

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±—É–¥—É—â–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç pandas, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∏
warnings.simplefilter(action='ignore', category=FutureWarning)


async def run_feature_analysis():
  """
  –û—Ñ—Ñ–ª–∞–π–Ω-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã–≤–æ–¥–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
  """
  print("--- –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---")

  # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  connector = BybitConnector()
  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Ç.–∫. –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
  data_fetcher = DataFetcher(connector, settings={})

  # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è BTCUSDT)
  # –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏–º–≤–æ–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
  symbol_to_analyze = "SOLUSDT"
  data_limit = 10000  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

  print(f"\n[1/3] –ó–∞–≥—Ä—É–∑–∫–∞ {data_limit} —Å–≤–µ—á–µ–π –¥–ª—è {symbol_to_analyze}...")
  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
  features, labels = await feature_engineer.create_multi_timeframe_features(symbol_to_analyze, data_fetcher)

  if features is None or labels is None:
    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –º–µ—Ç–∫–∏. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
    await connector.close()
    return

  print(
    f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã. –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏: {len(features)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π, {len(features.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")

  # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏
  print("\n[2/3] –†–∞—Å—á–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤... (–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)")
  importance_df = analyze_feature_importance(features, labels)

  if importance_df.empty:
    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")
  else:
    print("\n[3/3] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–æ–ø-20 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    print("-" * 50)
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-20 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –∏—Ö –æ–±—â–∏–º —Å–∫–æ—Ä–æ–º
    print(importance_df.head(50)[['combined_score']])
    print(importance_df.tail(50)[['combined_score']])
    print("-" * 50)
    print(
      "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å –Ω–∏–∑–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, score < 0.001) –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∫ —É–¥–∞–ª–µ–Ω–∏—é –∏–∑ `calculate_technical_indicators` –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")

  # 4. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  await connector.close()


if __name__ == "__main__":
  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
  asyncio.run(run_feature_analysis())
