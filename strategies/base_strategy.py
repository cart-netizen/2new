from abc import ABC, abstractmethod
import pandas as pd
from typing import Optional

from config.config_manager import logger
from core.schemas import TradingSignal

class BaseStrategy(ABC):
    def __init__(self, strategy_name: str):
        self.strategy_name = strategy_name

    @abstractmethod
    async def generate_signal(self, symbol: str, data: pd.DataFrame) -> Optional[TradingSignal]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.
        data: DataFrame —Å–æ —Å–≤–µ—á–∞–º–∏ (index=timestamp, columns=['open', 'high', 'low', 'close', 'volume'])
        """
        pass

    def get_current_price(self, data: pd.DataFrame) -> float:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        if len(data) < 1:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã")

        if len(data) >= 2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            if 'timestamp' in data.columns:
                first_ts = data['timestamp'].iloc[0]
                second_ts = data['timestamp'].iloc[1]
                is_desc_order = first_ts > second_ts
            elif hasattr(data.index, 'to_timestamp') or isinstance(data.index, pd.DatetimeIndex):
                first_idx = data.index[0]
                second_idx = data.index[1]
                is_desc_order = first_idx > second_idx
            else:
                is_desc_order = False

            # –ë–µ—Ä–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            current_price = float(data['close'].iloc[0] if is_desc_order else data['close'].iloc[-1])

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.debug(
                f"üîç {self.strategy_name}: –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ = {current_price}, –ø–æ—Ä—è–¥–æ–∫ —É–±—ã–≤–∞—é—â–∏–π = {is_desc_order}")

            return current_price
        else:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
            return float(data['close'].iloc[-1])
        #---------------------------------------------------------------------------------------------
        # –í–º–µ—Å—Ç–æ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ last_price = ... –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
        # last_price = self.get_current_price(data)
        #---------------------------------------------------------------------------------------------
