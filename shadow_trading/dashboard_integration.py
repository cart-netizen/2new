from typing import Dict, Any

from main import logger
from shadow_trading.shadow_trading_manager import ShadowTradingManager


class ShadowTradingDashboard:
  """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Shadow Trading —Å dashboard"""

  def __init__(self, shadow_manager: ShadowTradingManager):
    self.shadow_manager = shadow_manager

  def create_performance_summary(self, days: int = 7) -> str:
    """–°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è dashboard"""
    try:
      import asyncio

      # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      loop = asyncio.new_event_loop()
      asyncio.set_event_loop(loop)

      overall_perf = loop.run_until_complete(
        self.shadow_manager.performance_analyzer.get_overall_performance(days)
      )

      source_perf = loop.run_until_complete(
        self.shadow_manager.performance_analyzer.get_performance_by_source(days)
      )

      loop.close()

      if 'error' in overall_perf:
        return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Shadow Trading –∑–∞ {days} –¥–Ω–µ–π"

      # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
      summary_lines = [
        f"üìä **Shadow Trading –∑–∞ {days} –¥–Ω–µ–π:**",
        f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤: {overall_perf['total_signals']} (–∑–∞–≤–µ—Ä—à–µ–Ω–æ: {overall_perf['completed_signals']})",
        f"‚úÖ Win Rate: {overall_perf['win_rate_pct']}%",
        f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: +{overall_perf['avg_win_pct']}%",
        f"üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {overall_perf['avg_loss_pct']}%",
        f"‚öñÔ∏è Profit Factor: {overall_perf['profit_factor']}",
        ""
      ]

      # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      if source_perf:
        summary_lines.append("üèÜ **–õ—É—á—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:**")
        for source in source_perf[:3]:
          summary_lines.append(
            f"  ‚Ä¢ {source['source']}: {source['win_rate_pct']}% "
            f"({source['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤)"
          )

      return "\n".join(summary_lines)

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è dashboard: {e}")
      return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Shadow Trading: {e}"

  def create_signal_chart_data(self, days: int = 7) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
      import asyncio

      loop = asyncio.new_event_loop()
      asyncio.set_event_loop(loop)

      hourly_perf = loop.run_until_complete(
        self.shadow_manager.performance_analyzer.get_hourly_performance(days)
      )

      loop.close()

      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
      hours = list(range(24))
      win_rates = []
      signal_counts = []

      for hour in hours:
        if hour in hourly_perf:
          win_rates.append(hourly_perf[hour]['win_rate_pct'])
          signal_counts.append(hourly_perf[hour]['total_signals'])
        else:
          win_rates.append(0)
          signal_counts.append(0)

      return {
        'hours': hours,
        'win_rates': win_rates,
        'signal_counts': signal_counts
      }

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
      return {'hours': [], 'win_rates': [], 'signal_counts': []}