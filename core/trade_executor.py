from datetime import datetime, timezone

import ccxt

import config
from core.bybit_connector import BybitConnector
from core.integrated_system import IntegratedTradingSystem
from core.schemas import TradingSignal
from data.database_manager import AdvancedDatabaseManager

from utils.logging_config import setup_logging, get_logger
from config import LEVERAGE  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


logger = get_logger(__name__)


class TradeExecutor:
  def __init__(self, connector: BybitConnector, db_manager: AdvancedDatabaseManager, telegram_bot=None):
    self.connector = connector
    self.db_manager = db_manager
    self.telegram_bot = telegram_bot
    self.trading_system = IntegratedTradingSystem(db_manager=db_manager)


  async def execute_trade(self, signal: TradingSignal, symbol: str, quantity: float):
    """–ò—Å–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    try:
      # –°–æ–∑–¥–∞–µ–º order_id
      order_id = f"{symbol}_{int(datetime.now().timestamp())}"

      # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ AdvancedDatabaseManager
      trade_id = self.db_manager.add_trade_with_signal(
        signal=signal,
        order_id=order_id,
        quantity=quantity,
        leverage=config.LEVERAGE
      )

      if trade_id:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        self.db_manager.log_signal(signal, symbol, executed=True)
        return True
      return False
    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
      return False

#--------–ø—Ä–æ—à–ª–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è async def execute_trade---------
  # async def execute_trade(self, symbol: str, side: str, quantity: float, strategy_name: str,
  #                         order_type: str = "Market", price: [float] = None, leverage: int = LEVERAGE,
  #                         stop_loss: [float] = None, take_profit: [float] = None) -> [str]:
  #   """
  #   –ò—Å–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–∏–∫–∞–∑ (–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏).
  #
  #   Args:
  #       symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª.
  #       side (str): 'buy' –∏–ª–∏ 'sell'.
  #       quantity (float): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏.
  #       strategy_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–≤—à–µ–π —Å–∏–≥–Ω–∞–ª.
  #       order_type (str): 'Market' –∏–ª–∏ 'Limit'.
  #       price (Optional[float]): –¶–µ–Ω–∞ –¥–ª—è Limit –æ—Ä–¥–µ—Ä–∞.
  #       leverage (int): –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ.
  #       stop_loss (Optional[float]): –¶–µ–Ω–∞ Stop Loss.
  #       take_profit (Optional[float]): –¶–µ–Ω–∞ Take Profit.
  #
  #   Returns:
  #       Optional[str]: ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ None.
  #   """
  #   logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É: {symbol} {side} {quantity} @ {price if price else 'Market'}, "
  #               f"Strategy: {strategy_name}, Leverage: {leverage}x")
  #   #self.log(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä: {symbol} | {side} | amount={quantity} | price={price or 'market'}")
  #
  #   # 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞ (–µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
  #   # Bybit —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–ª–µ—á–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –ø–∞—Ä—ã.
  #   # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º, –µ—Å–ª–∏ –ø–ª–µ—á–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è.
  #   # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–µ—á–∞ –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –±–æ–ª–µ–µ –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ.
  #   # –í–ê–ñ–ù–û: set_leverage –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ –¥–æ create_order
  #   leverage_set = await self.connector.set_leverage(symbol, leverage)
  #   if not leverage_set:  # –∏–ª–∏ –µ—Å–ª–∏ leverage_set –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
  #     # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ set_leverage –≤ ccxt –º–æ–≥—É—Ç –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞, –∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ –∫–∏–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
  #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
  #     logger.warning(
  #       f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–ª–µ—á–∞ {leverage}x –¥–ª—è {symbol}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞.")
  #     # –í –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö, –µ—Å–ª–∏ set_leverage –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å, –ª—É—á—à–µ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.
  #
  #   # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞, –≤–∫–ª—é—á–∞—è SL/TP –¥–ª—è Bybit API v5
  #   params = {'category': self.connector.exchange.options.get('defaultType', 'linear')}  # 'linear' –∏–ª–∏ 'inverse'
  #   if order_type.lower() == 'market':
  #     price = None  # –î–ª—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
  #
  #   if stop_loss:
  #     params['stopLoss'] = str(stop_loss)
  #     # –î–ª—è Bybit –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è 'slTriggerBy': 'MarkPrice' –∏–ª–∏ 'LastPrice'
  #     # params['slTriggerBy'] = 'MarkPrice'
  #   if take_profit:
  #     params['takeProfit'] = str(take_profit)
  #     # params['tpTriggerBy'] = 'MarkPrice'
  #
  #   # 3. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ BybitConnector
  #   try:
  #     order_response = await self.connector.place_order(
  #       symbol=symbol,
  #       side=side.lower(),
  #       order_type=order_type.lower(),
  #       amount=quantity,
  #       price=price,
  #       params=params
  #     )
  #
  #     if order_response and 'id' in order_response:
  #       order_id = order_response['id']
  #       open_price = float(
  #         order_response.get('price', 0.0))  # –î–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –≤ 'average' –∏–ª–∏ 'filledPrice'
  #
  #       # –ï—Å–ª–∏ —ç—Ç–æ —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä, —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å—Ä–∞–∑—É –∏–∑–≤–µ—Å—Ç–Ω–∞ –∏–ª–∏ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.
  #       # Bybit —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –≤ –ø–æ–ª–µ 'price' –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ create_order.
  #       # –†–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–∑ fetch_order(order_id) –∏–ª–∏ –∏–∑ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
  #       # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å, –∏–ª–∏ —Ü–µ–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö.
  #       if order_type.lower() == 'market' and order_response.get('average'):
  #         actual_open_price = float(order_response['average'])
  #       elif order_type.lower() == 'limit' and order_response.get('price'):
  #         actual_open_price = float(order_response['price'])
  #       else:  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –ø—Ä–∏—à–ª–∞ —Å—Ä–∞–∑—É
  #         actual_open_price = price if price else 0.0  # –ù—É–∂–Ω–∞ –ª—É—á—à–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö
  #         logger.warning(
  #           f"–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {order_id} –Ω–µ –±—ã–ª–∞ —á–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {order_response}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {actual_open_price}")
  #
  #       logger.info(f"–û—Ä–¥–µ—Ä {order_id} ({symbol} {side} {quantity}) —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω. "
  #                   f"–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {actual_open_price}")
  #
  #       if "error" in order_response:
  #         msg = f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {side} {symbol} –ù–ï —Ä–∞–∑–º–µ—â–µ–Ω: {result['error']}"
  #         self.log(msg, level="warning")
  #         await self.notify(msg)
  #         return False
  #
  #       if "order" in order_response:
  #         order_data = order_response["order"]
  #         msg = (
  #           f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {side.upper()} {symbol}\n"
  #           f"üì¶ –ö–æ–ª-–≤–æ: {order_data['amount']}\n"
  #           f"üíµ –¶–µ–Ω–∞: {order_data.get('price', 'market')}\n"
  #           f"üÜî ID: {order_data.get('id')}"
  #         )
  #         self.log(msg)
  #         await self.notify(msg)
  #
  #         return True
  #       self.log(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –±–∏—Ä–∂–∏ –¥–ª—è {symbol}", level="warning")
  #
  #       # 4. –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–µ –≤ –ë–î
  #       self.db_manager.add_open_trade(
  #         symbol=symbol,
  #         order_id=order_id,
  #         strategy=strategy_name,
  #         side=side.lower(),
  #         open_timestamp=datetime.now(timezone.utc),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC
  #         open_price=actual_open_price,  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
  #         quantity=quantity,
  #         leverage=leverage
  #       )
  #       return order_id
  #     else:
  #       logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –¥–ª—è {symbol} {side}. –û—Ç–≤–µ—Ç API: {order_response}")
  #
  #   except RuntimeError as e:
  #     if "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" in str(e):
  #       msg = f"‚ùå {symbol} | –û—Ä–¥–µ—Ä –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
  #       self.log(msg, level="error")
  #       await self.notify(msg)
  #       return False
  #
  #
  #   except Exception as e:
  #     self.log(f"‚ÄºÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ {symbol}: {e}", level="error")
  #     await self.notify(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ {symbol}: {e}")
  #     return False
  #
  # def log(self, message: str, level="info"):
  #     logger_method = getattr(self.connector.logger, level, self.connector.logger.info)
  #     logger_method(message)
  #
  # async def notify(self, message: str):
  #   if self.telegram_bot:
  #     # try:
  #       await self.telegram_bot.send_message(message)
  #     # except Exception as e:
  #     #   self.connector.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
  #
  #
#-----------------------------------------------------------
  async def close_position(self, symbol: str, db_trade_id: [int] = None, open_order_id: [str] = None,
                           quantity_to_close: [float] = None) -> bool:
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é (–∏–ª–∏ –µ–µ —á–∞—Å—Ç—å).
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.

    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª.
        db_trade_id (Optional[int]): ID —Å–¥–µ–ª–∫–∏ –≤ –Ω–∞—à–µ–π –ë–î (–µ—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é).
        open_order_id (Optional[str]): ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ (–µ—Å–ª–∏ db_trade_id –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω).
        quantity_to_close (Optional[float]): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è. –ï—Å–ª–∏ None, –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤—Å—è –ø–æ–∑–∏—Ü–∏—è –∏–∑ –ë–î.

    Returns:
        bool: True, –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    trade_info = None
    if db_trade_id:
      # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º, –µ—Å–ª–∏ db_manager –Ω–µ async
      # trade_info = self.db_manager.get_trade_by_id(db_trade_id) # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –µ—Å—Ç—å —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥
      # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∏—â–µ–º –ø–æ order_id –∏–ª–∏ –¥—Ä—É–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
      pass  # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ –±—ã –º—ã –∏—Å–∫–∞–ª–∏ –ø–æ ID –∏–∑ –Ω–∞—à–µ–π –ë–î

    if not trade_info and open_order_id:
      trade_info = self.db_manager.get_trade_by_order_id(open_order_id)

    if not trade_info:
      # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ë–î, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å –±–∏—Ä–∂–∏
      logger.warning(
        f"–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ –≤ –ë–î –¥–ª—è {symbol} (OrderID: {open_order_id}). –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å –±–∏—Ä–∂–∏.")
      positions = await self.connector.fetch_positions(symbols=[symbol])
      if positions:
        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É. Bybit fetch_positions –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ (–¥–ª—è hedge mode)
        # –î–ª—è one-way mode –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞ –∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π.
        current_pos = None
        for pos_item in positions:
          if pos_item['symbol'] == symbol and float(pos_item.get('contracts', 0)) != 0:
            current_pos = pos_item
            break

        if current_pos:
          pos_size = float(current_pos.get('contracts', 0))
          pos_side = 'buy' if pos_size > 0 else 'sell'  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏

          close_side = 'sell' if pos_side == 'buy' else 'buy'
          qty_to_close = abs(pos_size)

          logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è {symbol}: {pos_side} {qty_to_close}. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è.")
          # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
          # Bybit API v5 –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç—Ä–µ–±—É–µ—Ç `reduceOnly=True`
          close_order_params = {
            'category': self.connector.exchange.options.get('defaultType', 'linear'),
            'reduceOnly': True
          }
          close_order_response = await self.connector.place_order(
            symbol=symbol,
            side=close_side,
            order_type='market',
            amount=qty_to_close,
            params=close_order_params
          )

          if close_order_response and 'id' in close_order_response:
            close_order_id = close_order_response['id']
            # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏ PnL –±—É–¥—É—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞.
            # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î.
            logger.info(f"–û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} (ID: {close_order_id}) —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω.")
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–∂–¥–∞—Ç—å—Å—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ë–î, —ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä.
            # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î —Å PnL, –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è.
            # –ú–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ WebSocket –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å.
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ.
            # db_manager.update_close_trade(...) –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ.
            return True
          else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è {symbol}. –û—Ç–≤–µ—Ç: {close_order_response}")
            return False
        else:
          logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è {symbol} –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
          return False
      else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö —Å –±–∏—Ä–∂–∏ –¥–ª—è {symbol}.")
        return False

    # –ï—Å–ª–∏ –∂–µ —É –Ω–∞—Å –µ—Å—Ç—å trade_info –∏–∑ –Ω–∞—à–µ–π –ë–î (—Ç.–µ. –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é)
    if trade_info and trade_info['status'] == 'OPEN':
      original_side = trade_info['side']
      original_quantity = trade_info['quantity']
      open_order_id_from_db = trade_info['order_id']

      close_side = 'sell' if original_side == 'buy' else 'buy'
      qty_to_close = quantity_to_close if quantity_to_close else original_quantity

      logger.info(
        f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ë–î (OrderID: {open_order_id_from_db}): {symbol} {close_side} {qty_to_close}")

      close_order_params = {
        'category': self.connector.exchange.options.get('defaultType', 'linear'),
        'reduceOnly': True  # –í–∞–∂–Ω–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
      }

      # –ï—Å–ª–∏ –º—ã –∑–Ω–∞–µ–º ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ, –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ `clientOrderId` –¥–ª—è —Å–≤—è–∑–∏,
      # –Ω–æ —ç—Ç–æ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤ CCXT.
      # if open_order_id_from_db:
      #    close_order_params['clientOrderId'] = f"close_{open_order_id_from_db}"

      close_order_response = await self.connector.place_order(
        symbol=symbol,
        side=close_side,
        order_type='market',  # –û–±—ã—á–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—é—Ç —Ä—ã–Ω–æ—á–Ω—ã–º
        amount=qty_to_close,
        params=close_order_params
      )

      if close_order_response and 'id' in close_order_response:
        close_order_id = close_order_response['id']
        logger.info(
          f"–û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ (ID: {close_order_id}) –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {open_order_id_from_db} ({symbol}) —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω.")

        # –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î —Å P/L, –∫–æ–º–∏—Å—Å–∏–µ–π –∏ —Ü–µ–Ω–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å
        # –ü–û–°–õ–ï —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
        # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ polling).
        # –ó–¥–µ—Å—å –º—ã —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ. –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –±—É–¥–µ—Ç –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ,
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤.

        # –ü–æ–∫–∞ —á—Ç–æ, –º—ã –º–æ–∂–µ–º –ø–æ–º–µ—Ç–∏—Ç—å –≤ –ë–î, —á—Ç–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–∫—Ä—ã—Ç–∏–µ, –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–º –∫–æ–ª–ª–±—ç–∫ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–∑–∂–µ.
        return True
      else:
        logger.error(
          f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {open_order_id_from_db} ({symbol}). –û—Ç–≤–µ—Ç: {close_order_response}")
        return False
    else:
      logger.warning(
        f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ –≤ –ë–î —Å ID {db_trade_id} –∏–ª–∏ OrderID {open_order_id} –¥–ª—è {symbol}, –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –Ω–µ 'OPEN'.")
      return False

  async def update_trade_status_from_exchange(self, order_id: str, symbol: str):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î, –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ).
    –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏–ª–∏ –ø–æ —Å–æ–±—ã—Ç–∏—é –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ.
    """
    if not self.connector.exchange:
      logger.error("CCXT exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏.")
      return

    try:
      # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ —Å –±–∏—Ä–∂–∏
      # Bybit —Ç—Ä–µ–±—É–µ—Ç 'category' –≤ params
      order_info = await self.connector.exchange.fetch_order(order_id, symbol, params={'category': BYBIT_CATEGORY})
      logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ {order_id} ({symbol}) —Å –±–∏—Ä–∂–∏: {order_info}")

      if not order_info:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ {order_id} ({symbol}) —Å –±–∏—Ä–∂–∏.")
        return

      order_status = order_info.get('status')  # 'closed' (–∏—Å–ø–æ–ª–Ω–µ–Ω), 'open', 'canceled'

      # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ä–¥–µ—Ä–æ–º –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
      # –∏ –æ–Ω –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω ('closed' –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö CCXT –æ–∑–Ω–∞—á–∞–µ—Ç filled)

      db_trade_record = self.db_manager.get_trade_by_order_id(
        order_id)  # –≠—Ç–æ –µ—Å–ª–∏ order_id - —ç—Ç–æ ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –û–¢–ö–†–´–¢–ò–ï.
      # –ù–∞–º –Ω—É–∂–µ–Ω –º–µ—Ö–∞–Ω–∏–∑–º —Å–≤—è–∑–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å –æ—Ä–¥–µ—Ä–æ–º –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ.

      # –î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –û–¢–ö–†–´–¢–ò–ï, –∏ –º—ã —Ö–æ—Ç–∏–º –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å
      # –≠—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, —Ç.–∫. `order_id` –∑–¥–µ—Å—å - —ç—Ç–æ ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ó–ê–ö–†–´–¢–ò–ï.
      # –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –û–¢–ö–†–´–¢–£–Æ —Å–¥–µ–ª–∫—É –≤ –Ω–∞—à–µ–π –ë–î, –∫–æ—Ç–æ—Ä—É—é —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã–ª.
      # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å, –∏–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º—É —Å–∞–π–¥—É.

      # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –º—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ (close_order_id) –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è.
      # –ù–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—É—é —Å–¥–µ–ª–∫—É (original_open_order_id) –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–µ.
      # –í –¥–∞–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ `order_id` - —ç—Ç–æ ID –æ—Ä–¥–µ—Ä–∞, —á–µ–π —Å—Ç–∞—Ç—É—Å –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º.
      # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ, –∏ –æ–Ω 'closed' (filled):
      if order_status == 'closed':  # 'filled' –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö –±–∏—Ä–∂–∏
        filled_price = float(order_info.get('average', order_info.get('price', 0.0)))  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        filled_qty = float(order_info.get('filled', 0.0))
        commission_cost = float(order_info.get('fee', {}).get('cost', 0.0)) if order_info.get('fee') else 0.0
        # commission_currency = order_info.get('fee', {}).get('currency')

        # –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –û–¢–ö–†–´–¢–£–Æ —Å–¥–µ–ª–∫—É –≤ –Ω–∞—à–µ–π –ë–î, –∫–æ—Ç–æ—Ä—É—é —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã–ª.
        # –≠—Ç–æ —Å–∞–º–∞—è —Å–ª–æ–∂–Ω–∞—è —á–∞—Å—Ç—å, –µ—Å–ª–∏ –º—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —è–≤–Ω—É—é —Å–≤—è–∑—å.
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º—ã –∑–∞–∫—Ä—ã–≤–∞–ª–∏ –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É `symbol`.
        # –ò—â–µ–º –≤ –ë–î –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É.
        open_trades_in_db = self.db_manager.get_open_positions_from_db()
        target_trade_to_update = None
        for trade in open_trades_in_db:
          if trade['symbol'] == symbol:
            # –ï—Å–ª–∏ –º—ã –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏, –ª–æ–≥–∏–∫–∞ —É—Å–ª–æ–∂–Ω—è–µ—Ç—Å—è.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ä–∞–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.
            if abs(filled_qty - trade['quantity']) < 1e-9:  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ float
              target_trade_to_update = trade
              break

        if target_trade_to_update:
          original_open_order_id = target_trade_to_update['order_id']
          open_price_db = target_trade_to_update['open_price']
          original_side_db = target_trade_to_update['side']
          original_qty_db = target_trade_to_update['quantity']

          # –†–∞—Å—á–µ—Ç P/L
          pnl = 0
          if original_side_db == 'buy':  # –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –ª–æ–Ω–≥, –∑–∞–∫—Ä—ã–ª–∏ –ø—Ä–æ–¥–∞–∂–µ–π
            pnl = (filled_price - open_price_db) * original_qty_db
          elif original_side_db == 'sell':  # –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ —à–æ—Ä—Ç, –∑–∞–∫—Ä—ã–ª–∏ –ø–æ–∫—É–ø–∫–æ–π
            pnl = (open_price_db - filled_price) * original_qty_db

          # PnL —Å —É—á–µ—Ç–æ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞ —É–∂–µ –∑–∞–ª–æ–∂–µ–Ω –≤ —Ç–æ–º, —á—Ç–æ quantity - —ç—Ç–æ —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.
          # –ö–æ–º–∏—Å—Å–∏—è –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ PnL
          net_pnl = pnl - commission_cost

          logger.info(f"–û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ {order_id} –¥–ª—è {symbol} –∏—Å–ø–æ–ª–Ω–µ–Ω. "
                      f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {filled_price}, –ö–æ–ª-–≤–æ: {filled_qty}, –ö–æ–º–∏—Å—Å–∏—è: {commission_cost}. –†–∞—Å—á–µ—Ç–Ω—ã–π P/L: {net_pnl}")

          self.db_manager.update_close_trade(
            order_id=original_open_order_id,  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏—Å—Ö–æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ
            close_timestamp=datetime.fromtimestamp(order_info['timestamp'] / 1000, tz=timezone.utc) if order_info.get(
              'timestamp') else datetime.now(timezone.utc),
            close_price=filled_price,
            profit_loss=net_pnl,
            commission=commission_cost
          )
        else:
          logger.warning(
            f"–ò—Å–ø–æ–ª–Ω–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ {order_id} ({symbol}), –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ –≤ –ë–î –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
      elif order_status in ['open', 'partially_filled']:
        logger.info(f"–û—Ä–¥–µ—Ä {order_id} ({symbol}) –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω (—Å—Ç–∞—Ç—É—Å: {order_status}).")
      elif order_status in ['canceled', 'rejected', 'expired']:
        logger.warning(f"–û—Ä–¥–µ—Ä {order_id} ({symbol}) –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω (—Å—Ç–∞—Ç—É—Å: {order_status}).")
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—à–µ–π –ë–î, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ.
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ, —Ç–æ –ø–æ–∑–∏—Ü–∏—è –≤—Å–µ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–∞.

    except ccxt.OrderNotFound:
      logger.warning(
        f"–û—Ä–¥–µ—Ä {order_id} –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –¥–∞–≤–Ω–æ –∏–ª–∏ ID –Ω–µ–≤–µ—Ä–µ–Ω.")
      # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –Ω–∞—à–µ–π –ë–î –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏ –ø–æ–º–µ—Ç–∏—Ç—å –µ–≥–æ –∫–∞–∫ "–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–π" –∏–ª–∏ "–æ—à–∏–±–∫–∞".
    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {order_id} ({symbol}): {e}", exc_info=True)
