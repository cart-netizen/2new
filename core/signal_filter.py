# core/signal_filter.py

import pandas as pd
import pandas_ta as ta
from typing import Tuple, Dict, Any
from core.correlation_manager import CorrelationManager
from core.data_fetcher import DataFetcher
from core.market_regime_detector import MarketRegimeDetector, MarketRegime
from core.schemas import TradingSignal
from core.enums import SignalType, Timeframe
from utils.logging_config import get_logger
import logging
signal_logger = logging.getLogger('SignalTrace')
logger = get_logger(__name__)


class SignalFilter:
  """
  –ö–ª–∞—Å—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
  """

  def __init__(self, config: Dict[str, Any], data_fetcher: DataFetcher, market_regime_detector: MarketRegimeDetector, correlation_manager: CorrelationManager):
    self.config = config.get('filters', {})
    self.market_regime_detector = market_regime_detector
    self.correlation_manager = correlation_manager  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç—Ä–µ–Ω–¥—É BTC
    btc_filter_config = self.config.get('btc_trend_filter', {})
    self.btc_trend_filter_enabled = btc_filter_config.get('enabled', True)
    # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: –ø–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.75
    self.correlation_threshold = btc_filter_config.get('correlation_threshold', 0.75)
    # >>> –ö–û–ù–ï–¶ –ü–ê–¢–ß–ê (–ß–∞—Å—Ç—å 2)
    self.data_fetcher = data_fetcher
    logger.info(f"SignalFilter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {self.config}")

  async def filter_signal(self, signal: TradingSignal, data: pd.DataFrame) -> Tuple[bool, str]:
    if not signal:
      return False, "–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"

    try:
      # –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ try:
      current_price = signal.price

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º
      integrated_system = getattr(self, '_integrated_system', None)
      is_priority_symbol = False

      if integrated_system and hasattr(integrated_system, 'focus_list_symbols'):
        is_priority_symbol = signal.symbol in integrated_system.focus_list_symbols

      if is_priority_symbol:
        logger.info(f"üéØ {signal.symbol} –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º —Å–ø–∏—Å–∫–µ - –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")



      # --- –ù–û–í–´–ô –£–ú–ù–´–ô –ë–õ–û–ö: –§–ò–õ–¨–¢–† –ü–û –¢–†–ï–ù–î–£ BTC ---
      if self.config.get('use_btc_trend_filter', True) and 'BTC' not in signal.symbol:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∞–∫—Ç–∏–≤–µ –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ –≤—Å–ø–ª–µ—Å–∫–∞ –æ–±—ä–µ–º–∞
        # –ú—ã —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º `volume_spike_ratio` –≤ FeatureEngineer
        volume_spike_ratio = data.get('volume_spike_ratio', pd.Series([0])).iloc[-1]

        # –ï—Å–ª–∏ –æ–±—ä–µ–º –≤—ã—Ä–æ—Å –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ —Å—Ä–µ–¥–Ω–∏–º, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∞–Ω–æ–º–∞–ª–∏–µ–π
        if volume_spike_ratio > 2.0:
          logger.warning(
            f"–§–ò–õ–¨–¢–† –¥–ª—è {signal.symbol}: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–Ω–æ–º–∞–ª—å–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ (x{volume_spike_ratio:.1f}). –§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É BTC –≤—Ä–µ–º–µ–Ω–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        # else:
          # –ï—Å–ª–∏ –≤—Å–ø–ª–µ—Å–∫–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ BTC
          #---------–ó–∞–∫—Ä—ã—Ç–æ –≤ 08.07 –¥–ª—è —Ç–µ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ BTC-------------------------------------------
          # logger.debug(f"–§–ò–õ–¨–¢–† –¥–ª—è {signal.symbol}: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ BTC...")
          # btc_data = await self.data_fetcher.get_historical_candles("BTCUSDT", Timeframe.ONE_HOUR, limit=50)
          # if not btc_data.empty:
          #   btc_ema = ta.ema(btc_data['close'], length=21)
          #   if btc_ema is not None and not btc_ema.empty:
          #     last_btc_price = btc_data['close'].iloc[-1]
          #     last_btc_ema = btc_ema.iloc[-1]
          #
          #     if signal.signal_type == SignalType.BUY and last_btc_price < last_btc_ema:
          #       return False, f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: —Å–∏–≥–Ω–∞–ª BUY, –Ω–æ BTC –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ"
          #     if signal.signal_type == SignalType.SELL and last_btc_price > last_btc_ema:
          #       return False, f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: —Å–∏–≥–Ω–∞–ª SELL, –Ω–æ BTC –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ"
      # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

      # --- 1. –§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É (EMA) ---
      if self.config.get('use_trend_filter'):
        ema_period = self.config.get('ema_period', 200)
        ema_long = ta.ema(data['close'], length=ema_period)
        if ema_long is not None and not ema_long.empty:
          last_ema = ema_long.iloc[-1]
          logger.info(
            f"–§–ò–õ–¨–¢–† –¥–ª—è {signal.symbol}: –ü—Ä–æ–≤–µ—Ä–∫–∞ EMA({ema_period}). –¶–µ–Ω–∞={current_price:.2f}, EMA={last_ema:.2f}")
          if signal.signal_type == SignalType.BUY and current_price < last_ema:
            return False, f"–¶–µ–Ω–∞ –Ω–∏–∂–µ EMA({ema_period})"
          if signal.signal_type == SignalType.SELL and current_price > last_ema:
            return False, f"–¶–µ–Ω–∞ –≤—ã—à–µ EMA({ema_period})"

      # --- 2. –§–∏–ª—å—Ç—Ä —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ (ADX) ---
      if self.config.get('use_adx_filter'):
        adx_threshold = self.config.get('adx_threshold', 20)
        adx_data = ta.adx(data['high'], data['low'], data['close'], length=14)
        if adx_data is not None and not adx_data.empty:
          last_adx = adx_data.iloc[-1, 0]
          logger.info(f"–§–ò–õ–¨–¢–† –¥–ª—è {signal.symbol}: –ü—Ä–æ–≤–µ—Ä–∫–∞ ADX. ADX={last_adx:.2f}, –ü–æ—Ä–æ–≥={adx_threshold}")
          if last_adx < adx_threshold:
            return False, f"–°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ (ADX < {adx_threshold})"

      # --- –ù–û–í–´–ô –ë–õ–û–ö: –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–ª–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞ (Aroon) ---
      if self.config.get('use_aroon_filter', True):  # –î–æ–±–∞–≤–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–∞—Ç—å
        aroon_up_col = next((col for col in data.columns if 'AROONU' in col), None)
        aroon_down_col = next((col for col in data.columns if 'AROOND' in col), None)

        if aroon_up_col and aroon_down_col:
          last_aroon_up = data[aroon_up_col].iloc[-1]
          last_aroon_down = data[aroon_down_col].iloc[-1]
          logger.info(
            f"–§–ò–õ–¨–¢–† –¥–ª—è {signal.symbol}: –ü—Ä–æ–≤–µ—Ä–∫–∞ Aroon. Up={last_aroon_up:.2f}, Down={last_aroon_down:.2f}")

          if signal.signal_type == SignalType.BUY and (last_aroon_up < 70 or last_aroon_down > 30):
            return False, f"–°–ª–∞–±—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ Aroon (Up < 70 –∏–ª–∏ Down > 30)"
          if signal.signal_type == SignalType.SELL and (last_aroon_down < 70 or last_aroon_up > 30):
            return False, f"–°–ª–∞–±—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ Aroon (Down < 70 –∏–ª–∏ Up > 30)"

      # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

      if self.btc_trend_filter_enabled and signal.symbol != 'BTCUSDT':
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ BTC –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∂–∏–º–∞
        btc_data = await self.data_fetcher.get_historical_candles('BTCUSDT', Timeframe.ONE_HOUR, limit=100)
        if not btc_data.empty:
          btc_regime = await self.market_regime_detector.detect_regime('BTCUSDT', btc_data)
          if btc_regime:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º signal.signal_type –≤–º–µ—Å—Ç–æ signal.side
            is_sell_vs_up = signal.signal_type == SignalType.SELL and btc_regime.primary_regime in [
              MarketRegime.TREND_UP,
              MarketRegime.STRONG_TREND_UP]
            is_buy_vs_down = signal.signal_type == SignalType.BUY and btc_regime.primary_regime in [
              MarketRegime.TREND_DOWN,
              MarketRegime.STRONG_TREND_DOWN]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞ BTC
            if is_sell_vs_up or is_buy_vs_down:
              # –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
              correlation = self.correlation_manager.get_correlation_between(signal.symbol, 'BTCUSDT')

              # –û—Ç–∫–ª–æ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤—ã—Å–æ–∫–∞—è
              # if correlation is not None and correlation >= self.correlation_threshold:
              #   trend_direction = "–≤–æ—Å—Ö–æ–¥—è—â–µ–º" if is_sell_vs_up else "–Ω–∏—Å—Ö–æ–¥—è—â–µ–º"
              #   reason = f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: —Å–∏–≥–Ω–∞–ª {signal.signal_type.value}, –Ω–æ BTC –≤ {trend_direction} —Ç—Ä–µ–Ω–¥–µ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤—ã—Å–æ–∫–∞ ({correlation:.2f})"
              #   logger.warning(f"–§–ò–õ–¨–¢–† BTC: {reason}")
              #   return False, reason
              if correlation is not None and correlation >= 0.95:  # –ü–æ–≤—ã—Å–∏–ª–∏ –ø–æ—Ä–æ–≥ —Å 0.75
                # –ò –¥–∞–∂–µ —Ç–æ–≥–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
                if signal.confidence < 0.8:  # –¢–æ–ª—å–∫–æ –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                  return False, f"–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞ BTC (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è {correlation:.2f})"
              else:
                logger.info(
                  f"–§–ò–õ–¨–¢–† BTC: –°–∏–≥–Ω–∞–ª {signal.symbol} –ø—Ä–æ–ø—É—â–µ–Ω, —Ç.–∫. –∏–¥–µ—Ç –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞ BTC, –Ω–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –Ω–∏–∑–∫–∞—è ({correlation if correlation is not None else 'N/A'})")

      # --- 3. –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR) ---
      if self.config.get('use_volatility_filter'):
        max_atr_percentage = self.config.get('max_atr_percentage', 5.0) / 100

        # –î–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥
        if is_priority_symbol:
          max_atr_percentage *= 3.0  # –£—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
          logger.debug(f"–£–≤–µ–ª–∏—á–µ–Ω –ø–æ—Ä–æ–≥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {signal.symbol}: {max_atr_percentage * 100:.1f}%")

        atr_data = ta.atr(data['high'], data['low'], data['close'], length=14)
        if atr_data is not None and not atr_data.empty:
          last_atr = atr_data.iloc[-1]
          atr_percent = (last_atr / current_price)
          if atr_percent > max_atr_percentage:
            if not is_priority_symbol:  # –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
              return False, f"–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR={atr_percent:.2%})"
            else:
              logger.info(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª {signal.symbol}: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—ã—Å–æ–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")

      logger.info("–°–ò–ì–ù–ê–õ-–§–ò–õ–¨–¢–†: –°–∏–≥–Ω–∞–ª –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
      signal_logger.info(f"–§–ò–õ–¨–¢–†: –ü–†–û–ô–î–ï–ù.")
      return True, "–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã"

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –≤ SignalFilter: {e}", exc_info=True)
      return False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ñ–∏–ª—å—Ç—Ä–µ: {e}"