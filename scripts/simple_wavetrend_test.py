#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WaveTrend 3D –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
"""

import sys
import os
import numpy as np
import pandas as pd
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from ml.wavetrend_3d import WaveTrend3D
from ml.kernel_functions import KernelFunctions
from utils.logging_config import get_logger

logger = get_logger(__name__)


def generate_test_data(periods=500, trend_type='sine'):
  """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ"""
  dates = pd.date_range(end=datetime.now(), periods=periods, freq='5min')

  if trend_type == 'sine':
    # –°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
    trend = np.sin(np.linspace(0, 4 * np.pi, periods)) * 20 + 100
  elif trend_type == 'uptrend':
    # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏—è–º–∏
    trend = np.linspace(80, 120, periods) + np.sin(np.linspace(0, 8 * np.pi, periods)) * 5
  elif trend_type == 'downtrend':
    # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    trend = np.linspace(120, 80, periods) + np.sin(np.linspace(0, 8 * np.pi, periods)) * 5
  else:  # 'choppy'
    # –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫
    trend = 100 + np.random.normal(0, 5, periods).cumsum() * 0.1

  # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
  noise = np.random.normal(0, 0.5, periods)
  close = trend + noise

  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLC
  high = close + np.abs(np.random.normal(0, 1, periods))
  low = close - np.abs(np.random.normal(0, 1, periods))
  open_price = close + np.random.normal(0, 0.5, periods)

  # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ high/low –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
  high = np.maximum(high, np.maximum(close, open_price))
  low = np.minimum(low, np.minimum(close, open_price))

  volume = np.random.randint(10000, 100000, periods)

  return pd.DataFrame({
    'timestamp': dates,
    'open': open_price,
    'high': high,
    'low': low,
    'close': close,
    'volume': volume
  })


def test_kernel_functions():
  """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç kernel —Ñ—É–Ω–∫—Ü–∏–∏"""
  print("\n" + "=" * 50)
  print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kernel —Ñ—É–Ω–∫—Ü–∏–π")
  print("=" * 50)

  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
  data = np.sin(np.linspace(0, 4 * np.pi, 200)) * 10 + 100
  series = pd.Series(data)

  kernel = KernelFunctions()

  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ kernel
  kernels_to_test = [
    ('Gaussian', lambda: kernel.gaussian(series, lookback=10, start_at_bar=5)),
    ('Rational Quadratic', lambda: kernel.rational_quadratic(series, lookback=10, relative_weight=8.0, start_at_bar=5)),
    ('Periodic', lambda: kernel.periodic(series, lookback=10, period=50, start_at_bar=5)),
    ('Locally Periodic', lambda: kernel.locally_periodic(series, lookback=10, period=50, start_at_bar=5))
  ]

  for name, func in kernels_to_test:
    try:
      result = func()
      print(f"‚úÖ {name} kernel: OK (–≤—ã—á–∏—Å–ª–µ–Ω–æ {len(result)} –∑–Ω–∞—á–µ–Ω–∏–π)")
    except Exception as e:
      print(f"‚ùå {name} kernel: –û–®–ò–ë–ö–ê - {e}")


def test_wavetrend_basic():
  """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç WaveTrend 3D"""
  print("\n" + "=" * 50)
  print("–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç WaveTrend 3D")
  print("=" * 50)

  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ä—ã–Ω–∫–∞
  market_types = ['sine', 'uptrend', 'downtrend', 'choppy']

  wavetrend = WaveTrend3D({
    'oscillator_lookback': 20,
    'quadratic_mean_length': 50,
    'use_kernel_filter': True,
    'divergence_distance': 30
  })

  for market_type in market_types:
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {market_type} —Ä—ã–Ω–∫–µ...")

    data = generate_test_data(periods=300, trend_type=market_type)
    result = wavetrend.calculate(data, f'TEST_{market_type.upper()}')

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    oscillators = result['oscillators']
    signals = result['signals']
    divergences = result['divergences']

    print(f"  –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã:")
    print(f"    Fast (–ø–æ—Å–ª–µ–¥–Ω–µ–µ):   {oscillators['fast'].iloc[-1]:.4f}")
    print(f"    Normal (–ø–æ—Å–ª–µ–¥–Ω–µ–µ): {oscillators['normal'].iloc[-1]:.4f}")
    print(f"    Slow (–ø–æ—Å–ª–µ–¥–Ω–µ–µ):   {oscillators['slow'].iloc[-1]:.4f}")

    print(f"  –°–∏–≥–Ω–∞–ª—ã: {len(signals)}")
    for signal in signals[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–∏–≥–Ω–∞–ª–∞
      print(f"    - {signal.signal_type}: confidence={signal.confidence:.3f}")

    print(f"  –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏:")
    print(f"    –ë—ã—á—å–∏—Ö: {len(divergences['bullish'])}")
    print(f"    –ú–µ–¥–≤–µ–∂—å–∏—Ö: {len(divergences['bearish'])}")


def test_divergence_detection():
  """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
  print("\n" + "=" * 50)
  print("–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π")
  print("=" * 50)

  # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —è–≤–Ω–æ–π –±—ã—á—å–µ–π –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–µ–π
  periods = 200

  # –¶–µ–Ω–∞: –¥–≤–∞ –º–∏–Ω–∏–º—É–º–∞, –≤—Ç–æ—Ä–æ–π –Ω–∏–∂–µ –ø–µ—Ä–≤–æ–≥–æ
  price_wave1 = np.linspace(100, 90, periods // 4)
  price_flat1 = np.full(periods // 4, 90)
  price_wave2 = np.linspace(90, 85, periods // 4)  # –ù–æ–≤—ã–π –º–∏–Ω–∏–º—É–º
  price_recovery = np.linspace(85, 95, periods // 4)

  price = np.concatenate([price_wave1, price_flat1, price_wave2, price_recovery])

  dates = pd.date_range(end=datetime.now(), periods=periods, freq='5min')

  data = pd.DataFrame({
    'timestamp': dates,
    'open': price + np.random.normal(0, 0.2, periods),
    'high': price + np.abs(np.random.normal(0, 0.5, periods)),
    'low': price - np.abs(np.random.normal(0, 0.5, periods)),
    'close': price,
    'volume': np.random.randint(10000, 50000, periods)
  })

  # –¢–µ—Å—Ç–∏—Ä—É–µ–º
  wavetrend = WaveTrend3D({
    'divergence_distance': 50,
    'divergence_size_percent': 40
  })

  result = wavetrend.calculate(data, 'DIVERGENCE_TEST')
  divergences = result['divergences']

  print(f"–ù–∞–π–¥–µ–Ω–æ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π:")
  print(f"  –ë—ã—á—å–∏—Ö: {len(divergences['bullish'])}")
  print(f"  –ú–µ–¥–≤–µ–∂—å–∏—Ö: {len(divergences['bearish'])}")

  if divergences['bullish']:
    div = divergences['bullish'][0]
    print(f"\n–ü—Ä–∏–º–µ—Ä –±—ã—á—å–µ–π –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏:")
    print(f"  –¶–µ–Ω–∞: {div['prev_price']:.2f} -> {div['price']:.2f} (–ø–∞–¥–µ–Ω–∏–µ)")
    print(f"  –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä: {div['prev_oscillator']:.4f} -> {div['oscillator']:.4f} (—Ä–æ—Å—Ç)")


def test_performance():
  """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
  print("\n" + "=" * 50)
  print("–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
  print("=" * 50)

  import time

  wavetrend = WaveTrend3D()
  test_sizes = [100, 500, 1000, 2000]

  for size in test_sizes:
    data = generate_test_data(periods=size)

    start_time = time.time()
    result = wavetrend.calculate(data, 'PERF_TEST')
    end_time = time.time()

    execution_time = end_time - start_time
    per_bar_time = execution_time / size * 1000  # –º—Å –Ω–∞ –±–∞—Ä

    print(f"  {size} –±–∞—Ä–æ–≤: {execution_time:.3f} —Å–µ–∫ ({per_bar_time:.2f} –º—Å/–±–∞—Ä)")


def test_signal_types():
  """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
  print("\n" + "=" * 50)
  print("–¢–µ—Å—Ç —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤")
  print("=" * 50)

  # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∑–∫–∏–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
  periods = 300

  # V-–æ–±—Ä–∞–∑–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
  v_bottom = np.concatenate([
    np.linspace(100, 80, periods // 2),
    np.linspace(80, 100, periods // 2)
  ])

  dates = pd.date_range(end=datetime.now(), periods=periods, freq='5min')

  data = pd.DataFrame({
    'timestamp': dates,
    'open': v_bottom + np.random.normal(0, 0.3, periods),
    'high': v_bottom + np.abs(np.random.normal(0, 0.5, periods)),
    'low': v_bottom - np.abs(np.random.normal(0, 0.5, periods)),
    'close': v_bottom,
    'volume': np.random.randint(10000, 50000, periods)
  })

  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  configs = [
    {'speed_to_emphasize': 'Fast', 'name': 'Fast emphasis'},
    {'speed_to_emphasize': 'Normal', 'name': 'Normal emphasis'},
    {'speed_to_emphasize': 'Slow', 'name': 'Slow emphasis'}
  ]

  for config in configs:
    wavetrend = WaveTrend3D(config)
    result = wavetrend.calculate(data, 'SIGNAL_TEST')

    signals = result['signals']
    print(f"\n{config['name']}:")
    print(f"  –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    signal_types = {}
    for signal in signals:
      signal_types[signal.signal_type] = signal_types.get(signal.signal_type, 0) + 1

    for sig_type, count in signal_types.items():
      print(f"  {sig_type}: {count}")


def main():
  """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
  print("\n" + "=" * 60)
  print("WaveTrend 3D - –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ API")
  print("=" * 60)

  tests = [
    ("Kernel —Ñ—É–Ω–∫—Ü–∏–∏", test_kernel_functions),
    ("–ë–∞–∑–æ–≤—ã–π WaveTrend", test_wavetrend_basic),
    ("–î–µ—Ç–µ–∫—Ü–∏—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π", test_divergence_detection),
    ("–¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤", test_signal_types),
    ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance)
  ]

  print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:")
  for i, (name, _) in enumerate(tests, 1):
    print(f"{i}. {name}")
  print(f"{len(tests) + 1}. –í—Å–µ —Ç–µ—Å—Ç—ã")
  print("0. –í—ã—Ö–æ–¥")

  choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()

  if choice == '0':
    return
  elif choice == str(len(tests) + 1):
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    for name, test_func in tests:
      try:
        test_func()
      except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{name}': {e}")
  else:
    try:
      idx = int(choice) - 1
      if 0 <= idx < len(tests):
        tests[idx][1]()
      else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    except ValueError:
      print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

  print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
  main()