# dashboard.py

import streamlit as st
import pandas as pd
import subprocess
import os
import signal
import time
import asyncio
from contextlib import suppress

from data.database_manager import AdvancedDatabaseManager
from data.state_manager import StateManager
from config import settings
from config.config_manager import ConfigManager

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
  page_title="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º",
  page_icon="ü§ñ",
  layout="wide"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –¥–ª—è –≤—Å–µ—Ö
CONFIG_FILE_PATH = "config.json"
state_manager = StateManager()
db_manager = AdvancedDatabaseManager() # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ db_path –∑–∞–¥–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ
config_manager = ConfigManager(config_path=CONFIG_FILE_PATH)

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
# asyncio.run(state_manager.initialize_state())
# –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ò –°–û–ó–î–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• –¢–ê–ë–õ–ò–¶ (`trades` –∏ –¥—Ä.)
asyncio.run(db_manager._create_tables_if_not_exist())

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º ---
with st.sidebar:
  st.title("üïπÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º")

  if 'bot_process' not in st.session_state:
    st.session_state.bot_process = None

  if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç–∞", type="primary"):
    if st.session_state.bot_process and st.session_state.bot_process.poll() is None:
      st.warning("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
    else:
      try:
        st.session_state.bot_process = subprocess.Popen(['python', 'main.py'])
        st.success("–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        time.sleep(2)
        st.rerun()
      except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

  if st.button("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–æ—Ç–∞"):
    if st.session_state.bot_process and st.session_state.bot_process.poll() is None:
      try:
        st.session_state.bot_process.terminate()
        st.session_state.bot_process.wait(timeout=5)
        st.warning("–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        st.session_state.bot_process = None
        time.sleep(1)
        st.rerun()
      except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {e}")
    else:
      st.error("–ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –¥–∞—à–±–æ—Ä–¥.")
      state_manager.set_status('stopped')

  st.divider()
  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.rerun()

  st.divider()
  st.subheader("–î–µ–π—Å—Ç–≤–∏—è")
  if st.button("üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –º–æ–¥–µ–ª–∏"):
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª-—Å–∏–≥–Ω–∞–ª
    state_manager.set_command("generate_report")
    st.success(
      "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û—Ç—á–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'ml_models/performance_logs' –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã.")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –¥–∞—à–±–æ—Ä–¥–∞ ---
st.title("ü§ñ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
status = state_manager.get_status()
metrics = state_manager.get_metrics()
model_info = state_manager.get_model_info()
# –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run
# all_trades = asyncio.run(db_manager.get_all_trades(limit=1000))
# df_trades = pd.DataFrame(all_trades) if all_trades else pd.DataFrame()

# ++ –ù–û–í–´–ô –ò–°–¢–û–ß–ù–ò–ö –î–ê–ù–ù–´–• –î–õ–Ø –¢–ê–ë–õ–ò–¶–´ ++
# –ü–æ–ª—É—á–∞–µ–º –û–¢–ö–†–´–¢–´–ï –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
open_positions_list = state_manager.get_open_positions()
# –ü–æ–ª—É—á–∞–µ–º –ò–°–¢–û–†–ò–Æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ –ë–î
closed_trades_list = asyncio.run(db_manager.get_all_trades(limit=1000))

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
all_trades_to_display = open_positions_list + closed_trades_list
df_trades = pd.DataFrame(all_trades_to_display) if all_trades_to_display else pd.DataFrame()
open_positions_from_state = state_manager.get_open_positions() # <-- –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
closed_trades_from_db = asyncio.run(db_manager.get_all_closed_trades(limit=1000)) # <-- –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ

df_open = pd.DataFrame(open_positions_from_state) if open_positions_from_state else pd.DataFrame()
df_closed = pd.DataFrame(closed_trades_from_db) if closed_trades_from_db else pd.DataFrame()


# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –º–µ—Ç—Ä–∏–∫ ---
is_bot_running = st.session_state.bot_process and st.session_state.bot_process.poll() is None
if is_bot_running:
  st.success(f"üü¢ **–°—Ç–∞—Ç—É—Å: –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç** (PID: {st.session_state.bot_process.pid})")
else:
  st.error("üî¥ **–°—Ç–∞—Ç—É—Å: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**")

st.subheader("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
cols = st.columns(4)
if metrics:
  cols[0].metric("–û–±—â–∏–π –±–∞–ª–∞–Ω—Å USDT", f"{metrics.total_balance_usdt:.2f}")
  cols[1].metric("–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT", f"{metrics.available_balance_usdt:.2f}")
  cols[2].metric("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", f"{metrics.unrealized_pnl_total:.2f}")
  cols[3].metric("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", f"{metrics.realized_pnl_total:.2f}")

st.divider()

# --- –í–∫–ª–∞–¥–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö ---
view_tab, analysis_tab, statistic_tab, settings_tab = st.tabs(["üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "üìà –ê–Ω–∞–ª–∏–∑","üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"])

with view_tab:
  st.subheader("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
  if not df_open.empty:
    display_cols_open = ['open_timestamp', 'symbol', 'side', 'quantity', 'open_price']
    df_open_display = df_open[[col for col in display_cols_open if col in df_open.columns]].copy()
    if 'open_timestamp' in df_open_display.columns:
      df_open_display['open_timestamp'] = pd.to_datetime(df_open_display['open_timestamp']).dt.strftime(
        '%Y-%m-%d %H:%M:%S')
    st.dataframe(df_open_display, use_container_width=True)
  else:
    st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")

  st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫")
  if not df_closed.empty:
    display_cols_closed = ['close_timestamp', 'symbol', 'side', 'quantity', 'open_price', 'close_price', 'profit_loss']
    df_closed_display = df_closed[[col for col in display_cols_closed if col in df_closed.columns]].copy()
    if 'close_timestamp' in df_closed_display.columns:
      df_closed_display['close_timestamp'] = pd.to_datetime(df_closed_display['close_timestamp']).dt.strftime(
        '%Y-%m-%d %H:%M:%S')
    st.dataframe(df_closed_display, use_container_width=True, height=350)
  else:
    st.info("–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫.")

  st.subheader("–ö—Ä–∏–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
  if not df_trades.empty and 'profit_loss' in df_trades.columns and 'status' in df_trades.columns:
    closed_trades = df_trades[df_trades['status'] == 'CLOSED'].copy()
    if not closed_trades.empty and 'close_timestamp' in closed_trades.columns:
      closed_trades['timestamp'] = pd.to_datetime(closed_trades['close_timestamp'])
      closed_trades.sort_values('timestamp', inplace=True)
      closed_trades['cumulative_pnl'] = closed_trades['profit_loss'].cumsum()
      st.line_chart(closed_trades.set_index('timestamp')['cumulative_pnl'])
    else:
      st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

with analysis_tab:
  st.header("–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
  st.info(
    "–≠—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ –æ—Ç—á–µ—Ç—ã –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–æ–≤ –∏ —Ç.–¥.")
  # –°—é–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ offline_analysis.py
  # –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
  if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–æ—Ñ—Ñ–ª–∞–π–Ω)"):
    st.warning("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    st.divider()

with statistic_tab:
  with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"):
    col1, col2, col3 = st.columns(3)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    if hasattr(st.session_state, 'data_fetcher'):
      cache_stats = st.session_state.data_fetcher.get_cache_stats()
      with col1:
        st.metric("Cache Hit Rate", f"{cache_stats['hit_rate']:.1%}")
        st.metric("Total Requests", cache_stats['total_requests'])

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
    with col2:
      st.metric("DB Pool Size", "10 connections")
      st.metric("Active Queries", "N/A")  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API
    with col3:
      st.metric("API Requests/min", "50")
      st.metric("Avg Response Time", "N/A")


with settings_tab:
  st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–æ—Ç–∞")
  current_config = config_manager.load_config()

  with st.form("settings_form"):
    col1, col2 = st.columns(2)

    with col1:
      # ... (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ general_settings –∏ trade_settings)
      st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏")
      general_cfg = current_config.get('general_settings', {})
      trade_cfg = current_config.get('trade_settings', {})
      leverage = st.slider("–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ", 1, 100, value=int(trade_cfg.get('leverage', 10)), key='leverage')
      order_type = st.selectbox("–¢–∏–ø —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞", options=["percentage", "fixed"],
                                index=0 if trade_cfg.get('order_size_type') == 'percentage' else 1, key='order_type')
      order_value_label = f"–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ({'%' if order_type == 'percentage' else 'USDT'})"
      order_value = st.number_input(order_value_label, min_value=0.1,
                                    value=float(trade_cfg.get('order_size_value', 1.0)), key='order_value')
      min_order_value = st.number_input("–ú–∏–Ω. —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ (USDT)", min_value=1.0,
                                        value=float(trade_cfg.get('min_order_value_usdt', 5.5)), key='min_order_value')
      # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ô –í–ò–î–ñ–ï–¢ ---
      min_volume = st.number_input(
        "–ú–∏–Ω. —Å—É—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º (USDT)",
        min_value=100000,
        max_value=100000000,
        value=general_cfg.get('min_24h_volume_usdt', 1000000),
        step=100000,
        key='min_volume'
      )
      # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---
      st.write("---")
      mode = st.selectbox("–¢–∏–ø —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞", options=["dynamic", "static"],
                                index=0 if trade_cfg.get('symbol_selection_mode') == 'dynamic' else 1, key='mode')
      limit = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–ª—è dynamic)", min_value=1, max_value=500, value=general_cfg.get('dynamic_symbols_count', 20))
      static_list_str = st.text_area("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
                                     value=", ".join(general_cfg.get('static_symbol_list', [])))
      blacklist_str = st.text_area("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
                                   value=", ".join(general_cfg.get('symbol_blacklist', [])))
      interval = st.slider("–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Å–µ–∫)", 10, 300, value=general_cfg.get('monitoring_interval_seconds', 30))

    with col2:
      st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
      strategy_cfg = current_config.get('strategy_settings', {})
      confidence = st.slider("–ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞", 0.50, 1.0,
                             value=float(strategy_cfg.get('signal_confidence_threshold', 0.55)), step=0.01,
                             key='confidence')

      st.write("---")
      use_trend = st.checkbox("–§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É (EMA)", value=strategy_cfg.get('use_trend_filter', True),
                              key='use_trend')
      ema_period = st.number_input("–ü–µ—Ä–∏–æ–¥ EMA", min_value=10, max_value=500,
                                   value=int(strategy_cfg.get('ema_period', 200)), key='ema_period')

      st.write("---")
      use_adx = st.checkbox("–§–∏–ª—å—Ç—Ä —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ (ADX)", value=strategy_cfg.get('use_adx_filter', True), key='use_adx')
      adx_thresh = st.slider("–ü–æ—Ä–æ–≥ ADX", 10, 40, value=int(strategy_cfg.get('adx_threshold', 20)), key='adx_thresh')

      st.write("---")
      use_vol = st.checkbox("–§–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR)", value=strategy_cfg.get('use_volatility_filter', True),
                            key='use_vol')
      atr_pct = st.slider("–ú–∞–∫—Å. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR % –æ—Ç —Ü–µ–Ω—ã)", 1.0, 30.0,
                          value=float(strategy_cfg.get('max_atr_percentage', 5.0)), step=0.1, key='atr_pct')

      # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ô –í–ò–î–ñ–ï–¢ –ó–î–ï–°–¨ ---
      st.write("---")
      use_aroon = st.checkbox("–§–∏–ª—å—Ç—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ (Aroon)", value=strategy_cfg.get('use_aroon_filter', True),
                              key='use_aroon')
      # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

      use_psar = st.checkbox("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ –ø–æ Parabolic SAR", value=strategy_cfg.get('use_psar_exit', True),
                             key='use_psar')

      st.write("---")

      use_btc_filter = st.checkbox("–§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É BTC", value=strategy_cfg.get('use_btc_trend_filter', True),
                                   key='use_btc_filter')

      # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ô –í–ò–î–ñ–ï–¢ –ó–î–ï–°–¨ ---
      use_atr_ts = st.checkbox("–¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ø–æ ATR", value=strategy_cfg.get('use_atr_trailing_stop', True),
                               key='use_atr_ts')
      atr_ts_mult = st.number_input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å ATR –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞", min_value=0.5, max_value=10.0,
                                    value=float(strategy_cfg.get('atr_ts_multiplier', 1)), step=0.1,
                                    key='atr_ts_mult')
      # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---


      st.write("---")

      st.subheader("–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ SL/TP (–Ω–∞ –æ—Å–Ω–æ–≤–µ ATR)")
      # –Ø–í–ù–û –ü–†–ò–í–û–î–ò–ú VALUE –ö –¢–ò–ü–£ FLOAT
      sl_mult = st.number_input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å Stop-Loss", min_value=0.1, max_value=10.0,
                                value=float(strategy_cfg.get('sl_multiplier', 0.1)), step=0.1, key='sl_mult')
      tp_mult = st.number_input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å Take-Profit", min_value=0.1, max_value=10.0,
                                value=float(strategy_cfg.get('tp_multiplier', 2.5)), step=0.1, key='tp_mult')

      # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ï –í–ò–î–ñ–ï–¢–´ –ó–î–ï–°–¨ ---
      st.write("---")
      st.subheader("SL/TP –Ω–∞ –æ—Å–Ω–æ–≤–µ ROI (%)")
      roi_sl = st.number_input("Stop-Loss (% –æ—Ç –º–∞—Ä–∂–∏)", min_value=1.0, max_value=100.0,
                               value=float(trade_cfg.get('roi_stop_loss_pct', 5.0)), step=1.0, key='roi_sl')
      roi_tp = st.number_input("Take-Profit (% –æ—Ç –º–∞—Ä–∂–∏)", min_value=1.0, max_value=1000.0,
                               value=float(trade_cfg.get('roi_take_profit_pct', 60.0)), step=5.0, key='roi_tp')
      # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

      ltf_timeframe = st.selectbox(
        "–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –≤—Ö–æ–¥–∞ (LTF)",
        options=["1m", "5m", "15m"],
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        index=["1m", "5m", "15m"].index(strategy_cfg.get('ltf_entry_timeframe', '15m')),
        key='ltf_timeframe'
      )
      st.divider()



      # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã
      submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
      if submitted:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ,
        # –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ñ–æ—Ä–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, feature_weights)
        new_config = config_manager.load_config()
        new_config['trade_settings']= {

            "leverage": leverage,
            "order_size_type": order_type,
            "order_size_value": order_value,
            "min_order_value_usdt": min_order_value


          }
        new_config['strategy_settings'] = {
            "signal_confidence_threshold": confidence,
            "use_trend_filter": use_trend,
            "ema_period": ema_period,
            "use_adx_filter": use_adx,
            "adx_threshold": adx_thresh,
            "use_volatility_filter": use_vol,
            "max_atr_percentage": atr_pct,
            "use_aroon_filter": use_aroon,
            "use_psar_exit": use_psar,
            "use_btc_trend_filter": use_btc_filter,
            "use_atr_trailing_stop": use_atr_ts,
            "atr_ts_multiplier": atr_ts_mult,
            "sl_multiplier": sl_mult,
            "tp_multiplier": tp_mult,
            "roi_stop_loss_pct": roi_sl,
            "roi_take_profit_pct": roi_tp,
            "ltf_entry_timeframe": ltf_timeframe,
          }
        new_config['general_settings'] = {
            "symbol_selection_mode": mode,
            "dynamic_symbols_count": limit,
            "static_symbol_list": [s.strip().upper() for s in static_list_str.split(',') if s.strip()],
            "symbol_blacklist": [s.strip().upper() for s in blacklist_str.split(',') if s.strip()],
            "min_24h_volume_usdt": min_volume,
            "monitoring_interval_seconds": interval
          }
        new_config["feature_weights"]= {
          "price_to_ema_200_4h": 1.5,
          "volume_spike_ratio_4h": 1.5,
          "rsi_14_4h": 1.4,
          "vpt": 1.3,
          "price_to_ema_200_1d": 1.2,
          "rsi_14_1d": 1.1,
          "volume_spike_ratio_1d": 1.1,
          "ema_50": 1.1,
          "volatility_20": 1.1,
          "AROONOSC_14_1H": 1.2,
          "rsi_14_15m": 0.5,
          "price_to_ema_200_30m": 0.6
        }
        config_manager.save_config(new_config)
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")
