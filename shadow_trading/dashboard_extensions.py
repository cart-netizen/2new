# dashboard_extensions.py - –†–ê–°–®–ò–†–ï–ù–ò–Ø –î–õ–Ø DASHBOARD

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import asyncio
import json

from shadow_trading.shadow_trading_manager import ShadowTradingManager
from utils.logging_config import get_logger

logger = get_logger(__name__)


class ShadowTradingDashboard:
  """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Shadow Trading —Å dashboard - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""

  def __init__(self, shadow_manager: ShadowTradingManager):
    self.shadow_manager = shadow_manager

  def display_main_dashboard(self):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Shadow Trading dashboard"""

    st.header("üåü Shadow Trading Analytics")

    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
    col1, col2, col3 = st.columns([2, 2, 1])

    with col1:
      days = st.selectbox(
        "üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞",
        options=[1, 3, 7, 14, 30, 90],
        index=2,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π
        format_func=lambda x: f"{x} {'–¥–µ–Ω—å' if x == 1 else '–¥–Ω–µ–π'}"
      )

    with col2:
      analysis_type = st.selectbox(
        "üìä –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
        ["–û–±—â–∏–π –æ–±–∑–æ—Ä", "–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", "–ü–æ —Å–∏–º–≤–æ–ª–∞–º", "–ü–æ –≤—Ä–µ–º–µ–Ω–∏", "–§–∏–ª—å—Ç—Ä—ã"]
      )

    with col3:
      if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
        st.rerun()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    self._display_main_metrics(days)

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    if analysis_type == "–û–±—â–∏–π –æ–±–∑–æ—Ä":
      self._display_overall_analysis(days)
    elif analysis_type == "–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º":
      self._display_source_analysis(days)
    elif analysis_type == "–ü–æ —Å–∏–º–≤–æ–ª–∞–º":
      self._display_symbol_analysis(days)
    elif analysis_type == "–ü–æ –≤—Ä–µ–º–µ–Ω–∏":
      self._display_time_analysis(days)
    elif analysis_type == "–§–∏–ª—å—Ç—Ä—ã":
      self._display_filter_analysis(days)

  def _display_main_metrics(self, days: int):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    try:
      # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      overall_perf = self._get_data_sync(
        self.shadow_manager.performance_analyzer.get_overall_performance(days)
      )

      if 'error' in overall_perf:
        st.warning(f"‚ö†Ô∏è {overall_perf['error']}")
        return

      # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

      col1, col2, col3, col4, col5 = st.columns(5)

      with col1:
        win_rate = overall_perf.get('win_rate_pct', 0)
        color = "normal" if win_rate >= 60 else "inverse"
        st.metric(
          "üéØ Win Rate",
          f"{win_rate}%",
          delta=f"–∏–∑ {overall_perf.get('completed_signals', 0)} —Å–∏–≥–Ω–∞–ª–æ–≤",
          delta_color=color
        )

      with col2:
        profit_factor = overall_perf.get('profit_factor', 0)
        st.metric(
          "‚öñÔ∏è Profit Factor",
          f"{profit_factor}",
          delta="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫"
        )

      with col3:
        total_pnl = overall_perf.get('total_pnl_pct', 0)
        st.metric(
          "üí∞ –û–±—â–∏–π P&L",
          f"{total_pnl:+.2f}%",
          delta=f"–ó–∞ {days} –¥–Ω–µ–π"
        )

      with col4:
        total_signals = overall_perf.get('total_signals', 0)
        filtered_signals = overall_perf.get('filtered_signals', 0)
        filter_rate = (filtered_signals / total_signals * 100) if total_signals > 0 else 0
        st.metric(
          "üö´ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è",
          f"{filter_rate:.1f}%",
          delta=f"{filtered_signals} –∏–∑ {total_signals}"
        )

      with col5:
        completion_rate = overall_perf.get('completion_rate_pct', 0)
        st.metric(
          "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å",
          f"{completion_rate:.1f}%",
          delta="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
        )

    except Exception as e:
      st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
      logger.error(f"Dashboard –º–µ—Ç—Ä–∏–∫–∏: {e}")

  def _display_overall_analysis(self, days: int):
    """–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
      st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

      # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      overall_perf = self._get_data_sync(
        self.shadow_manager.performance_analyzer.get_overall_performance(days)
      )
      confidence_analysis = self._get_data_sync(
        self.shadow_manager.performance_analyzer.get_confidence_analysis(days)
      )

      col1, col2 = st.columns(2)

      with col1:
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'error' not in overall_perf:
          profitable = overall_perf.get('profitable_signals', 0)
          losses = overall_perf.get('loss_signals', 0)
          pending = overall_perf.get('total_signals', 0) - profitable - losses

          fig_pie = go.Figure(data=[go.Pie(
            labels=['–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ', '–£–±—ã—Ç–æ—á–Ω—ã–µ', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'],
            values=[profitable, losses, pending],
            hole=.3,
            marker_colors=['#2ecc71', '#e74c3c', '#f39c12']
          )])
          fig_pie.update_layout(
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º",
            height=400
          )
          st.plotly_chart(fig_pie, use_container_width=True)

      with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if 'error' not in confidence_analysis:
          conf_data = confidence_analysis.get('confidence_breakdown', [])
          if conf_data:
            df_conf = pd.DataFrame(conf_data)

            fig_conf = go.Figure()
            fig_conf.add_trace(go.Bar(
              x=df_conf['confidence_level'],
              y=df_conf['win_rate_pct'],
              name='Win Rate %',
              marker_color='#3498db'
            ))

            fig_conf.update_layout(
              title="Win Rate –ø–æ —É—Ä–æ–≤–Ω—è–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
              xaxis_title="–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
              yaxis_title="Win Rate (%)",
              height=400
            )
            st.plotly_chart(fig_conf, use_container_width=True)

      # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      st.subheader("üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

      col1, col2, col3 = st.columns(3)

      with col1:
        st.info(f"""
                **–≠–∫—Å–∫—É—Ä—Å–∏–∏ —Ü–µ–Ω—ã:**
                - –ú–∞–∫—Å. –≤ –ø–æ–ª—å–∑—É: {overall_perf.get('avg_max_favorable_pct', 0):.2f}%
                - –ú–∞–∫—Å. –ø—Ä–æ—Ç–∏–≤: {overall_perf.get('avg_max_adverse_pct', 0):.2f}%
                """)

      with col2:
        avg_win = overall_perf.get('avg_win_pct', 0)
        avg_loss = overall_perf.get('avg_loss_pct', 0)
        st.info(f"""
                **–°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
                - –ü—Ä–∏–±—ã–ª—å: +{avg_win:.2f}%
                - –£–±—ã—Ç–æ–∫: {avg_loss:.2f}%
                - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {abs(avg_win / avg_loss):.2f}x
                """)

      with col3:
        st.info(f"""
                **–ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤:**
                - –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {overall_perf.get('avg_confidence', 0):.3f}
                - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {confidence_analysis.get('optimal_threshold', 0.6):.2f}
                """)

    except Exception as e:
      st.error(f"–û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

  def _display_source_analysis(self, days: int):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
      st.subheader("üéØ –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤")

      source_perf = self._get_data_sync(
        self.shadow_manager.performance_analyzer.get_performance_by_source(days)
      )

      if not source_perf:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤")
        return

      # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      df_sources = pd.DataFrame(source_perf)

      # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
      df_display = df_sources.copy()
      df_display['total_pnl_pct'] = df_display['total_pnl_pct'].apply(lambda x: f"{x:+.2f}%")
      df_display['win_rate_pct'] = df_display['win_rate_pct'].apply(lambda x: f"{x:.1f}%")
      df_display['avg_win_pct'] = df_display['avg_win_pct'].apply(lambda x: f"+{x:.2f}%")
      df_display['avg_loss_pct'] = df_display['avg_loss_pct'].apply(lambda x: f"{x:.2f}%")

      st.dataframe(
        df_display.rename(columns={
          'source': '–ò—Å—Ç–æ—á–Ω–∏–∫',
          'total_signals': '–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤',
          'win_rate_pct': 'Win Rate',
          'total_pnl_pct': '–û–±—â–∏–π P&L',
          'profit_factor': 'Profit Factor',
          'avg_confidence': '–°—Ä. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å'
        }),
        use_container_width=True
      )

      # –ì—Ä–∞—Ñ–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      col1, col2 = st.columns(2)

      with col1:
        # –ì—Ä–∞—Ñ–∏–∫ Win Rate –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        fig_wr = px.bar(
          df_sources,
          x='source',
          y='win_rate_pct',
          title='Win Rate –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º',
          color='win_rate_pct',
          color_continuous_scale='RdYlGn'
        )
        fig_wr.update_layout(height=400)
        st.plotly_chart(fig_wr, use_container_width=True)

      with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–≥–æ P&L
        fig_pnl = px.bar(
          df_sources,
          x='source',
          y='total_pnl_pct',
          title='–û–±—â–∏–π P&L –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º',
          color='total_pnl_pct',
          color_continuous_scale='RdYlGn'
        )
        fig_pnl.update_layout(height=400)
        st.plotly_chart(fig_pnl, use_container_width=True)

      # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
      best_source = max(source_perf, key=lambda x: x['win_rate_pct'])
      worst_source = min(source_perf, key=lambda x: x['win_rate_pct'])

      st.info(f"""
            **üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
            - –õ—É—á—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: **{best_source['source']}** (Win Rate: {best_source['win_rate_pct']:.1f}%)
            - –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è: **{worst_source['source']}** (Win Rate: {worst_source['win_rate_pct']:.1f}%)
            """)

    except Exception as e:
      st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")

  def _display_symbol_analysis(self, days: int):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º"""
    try:
      st.subheader("üíé –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º")

      symbol_perf = self._get_data_sync(
        self.shadow_manager.performance_analyzer.get_symbol_performance(days)
      )

      if not symbol_perf:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–º–≤–æ–ª–∞–º (–º–∏–Ω–∏–º—É–º 3 —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ —Å–∏–º–≤–æ–ª)")
        return

      df_symbols = pd.DataFrame(symbol_perf)

      # –¢–æ–ø –∏ —Ö—É–¥—à–∏–µ —Å–∏–º–≤–æ–ª—ã
      col1, col2 = st.columns(2)

      with col1:
        st.write("üèÜ **–¢–æ–ø —Å–∏–º–≤–æ–ª—ã –ø–æ P&L:**")
        top_symbols = df_symbols.head(10)
        for _, row in top_symbols.iterrows():
          delta_color = "normal" if row['total_pnl_pct'] > 0 else "inverse"
          st.metric(
            row['symbol'],
            f"{row['total_pnl_pct']:+.2f}%",
            delta=f"WR: {row['win_rate_pct']:.1f}% ({row['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤)"
          )

      with col2:
        st.write("‚ö†Ô∏è **–°–∏–º–≤–æ–ª—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è:**")
        poor_symbols = df_symbols[df_symbols['win_rate_pct'] < 50].head(5)
        if not poor_symbols.empty:
          for _, row in poor_symbols.iterrows():
            st.metric(
              row['symbol'],
              f"{row['win_rate_pct']:.1f}%",
              delta=f"P&L: {row['total_pnl_pct']:+.2f}% ({row['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤)",
              delta_color="inverse"
            )
        else:
          st.success("–í—Å–µ —Å–∏–º–≤–æ–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∏–µ–º–ª–µ–º—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")

      # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
      st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º")

      # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      sort_by = st.selectbox(
        "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:",
        ["total_pnl_pct", "win_rate_pct", "total_signals", "profit_factor"],
        format_func=lambda x: {
          "total_pnl_pct": "–û–±—â–∏–π P&L",
          "win_rate_pct": "Win Rate",
          "total_signals": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤",
          "profit_factor": "Profit Factor"
        }[x]
      )

      df_sorted = df_symbols.sort_values(sort_by, ascending=False)

      # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      df_display = df_sorted.copy()
      df_display['total_pnl_pct'] = df_display['total_pnl_pct'].apply(lambda x: f"{x:+.2f}%")
      df_display['win_rate_pct'] = df_display['win_rate_pct'].apply(lambda x: f"{x:.1f}%")

      st.dataframe(
        df_display.rename(columns={
          'symbol': '–°–∏–º–≤–æ–ª',
          'total_signals': '–°–∏–≥–Ω–∞–ª–æ–≤',
          'win_rate_pct': 'Win Rate',
          'total_pnl_pct': 'P&L',
          'profit_factor': 'PF'
        })[['–°–∏–º–≤–æ–ª', '–°–∏–≥–Ω–∞–ª–æ–≤', 'Win Rate', 'P&L', 'PF']],
        use_container_width=True
      )

    except Exception as e:
      st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")

  def _display_time_analysis(self, days: int):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
      st.subheader("‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑")

      hourly_perf = self._get_data_sync(
        self.shadow_manager.performance_analyzer.get_hourly_performance(days)
      )

      if not hourly_perf:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        return

      # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
      hours = list(range(24))
      win_rates = []
      signal_counts = []
      avg_returns = []

      for hour in hours:
        if hour in hourly_perf:
          win_rates.append(hourly_perf[hour]['win_rate_pct'])
          signal_counts.append(hourly_perf[hour]['total_signals'])
          avg_returns.append(hourly_perf[hour]['avg_return_pct'])
        else:
          win_rates.append(0)
          signal_counts.append(0)
          avg_returns.append(0)

      # –ì—Ä–∞—Ñ–∏–∫ Win Rate –ø–æ —á–∞—Å–∞–º
      fig_time = make_subplots(
        rows=2, cols=1,
        subplot_titles=('Win Rate –ø–æ —á–∞—Å–∞–º', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —á–∞—Å–∞–º'),
        vertical_spacing=0.1
      )

      # Win Rate
      fig_time.add_trace(
        go.Scatter(
          x=hours,
          y=win_rates,
          mode='lines+markers',
          name='Win Rate %',
          line=dict(color='#2ecc71', width=3),
          marker=dict(size=8)
        ),
        row=1, col=1
      )

      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
      fig_time.add_trace(
        go.Bar(
          x=hours,
          y=signal_counts,
          name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤',
          marker_color='#3498db',
          opacity=0.7
        ),
        row=2, col=1
      )

      fig_time.update_layout(
        height=600,
        title_text="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º —Å—É—Ç–æ–∫ (UTC)",
        showlegend=False
      )

      fig_time.update_xaxes(title_text="–ß–∞—Å (UTC)", row=2, col=1)
      fig_time.update_yaxes(title_text="Win Rate (%)", row=1, col=1)
      fig_time.update_yaxes(title_text="–°–∏–≥–Ω–∞–ª–æ–≤", row=2, col=1)

      st.plotly_chart(fig_time, use_container_width=True)

      # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      col1, col2, col3 = st.columns(3)

      # –õ—É—á—à–∏–π —á–∞—Å
      best_hour_data = max(
        [(h, hourly_perf[h]) for h in hourly_perf.keys()],
        key=lambda x: x[1]['win_rate_pct']
      )
      best_hour, best_data = best_hour_data

      with col1:
        st.metric(
          "üïê –õ—É—á—à–∏–π —á–∞—Å",
          f"{best_hour:02d}:00 UTC",
          delta=f"WR: {best_data['win_rate_pct']:.1f}%"
        )

      # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å
      most_active_hour_data = max(
        [(h, hourly_perf[h]) for h in hourly_perf.keys()],
        key=lambda x: x[1]['total_signals']
      )
      active_hour, active_data = most_active_hour_data

      with col2:
        st.metric(
          "üìà –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å",
          f"{active_hour:02d}:00 UTC",
          delta=f"{active_data['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤"
        )

      # –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç
      avg_hourly_return = np.mean([data['avg_return_pct'] for data in hourly_perf.values()])

      with col3:
        st.metric(
          "üìä –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç",
          f"{avg_hourly_return:+.2f}%",
          delta="–ó–∞ —á–∞—Å"
        )

    except Exception as e:
      st.error(f"–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

  def _display_filter_analysis(self, days: int):
    """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
      st.subheader("üö´ –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

      filter_analysis = self._get_data_sync(
        self.shadow_manager.performance_analyzer.get_filter_analysis(days)
      )

      if 'error' in filter_analysis:
        st.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {filter_analysis['error']}")
        return

      # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      col1, col2, col3 = st.columns(3)

      with col1:
        st.metric(
          "üö´ –í—Å–µ–≥–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ",
          filter_analysis.get('total_filtered', 0),
          delta="—Å–∏–≥–Ω–∞–ª–æ–≤"
        )

      with col2:
        st.metric(
          "üí∏ –£–ø—É—â–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
          filter_analysis.get('missed_opportunities', 0),
          delta=f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {filter_analysis.get('avg_missed_profit_pct', 0):+.2f}%"
        )

      with col3:
        st.metric(
          "üìâ –û–±—â–∞—è —É–ø—É—â–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å",
          f"{filter_analysis.get('total_missed_profit_pct', 0):+.2f}%",
          delta="–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è"
        )

      # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      filter_breakdown = filter_analysis.get('filter_breakdown', [])
      if filter_breakdown:
        df_filters = pd.DataFrame(filter_breakdown)

        fig_filters = px.pie(
          df_filters,
          values='count',
          names='reason',
          title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'
        )
        fig_filters.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig_filters, use_container_width=True)

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        st.subheader("üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º")

        df_display = df_filters.copy()
        total_filtered = df_display['count'].sum()
        df_display['percentage'] = (df_display['count'] / total_filtered * 100).round(1)

        st.dataframe(
          df_display.rename(columns={
            'reason': '–ü—Ä–∏—á–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏',
            'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            'percentage': '–ü—Ä–æ—Ü–µ–Ω—Ç'
          }),
          use_container_width=True
        )

      # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
      recommendations = self._get_data_sync(
        self.shadow_manager.performance_analyzer.generate_optimization_recommendations(days)
      )

      if 'error' not in recommendations:
        st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

        high_priority = [r for r in recommendations.get('recommendations', []) if r['priority'] == 'high']
        medium_priority = [r for r in recommendations.get('recommendations', []) if r['priority'] == 'medium']

        if high_priority:
          st.error("üî¥ **–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:**")
          for rec in high_priority:
            st.write(f"- {rec['message']}")
            st.write(f"  üí° *{rec['suggested_action']}*")

        if medium_priority:
          st.warning("üü° **–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:**")
          for rec in medium_priority:
            st.write(f"- {rec['message']}")
            st.write(f"  üí° *{rec['suggested_action']}*")

        if not high_priority and not medium_priority:
          st.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ!")

    except Exception as e:
      st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

  def _get_data_sync(self, coroutine):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    try:
      loop = asyncio.new_event_loop()
      asyncio.set_event_loop(loop)
      result = loop.run_until_complete(coroutine)
      loop.close()
      return result
    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
      return {'error': str(e)}

  def create_performance_summary(self, days: int = 7) -> str:
    """–°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è main dashboard"""
    try:
      overall_perf = self._get_data_sync(
        self.shadow_manager.performance_analyzer.get_overall_performance(days)
      )

      source_perf = self._get_data_sync(
        self.shadow_manager.performance_analyzer.get_performance_by_source(days)
      )

      if 'error' in overall_perf:
        return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Shadow Trading –∑–∞ {days} –¥–Ω–µ–π"

      # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
      summary_lines = [
        f"üìä **Shadow Trading –∑–∞ {days} –¥–Ω–µ–π:**",
        f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤: {overall_perf['total_signals']} (–∑–∞–≤–µ—Ä—à–µ–Ω–æ: {overall_perf['completed_signals']})",
        f"‚úÖ Win Rate: {overall_perf['win_rate_pct']}%",
        f"üí∞ –û–±—â–∏–π P&L: {overall_perf['total_pnl_pct']:+.2f}%",
        f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: +{overall_perf['avg_win_pct']}%",
        f"üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {overall_perf['avg_loss_pct']}%",
        f"‚öñÔ∏è Profit Factor: {overall_perf['profit_factor']}",
        ""
      ]

      # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      if source_perf:
        summary_lines.append("üèÜ **–õ—É—á—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:**")
        for source in source_perf[:3]:
          summary_lines.append(
            f"  ‚Ä¢ {source['source']}: {source['win_rate_pct']}% "
            f"({source['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤, P&L: {source['total_pnl_pct']:+.1f}%)"
          )

      return "\n".join(summary_lines)

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è dashboard: {e}")
      return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Shadow Trading: {e}"


# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í –û–°–ù–û–í–ù–û–ô DASHBOARD

def add_shadow_trading_section():
  """–î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é Shadow Trading –≤ –æ—Å–Ω–æ–≤–Ω–æ–π dashboard"""

  st.markdown("---")
  st.header("üåü Shadow Trading Analytics")

  with st.expander("üìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ Shadow Trading", expanded=True):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ shadow_trading_manager
    # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ session_state –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    if 'shadow_manager' in st.session_state:
      dashboard = ShadowTradingDashboard(st.session_state.shadow_manager)
      summary = dashboard.create_performance_summary(7)
      st.markdown(summary)
    else:
      st.info("üîÑ Shadow Trading —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ–º—É dashboard
  if st.button("üîç –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Shadow Trading", use_container_width=True):
    st.session_state.page = "shadow_trading"
    st.rerun()


def display_full_shadow_dashboard():
  """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ Shadow Trading dashboard"""

  if 'shadow_manager' not in st.session_state:
    st.error("Shadow Trading —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return

  dashboard = ShadowTradingDashboard(st.session_state.shadow_manager)
  dashboard.display_main_dashboard()


# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í MAIN.PY

def setup_shadow_dashboard_integration(shadow_manager: ShadowTradingManager):
  """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ dashboard —Å Shadow Trading"""

  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ shadow_manager –≤ session_state –¥–ª—è dashboard
  if 'shadow_manager' not in st.session_state:
    st.session_state.shadow_manager = shadow_manager
    logger.info("‚úÖ Shadow Trading dashboard –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")