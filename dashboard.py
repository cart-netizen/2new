# dashboard.py
import sys

import numpy as np
import psutil
import streamlit as st
import pandas as pd
import subprocess
import os
import signal
import time
import asyncio
from contextlib import suppress
import json
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta


# from shadow_trading.dashboard_extensions import (
#     add_shadow_trading_section,
#     display_full_shadow_dashboard,
#     setup_shadow_dashboard_integration
# )
from data.database_manager import AdvancedDatabaseManager
from data.state_manager import StateManager
from config import settings
from config.config_manager import ConfigManager
from streamlit_autorefresh import st_autorefresh


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
  page_title="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º",
  page_icon="ü§ñ",
  layout="wide"
)
# st_autorefresh(interval=5000, key="data_refresher")

@st.cache_resource
def get_config_manager():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ConfigManager."""
    return ConfigManager()

@st.cache_resource
def get_state_manager():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä StateManager."""
    return StateManager()

@st.cache_resource
def get_db_manager():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä AdvancedDatabaseManager."""
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –∑–¥–µ—Å—å –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
    return AdvancedDatabaseManager(settings.DATABASE_PATH)
@st.cache_resource
def get_shadow_trading_initialized():
    """–ö—ç—à–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Shadow Trading."""
    return initialize_shadow_trading()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ---
CONFIG_FILE_PATH = "config.json"
config_manager = ConfigManager()
state_manager = StateManager()
db_manager = AdvancedDatabaseManager(settings.DATABASE_PATH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
asyncio.run(db_manager._create_tables_if_not_exist())


def initialize_shadow_trading():
  """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Shadow Trading —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∞—à–±–æ—Ä–¥–∞"""
  try:
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã Shadow Trading —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    logger_query = "SELECT name FROM sqlite_master WHERE type='table' AND name='signal_analysis'"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ signal_analysis
    check_result = db_manager.execute_sync(logger_query)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    create_signal_analysis_query = """
          CREATE TABLE IF NOT EXISTS signal_analysis (
              signal_id TEXT PRIMARY KEY,
              symbol TEXT NOT NULL,
              signal_type TEXT NOT NULL,
              entry_price REAL NOT NULL,
              entry_time TIMESTAMP NOT NULL,
              confidence REAL NOT NULL,
              source TEXT NOT NULL,

              indicators_triggered TEXT,  -- JSON array
              ml_prediction_data TEXT,    -- JSON object
              market_regime TEXT,
              volatility_level TEXT,

              was_filtered BOOLEAN DEFAULT FALSE,
              filter_reasons TEXT,        -- JSON array

              outcome TEXT DEFAULT 'pending',
              exit_price REAL,
              exit_time TIMESTAMP,
              profit_loss_pct REAL,
              profit_loss_usdt REAL,

              max_favorable_excursion_pct REAL DEFAULT 0.0,
              max_adverse_excursion_pct REAL DEFAULT 0.0,
              time_to_target_seconds INTEGER,
              time_to_max_profit_seconds INTEGER,

              volume_at_signal REAL DEFAULT 0.0,
              price_action_score REAL DEFAULT 0.0,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          )
      """

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω
    create_price_tracking_query = """
          CREATE TABLE IF NOT EXISTS price_tracking (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              signal_id TEXT NOT NULL,
              symbol TEXT NOT NULL,
              price REAL NOT NULL,
              timestamp TIMESTAMP NOT NULL,
              minutes_elapsed INTEGER NOT NULL,
              FOREIGN KEY (signal_id) REFERENCES signal_analysis (signal_id)
          )
      """

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    db_manager.execute_sync(create_signal_analysis_query)
    db_manager.execute_sync(create_price_tracking_query)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    db_manager.execute_sync("CREATE INDEX IF NOT EXISTS idx_signal_symbol ON signal_analysis(symbol)")
    db_manager.execute_sync("CREATE INDEX IF NOT EXISTS idx_signal_entry_time ON signal_analysis(entry_time)")
    db_manager.execute_sync("CREATE INDEX IF NOT EXISTS idx_signal_outcome ON signal_analysis(outcome)")
    db_manager.execute_sync("CREATE INDEX IF NOT EXISTS idx_price_tracking_signal ON price_tracking(signal_id)")

    print("‚úÖ Shadow Trading –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return True

  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Shadow Trading: {e}")
    return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Shadow Trading –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∞—à–±–æ—Ä–¥–∞
get_shadow_trading_initialized()

# --- –°—Ç–∞—Ç—É—Å –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ---
if 'bot_process' not in st.session_state:
    st.session_state.bot_process = None

# is_bot_running = st.session_state.bot_process and st.session_state.bot_process.poll() is None

def get_shadow_trading_today_stats() -> dict:
  """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Shadow Trading –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
  try:
    query = """
            SELECT 
                COUNT(*) as today_signals,
                COUNT(CASE WHEN outcome = 'profitable' THEN 1 END) as today_profitable
            FROM signal_analysis 
            WHERE entry_time >= datetime('now', '-1 day')
        """

    result = db_manager.execute_sync(query)
    if result:
      # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ SQLite –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø—Ä—è–º—É—é
      import sqlite3
      with sqlite3.connect(db_manager.db_path) as conn:
        cursor = conn.execute(query)
        row = cursor.fetchone()
        if row:
          return {
            'today_signals': row[0] or 0,
            'today_profitable': row[1] or 0
          }

    return {'today_signals': 0, 'today_profitable': 0}

  except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
    return {'today_signals': 0, 'today_profitable': 0}


def get_shadow_trading_stats(days: int = 7) -> dict:
  """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Shadow Trading"""
  try:
    cutoff_date = datetime.now() - timedelta(days=days)

    query = """
            SELECT 
                COUNT(*) as total_signals,
                COUNT(CASE WHEN outcome = 'profitable' THEN 1 END) as profitable_signals,
                COUNT(CASE WHEN outcome = 'loss' THEN 1 END) as loss_signals,
                COUNT(CASE WHEN was_filtered = 1 THEN 1 END) as filtered_signals,
                AVG(CASE WHEN outcome = 'profitable' THEN profit_loss_pct END) as avg_win_pct,
                AVG(CASE WHEN outcome = 'loss' THEN profit_loss_pct END) as avg_loss_pct,
                AVG(confidence) as avg_confidence
            FROM signal_analysis 
            WHERE entry_time >= ?
        """

    import sqlite3
    with sqlite3.connect(db_manager.db_path) as conn:
      cursor = conn.execute(query, (cutoff_date,))
      row = cursor.fetchone()

      if row:
        return {
          'total_signals': row[0] or 0,
          'profitable_signals': row[1] or 0,
          'loss_signals': row[2] or 0,
          'filtered_signals': row[3] or 0,
          'avg_win_pct': row[4] or 0.0,
          'avg_loss_pct': row[5] or 0.0,
          'avg_confidence': row[6] or 0.0
        }

    return {
      'total_signals': 0, 'profitable_signals': 0, 'loss_signals': 0,
      'filtered_signals': 0, 'avg_win_pct': 0.0, 'avg_loss_pct': 0.0, 'avg_confidence': 0.0
    }

  except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Shadow Trading: {e}")
    return {
      'total_signals': 0, 'profitable_signals': 0, 'loss_signals': 0,
      'filtered_signals': 0, 'avg_win_pct': 0.0, 'avg_loss_pct': 0.0, 'avg_confidence': 0.0
    }

async def get_shadow_trading_stats_async(days: int = 7) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Shadow Trading —á–µ—Ä–µ–∑ SignalTracker"""
    try:
      # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SignalTracker –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–≥–æ –º–µ—Ç–æ–¥–∞
      from shadow_trading.signal_tracker import SignalTracker

      # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SignalTracker
      signal_tracker = SignalTracker(db_manager)

      # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      await signal_tracker.ensure_tables_exist()

      # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ SignalTracker
      stats = await signal_tracker.get_signal_statistics(days)

      if stats:
        return stats
      else:
        # Fallback –∫ –ø—Ä—è–º–æ–º—É –∑–∞–ø—Ä–æ—Å—É –µ—Å–ª–∏ SignalTracker –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö
        return get_shadow_trading_stats(days)

    except Exception as e:
      print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Shadow Trading: {e}")
      # Fallback –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É
      return get_shadow_trading_stats(days)


# –î–û–ë–ê–í–ò–¢–¨ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:

def get_enhanced_shadow_stats(days: int = 7) -> dict:
  """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Shadow Trading"""
  try:
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    base_stats = asyncio.run(get_shadow_trading_stats_async(days))

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ get_signal_statistics
    enhanced_stats = base_stats.copy()
    enhanced_stats.update({
      'max_win_pct': base_stats.get('max_win_pct', 0.0),
      'max_loss_pct': base_stats.get('max_loss_pct', 0.0),
      'win_rate': base_stats.get('win_rate', 0.0)
    })

    return enhanced_stats

  except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    return get_shadow_trading_stats(days)

# --- –§–£–ù–ö–¶–ò–ò SHADOW TRADING (–ë–ï–ó –ò–ú–ü–û–†–¢–ê –ö–õ–ê–°–°–û–í) ---

def create_shadow_trading_summary(days: int = 7) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É Shadow Trading —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    try:
      stats = get_enhanced_shadow_stats(days)

      if stats['total_signals'] == 0:
        return f"üìä Shadow Trading (–∑–∞ {days} –¥–Ω–µ–π): –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–≥–Ω–∞–ª–∞—Ö"

      win_rate = stats.get('win_rate', 0.0)
      filter_rate = (stats['filtered_signals'] / stats['total_signals']) * 100 if stats['total_signals'] > 0 else 0
      max_win = stats.get('max_win_pct', 0.0)
      max_loss = stats.get('max_loss_pct', 0.0)

      summary = f"""
üìä **Shadow Trading –∑–∞ {days} –¥–Ω–µ–π:**
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats['profitable_signals']} ({win_rate:.1f}%)
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {stats['loss_signals']}
‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {stats['filtered_signals']} ({filter_rate:.1f}%)
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {stats['avg_win_pct']:.2f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {stats['avg_loss_pct']:.2f}%
‚Ä¢ –õ—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª: +{max_win:.2f}%
‚Ä¢ –•—É–¥—à–∏–π —Å–∏–≥–Ω–∞–ª: {max_loss:.2f}%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats['avg_confidence']:.2f}
        """

      return summary.strip()

    except Exception as e:
      return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ Shadow Trading: {e}"


def add_shadow_trading_section():
  """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–∫—Ü–∏—é Shadow Trading –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞—Å—Å–æ–≤"""

  st.markdown("---")
  st.header("üåü Shadow Trading Analytics")

  with st.expander("üìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ Shadow Trading", expanded=True):
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    col1, col2 = st.columns([2, 1])

    with col1:
      days = st.selectbox(
        "üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞",
        options=[1, 3, 7, 14, 30],
        index=2,  # 7 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        key="shadow_period"
      )

    with col2:
      if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å Shadow", use_container_width=True):
        st.rerun()

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–¥–∫—É
    summary = create_shadow_trading_summary(days)
    st.markdown(summary)

    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    try:
      cutoff_date = datetime.now() - timedelta(days=days)
      source_query = """
                SELECT 
                    source,
                    COUNT(*) as total_signals,
                    COUNT(CASE WHEN outcome = 'profitable' THEN 1 END) as profitable_signals
                FROM signal_analysis 
                WHERE entry_time >= ?
                GROUP BY source
                ORDER BY COUNT(*) DESC
                LIMIT 5
            """

      source_results = asyncio.run(db_manager._execute(source_query, (cutoff_date,), fetch='all'))

      if source_results:
        st.markdown("**üèÜ –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:**")
        for row in source_results:
          total = row['total_signals']
          profitable = row['profitable_signals'] or 0
          win_rate = (profitable / total * 100) if total > 0 else 0
          st.markdown(f"‚Ä¢ {row['source']}: {win_rate:.1f}% WR ({total} —Å–∏–≥–Ω–∞–ª–æ–≤)")

    except Exception as source_error:
      st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


def display_simple_shadow_metrics():
  """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ Shadow Trading"""
  try:
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    today_query = """
            SELECT 
                COUNT(*) as today_signals,
                COUNT(CASE WHEN outcome = 'profitable' THEN 1 END) as today_profitable
            FROM signal_analysis 
            WHERE entry_time >= datetime('now', '-1 day')
        """

    today_result = asyncio.run(db_manager._execute(today_query, (), fetch='one'))

    if today_result and today_result['today_signals'] > 0:
      today_total = today_result['today_signals']
      today_profitable = today_result['today_profitable'] or 0
      today_wr = (today_profitable / today_total * 100) if today_total > 0 else 0

      col1, col2, col3 = st.columns(3)

      with col1:
        st.metric("üìä –°–∏–≥–Ω–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è", today_total)

      with col2:
        st.metric("‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö", today_profitable)

      with col3:
        st.metric("üéØ Win Rate", f"{today_wr:.1f}%")
    else:
      st.info("üîÑ –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

  except Exception as e:
    st.warning(f"–ú–µ—Ç—Ä–∏–∫–∏ Shadow Trading –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

# def get_bot_pid():
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞"""
#     try:
#       result = subprocess.run(['pgrep', '-f', 'main.py'], capture_output=True, text=True)
#       if result.returncode == 0 and result.stdout.strip():
#         return int(result.stdout.strip().split('\n')[0])
#     except:
#       pass
#     return None
def get_bot_pid():
  """–ß–∏—Ç–∞–µ—Ç PID –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
  status = state_manager.get_status()
  if status and status.get('status') == 'running':
    return status.get('pid')
  return None

def is_bot_run():
  """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –ø–æ PID –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
  try:
    status = state_manager.get_status()
    if status and status.get('status') == 'running':
      pid = status.get('pid')
      if pid and psutil.pid_exists(pid):
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å
        try:
          process = psutil.Process(pid)
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Å–≤—è–∑–∞–Ω —Å Python –∏ main.py
          cmdline = process.cmdline()
          if cmdline and any('main.py' in arg for arg in cmdline):
            return True
        except (psutil.NoSuchProcess, psutil.AccessDenied):
          pass
    return False
  except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}")
    return False


def start_bot():
  """–ó–∞–ø—É—Å–∫–∞–µ—Ç main.py –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ PID."""
  if is_bot_run():
    st.toast("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
    return

  try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Popen –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if sys.platform == 'win32':
      bot_process = subprocess.Popen(
        [sys.executable, "main.py"],
        creationflags=subprocess.CREATE_NEW_PROCESS_GROUP
      )
    else:
      bot_process = subprocess.Popen([sys.executable, "main.py"])

    pid = bot_process.pid

    st.session_state.bot_process = bot_process

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –≤ —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_manager.set_status('running', pid)
    st.toast(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å PID: {pid}")

  except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


def stop_bot():
  """–ù–∞—Ö–æ–¥–∏—Ç –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞."""
  pid = get_bot_pid()
  if not pid or not is_bot_run():
    st.toast("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
    state_manager.set_status('stopped', None)
    st.session_state.bot_process = None
    return

  try:
    if sys.platform == 'win32':
      # Windows
      subprocess.run(
        ["taskkill", "/F", "/T", "/PID", str(pid)],
        check=True, capture_output=True
      )
    else:
      # Linux/Mac
      parent = psutil.Process(pid)
      for child in parent.children(recursive=True):
        child.kill()
      parent.kill()

    st.toast(f"‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (PID: {pid})")

  except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
  finally:
    state_manager.set_status('stopped', None)


def get_recent_trades():
  """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"""
  try:
    return asyncio.run(db_manager.get_all_trades(10))
  except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
    return []


def get_trading_stats():
  """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
  try:
    return asyncio.run(db_manager.get_trading_metrics_optimized(30))
  except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    return {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_bot_instance():
  """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω"""
  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –±–æ—Ç
  # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ shared memory, pickle —Ñ–∞–π–ª –∏–ª–∏ –¥—Ä—É–≥–æ–π IPC –º–µ—Ö–∞–Ω–∏–∑–º
  return None




def update_ml_models_state(use_enhanced: bool, use_base: bool):
  """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ StateManager"""
  ml_state = {
    'use_enhanced_ml': use_enhanced,
    'use_base_ml': use_base,
    'updated_at': datetime.now().isoformat()
  }
  state_manager.set_custom_data('ml_models_state', ml_state)
  state_manager.set_command('update_ml_models')


def get_ml_models_state():
  """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π"""
  ml_state = state_manager.get_custom_data('ml_models_state')
  if ml_state:
    return ml_state
  return {'use_enhanced_ml': True, 'use_base_ml': True}

def load_shadow_trading_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Shadow Trading –∏–∑ –ø–∞–ø–∫–∏ config"""
    try:
        import json
        import os

        config_path = "config/enhanced_shadow_trading_config.json"

        if not os.path.exists(config_path):
            return {}

        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
            return config.get('enhanced_shadow_trading', {})

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Shadow Trading –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}


def get_shadow_trading_config_display():
  """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Shadow Trading –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ dashboard"""
  shadow_config = load_shadow_trading_config()

  if not shadow_config:
    return {
      "Shadow Trading": {
        "–°—Ç–∞—Ç—É—Å": "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        "–§–∞–π–ª": "enhanced_shadow_trading_config.json",
        "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ": "–ü–∞–ø–∫–∞ config/"
      }
    }

  monitoring = shadow_config.get('monitoring', {})
  analytics = shadow_config.get('analytics', {})
  alerts = shadow_config.get('alerts', {})
  performance = shadow_config.get('performance_thresholds', {})
  reporting = shadow_config.get('reporting', {})
  optimization = shadow_config.get('optimization', {})

  return {
    "Shadow Trading": {
      "‚úÖ –°—Ç–∞—Ç—É—Å": "–í–∫–ª—é—á–µ–Ω" if shadow_config.get('enabled', False) else "–û—Ç–∫–ª—é—á–µ–Ω",
      "üì¶ –í–µ—Ä—Å–∏—è": shadow_config.get('version', 'N/A'),
      "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è": f"{monitoring.get('price_update_interval_seconds', 30)} —Å–µ–∫",
      "üïê –í—Ä–µ–º—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è": f"{monitoring.get('signal_tracking_duration_hours', 24)} —á",
      "üìä –ú–∞–∫—Å. –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ": f"{monitoring.get('max_concurrent_tracking', 1000)} —Å–∏–≥–Ω–∞–ª–æ–≤",
      "üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞": "‚úÖ" if analytics.get('advanced_patterns_enabled', False) else "‚ùå",
      "üîç –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π": "‚úÖ" if analytics.get('anomaly_detection_enabled', False) else "‚ùå",
      "üö® –ê–ª–µ—Ä—Ç—ã": "‚úÖ" if alerts.get('enabled', False) else "‚ùå",
      "üì± Telegram": "‚úÖ" if alerts.get('telegram_integration', False) else "‚ùå",
      "üéØ –¶–µ–ª–µ–≤–æ–π –≤–∏–Ω—Ä–µ–π—Ç": f"{performance.get('target_win_rate_pct', 60)}%",
      "üí∞ –ú–∏–Ω. Profit Factor": performance.get('min_profit_factor', 1.5),
      "ü§ñ –ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è": "‚úÖ" if optimization.get('auto_optimization_enabled', False) else "‚ùå",
      "üìà –ê–≤—Ç–æ-–æ—Ç—á–µ—Ç—ã": "‚úÖ" if reporting.get('auto_reports_enabled', False) else "‚ùå"
    }
  }


def get_database_health_minimal():
  """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
  try:
    import sqlite3
    import os

    db_path = getattr(db_manager, 'db_path', 'trading_data.db')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(db_path):
      return {
        'status': 'missing',
        'message': f'–§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}',
        'stats': {}
      }

    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    with sqlite3.connect(db_path, timeout=5.0) as conn:
      cursor = conn.execute("SELECT 1")
      result = cursor.fetchone()

      if result and result[0] == 1:
        return {
          'status': 'healthy',
          'message': '–ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
          'stats': {
            'database_path': db_path,
            'file_size_mb': round(os.path.getsize(db_path) / 1024 / 1024, 2)
          }
        }
      else:
        return {
          'status': 'error',
          'message': '–ë–î –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
          'stats': {}
        }

  except Exception as e:
    return {
      'status': 'error',
      'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}',
      'stats': {},
      'error': str(e)
    }

def get_strategy_performance():
  """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –ë–î"""
  try:
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    end_date = datetime.now()
    start_date = end_date - timedelta(days=30)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ asyncio.run
    query = """
          SELECT COALESCE(strategy_name, 'Unknown') as strategy_name, 
                 COUNT(*) as total_trades,
                 SUM(CASE WHEN profit_loss > 0 THEN 1 ELSE 0 END) as wins,
                 SUM(profit_loss) as total_profit,
                 AVG(profit_loss) as avg_profit,
                 MAX(profit_loss) as max_profit,
                 MIN(profit_loss) as max_loss
          FROM trades 
          WHERE status = 'CLOSED' 
          AND close_timestamp BETWEEN ? AND ?
          GROUP BY strategy_name
      """

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    result = asyncio.run(db_manager.execute_query(query, (start_date.isoformat(), end_date.isoformat())))

    performance = {}
    for row in result:
      strategy_name = row[0]
      total_trades = row[1]
      wins = row[2]
      total_profit = row[3] or 0

      performance[strategy_name] = {
        'total_trades': total_trades,
        'wins': wins,
        'losses': total_trades - wins,
        'win_rate': wins / total_trades if total_trades > 0 else 0,
        'total_profit': total_profit,
        'avg_profit': row[4] or 0,
        'max_profit': row[5] or 0,
        'max_loss': row[6] or 0,
        'profit_factor': abs(row[5] / row[6]) if row[6] and row[6] != 0 else 0
      }

    return performance

  except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
    return {}

def get_market_regimes():
  """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
  regimes_data = state_manager.get_custom_data('market_regimes')
  return regimes_data or {}


# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º ---
# bot_pid = get_bot_pid()
# if bot_pid:
#   st.sidebar.success(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {bot_pid})")
#   if st.sidebar.button("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"):
#     if stop_bot():
#       st.sidebar.success("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
#       time.sleep(1)
#       st.rerun()
# else:
#   st.sidebar.error("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
#   if st.sidebar.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"):
#     if start_bot():
#       st.sidebar.success("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
#       time.sleep(1)
#       st.rerun()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
  st.rerun()

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4 = st.tabs(["üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìà –°–¥–µ–ª–∫–∏", "üéØ Shadow Trading", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])

with tab1:
  st.header("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

  # –ú–µ—Ç—Ä–∏–∫–∏
  stats = get_trading_stats()

  col1, col2, col3, col4 = st.columns(4)

  with col1:
    st.metric(
      "–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫",
      stats.get('total_trades', 0)
    )

  with col2:
    profitable = stats.get('profitable_trades', 0)
    total = stats.get('total_trades', 0)
    win_rate = (profitable / total * 100) if total > 0 else 0
    st.metric(
      "–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫",
      profitable,
      delta=f"{win_rate:.1f}% –≤–∏–Ω—Ä–µ–π—Ç"
    )

  with col3:
    total_pnl = stats.get('total_profit_loss', 0)
    st.metric(
      "–û–±—â–∏–π P&L",
      f"{total_pnl:.2f} USDT",
      delta=total_pnl
    )

  with col4:
    avg_pnl = stats.get('avg_profit_loss', 0)
    st.metric(
      "–°—Ä–µ–¥–Ω–∏–π P&L",
      f"{avg_pnl:.2f} USDT"
    )

with tab2:
  st.header("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏")

  trades = get_recent_trades()

  if trades:
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    df = pd.DataFrame(trades)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    display_columns = ['symbol', 'side', 'open_price', 'quantity', 'status', 'profit_loss', 'open_timestamp']
    if all(col in df.columns for col in display_columns):
      df_display = df[display_columns].copy()
      df_display['open_timestamp'] = pd.to_datetime(df_display['open_timestamp']).dt.strftime('%Y-%m-%d %H:%M:%S')
      df_display = df_display.rename(columns={
        'symbol': '–°–∏–º–≤–æ–ª',
        'side': '–°—Ç–æ—Ä–æ–Ω–∞',
        'open_price': '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞',
        'quantity': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        'status': '–°—Ç–∞—Ç—É—Å',
        'profit_loss': 'P&L',
        'open_timestamp': '–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è'
      })

      st.dataframe(df_display, use_container_width=True)
    else:
      st.dataframe(df, use_container_width=True)
  else:
    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö")

with tab3:
  st.header("üéØ Shadow Trading System")

  # –°–≤–æ–¥–∫–∞ Shadow Trading
  col1, col2 = st.columns([2, 1])

  with col1:
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
    today_stats = get_shadow_trading_today_stats()

    col_a, col_b = st.columns(2)
    with col_a:
      st.metric("–°–∏–≥–Ω–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è", today_stats['today_signals'])
    with col_b:
      st.metric("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è", today_stats['today_profitable'])

  with col2:
    st.subheader("üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞")
    days_period = st.selectbox("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞", [1, 3, 7, 14, 30], index=2)

  # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  st.subheader(f"üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days_period} –¥–Ω–µ–π")

  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  detailed_stats = get_enhanced_shadow_stats(days_period)

  if detailed_stats['total_signals'] > 0:
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
    col1, col2, col3, col4 = st.columns(4)

    with col1:
      st.metric("–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤", detailed_stats['total_signals'])

    with col2:
      win_rate = detailed_stats.get('win_rate', 0.0)
      st.metric(
        "–í–∏–Ω—Ä–µ–π—Ç",
        f"{win_rate:.1f}%",
        delta=f"{detailed_stats['profitable_signals']}/{detailed_stats['total_signals']}"
      )

    with col3:
      filter_rate = (detailed_stats['filtered_signals'] / detailed_stats['total_signals']) * 100
      st.metric(
        "–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ",
        f"{filter_rate:.1f}%",
        delta=f"{detailed_stats['filtered_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤"
      )

    with col4:
      st.metric(
        "–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
        f"{detailed_stats['avg_confidence']:.2f}"
      )

    # –î–û–ë–ê–í–ò–¢–¨ –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏:
    st.subheader("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
      max_win = detailed_stats.get('max_win_pct', 0.0)
      st.metric(
        "–õ—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª",
        f"+{max_win:.2f}%",
        delta="–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å"
      )

    with col2:
      max_loss = detailed_stats.get('max_loss_pct', 0.0)
      st.metric(
        "–•—É–¥—à–∏–π —Å–∏–≥–Ω–∞–ª",
        f"{max_loss:.2f}%",
        delta="–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫"
      )

    with col3:
      avg_win = detailed_stats.get('avg_win_pct', 0.0)
      avg_loss = detailed_stats.get('avg_loss_pct', 0.0)
      if avg_loss != 0:
        profit_factor = abs(avg_win / avg_loss) if avg_loss != 0 else 0
      else:
        profit_factor = float('inf') if avg_win > 0 else 0
      st.metric(
        "Profit Factor",
        f"{profit_factor:.2f}",
        delta="—Å—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ"
      )

    with col4:
      pending_signals = (detailed_stats['total_signals'] -
                         detailed_stats['profitable_signals'] -
                         detailed_stats['loss_signals'] -
                         detailed_stats['filtered_signals'])
      st.metric(
        "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
        pending_signals,
        delta="–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
      )

  # –î–û–ë–ê–í–ò–¢–¨ –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º:

  st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º")

  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  periods = [1, 3, 7, 14, 30]
  period_stats = {}

  for period in periods:
    try:
      stats = get_enhanced_shadow_stats(period)
      period_stats[f"{period}–¥"] = {
        'signals': stats.get('total_signals', 0),
        'win_rate': stats.get('win_rate', 0.0),
        'avg_confidence': stats.get('avg_confidence', 0.0)
      }
    except:
      period_stats[f"{period}–¥"] = {'signals': 0, 'win_rate': 0.0, 'avg_confidence': 0.0}

  if period_stats:
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    import pandas as pd

    df_periods = pd.DataFrame(period_stats).T
    df_periods.index.name = '–ü–µ—Ä–∏–æ–¥'

    # –ì—Ä–∞—Ñ–∏–∫ –≤–∏–Ω—Ä–µ–π—Ç–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    col1, col2 = st.columns(2)

    with col1:
      fig_winrate = go.Figure()
      fig_winrate.add_trace(go.Bar(
        x=df_periods.index,
        y=df_periods['win_rate'],
        name='–í–∏–Ω—Ä–µ–π—Ç %',
        marker_color='green'
      ))
      fig_winrate.update_layout(
        title="–í–∏–Ω—Ä–µ–π—Ç –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º",
        xaxis_title="–ü–µ—Ä–∏–æ–¥",
        yaxis_title="–í–∏–Ω—Ä–µ–π—Ç (%)",
        height=300
      )
      st.plotly_chart(fig_winrate, use_container_width=True)

    with col2:
      fig_signals = go.Figure()
      fig_signals.add_trace(go.Bar(
        x=df_periods.index,
        y=df_periods['signals'],
        name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤',
        marker_color='blue'
      ))
      fig_signals.update_layout(
        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º",
        xaxis_title="–ü–µ—Ä–∏–æ–¥",
        yaxis_title="–°–∏–≥–Ω–∞–ª–æ–≤",
        height=300
      )
      st.plotly_chart(fig_signals, use_container_width=True)
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    labels = ['–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ', '–£–±—ã—Ç–æ—á–Ω—ã–µ', '–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ', '–í –æ–∂–∏–¥–∞–Ω–∏–∏']
    values = [
      detailed_stats['profitable_signals'],
      detailed_stats['loss_signals'],
      detailed_stats['filtered_signals'],
      detailed_stats['total_signals'] - detailed_stats['profitable_signals'] -
      detailed_stats['loss_signals'] - detailed_stats['filtered_signals']
    ]

    fig = go.Figure(data=[go.Pie(
      labels=labels,
      values=values,
      hole=.3,
      textinfo='label+percent',
      textfont_size=12
    )])

    fig.update_layout(
      title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤",
      height=400
    )

    st.plotly_chart(fig, use_container_width=True)

    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

    metrics_data = {
      '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': [
        '–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π —Å–¥–µ–ª–∫–µ',
        '–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ –Ω–∞ —É–±—ã—Ç–æ—á–Ω–æ–π —Å–¥–µ–ª–∫–µ',
        '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤',
        '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤',
        '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'
      ],
      '–ó–Ω–∞—á–µ–Ω–∏–µ': [
        f"{detailed_stats['avg_win_pct']:.2f}%",
        f"{detailed_stats['avg_loss_pct']:.2f}%",
        f"{detailed_stats['total_signals']}",
        f"{filter_rate:.1f}%",
        f"{detailed_stats['avg_confidence']:.3f}"
      ]
    }

    metrics_df = pd.DataFrame(metrics_data)
    st.dataframe(metrics_df, use_container_width=True, hide_index=True)

  else:
    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–≥–Ω–∞–ª–∞—Ö Shadow Trading –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

  # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
  st.subheader("üìù –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞")
  summary = create_shadow_trading_summary(days_period)
  st.markdown(summary)

with tab4:
  st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")

  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  try:
    current_config = config_manager.load_config()
    st.subheader("üìÑ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
    config_display = {
      "API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏": {
        "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞": current_config.get('testnet', False),
        "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤": f"{current_config.get('request_timeout', 30)} —Å–µ–∫",
      },
      "–¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏": {
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫": f"{current_config.get('max_risk_per_trade', 2)}%",
        "–ú–∞–∫—Å–∏–º—É–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π": current_config.get('max_open_positions', 3),
      }
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Shadow Trading –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    shadow_display = get_shadow_trading_config_display()
    config_display.update(shadow_display)

    for section, settings in config_display.items():
      st.subheader(f"üîß {section}")
      for setting, value in settings.items():
        st.write(f"**{setting}:** {value}")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"):
      config_manager = ConfigManager(config_path=CONFIG_FILE_PATH)
      st.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")

  except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

  st.subheader("üóÑÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

  try:
    db_health = get_database_health_minimal()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)

    with col1:
      status = db_health.get('status', 'unknown')
      status_icons = {
        'healthy': 'üü¢',
        'warning': 'üü°',
        'error': 'üî¥',
        'locked': 'üîí',
        'missing': '‚ùå'
      }
      icon = status_icons.get(status, '‚ùì')
      st.metric("–°—Ç–∞—Ç—É—Å –ë–î", f"{icon} {status.title()}")

    with col2:
      response_time = db_health.get('response_time_ms', -1)
      if response_time >= 0:
        st.metric("–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞", f"{response_time:.1f} –º—Å")
      else:
        st.metric("–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞", "N/A")

    with col3:
      stats = db_health.get('stats', {})
      total_ops = stats.get('total_operations', 0)
      st.metric("–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π", total_ops)

    with col4:
      error_rate = stats.get('error_rate_pct', 0)
      st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫", f"{error_rate:.1f}%")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if stats:
      col1, col2 = st.columns(2)

      with col1:
        lock_errors = stats.get('lock_errors', 0)
        st.metric("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ë–î", lock_errors)

        if lock_errors > 0:
          last_lock = stats.get('last_lock_time')
          if last_lock:
            time_ago = time.time() - last_lock
            if time_ago < 60:
              st.metric("–ü–æ—Å–ª–µ–¥–Ω—è—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", f"{time_ago:.0f} —Å–µ–∫ –Ω–∞–∑–∞–¥")
            else:
              st.metric("–ü–æ—Å–ª–µ–¥–Ω—è—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", f"{time_ago / 60:.0f} –º–∏–Ω –Ω–∞–∑–∞–¥")

      with col2:
        db_path = db_health.get('database_path', 'unknown')
        st.metric("–ü—É—Ç—å –∫ –ë–î", os.path.basename(db_path) if db_path != 'unknown' else 'N/A')

        pool_size = db_health.get('pool_size', 'unknown')
        st.metric("–†–∞–∑–º–µ—Ä –ø—É–ª–∞", pool_size)

    # –ê–ª–µ—Ä—Ç—ã –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if db_health['status'] == 'error':
      st.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {db_health.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    elif db_health['status'] == 'locked':
      st.error(f"üîí –ë–î –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {db_health.get('message', '')}")
    elif db_health['status'] == 'warning':
      st.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ë–î: {db_health.get('message', '')}")
    elif db_health['status'] == 'missing':
      st.error(f"‚ùå –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_health.get('message', '')}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if stats.get('lock_errors', 0) > 10:
      st.warning(f"üö® –ú–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ë–î ({stats['lock_errors']}). –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
      st.write("‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
      st.write("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ë–î")
      st.write("‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç—ã")

    if error_rate > 10:
      st.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ –ë–î ({error_rate:.1f}%)")

  except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î: {e}")
  # # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  # try:
  #   current_config = config_manager.load_config()
  #   st.subheader("üìÑ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
  #
  #   # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ
  #   config_display = {
  #     "API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏": {
  #       "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞": current_config.get('testnet', False),
  #       "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤": f"{current_config.get('request_timeout', 30)} —Å–µ–∫",
  #     },
  #     "–¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏": {
  #       "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫": f"{current_config.get('max_risk_per_trade', 2)}%",
  #       "–ú–∞–∫—Å–∏–º—É–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π": current_config.get('max_open_positions', 3),
  #     },
  #     "Shadow Trading": {
  #       "–í–∫–ª—é—á–µ–Ω": current_config.get('shadow_trading', {}).get('enabled', False),
  #       "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω": current_config.get('shadow_trading', {}).get('price_monitoring', True),
  #     }
  #   }
  #
  #   for section, settings in config_display.items():
  #     st.subheader(f"üîß {section}")
  #     for setting, value in settings.items():
  #       st.write(f"**{setting}:** {value}")
  #
  #   # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  #   if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"):
  #     config_manager = ConfigManager(config_path=CONFIG_FILE_PATH)
  #     st.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
  #
  # except Exception as e:
  #   st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  st.subheader("üóÑÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
  st.write(f"**–ü—É—Ç—å –∫ –ë–î:** {db_manager.db_path}")

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü Shadow Trading
  try:
    import sqlite3

    with sqlite3.connect(db_manager.db_path) as conn:
      cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
      tables = [row[0] for row in cursor.fetchall()]

      shadow_tables = [t for t in tables if t in ['signal_analysis', 'price_tracking']]

      if shadow_tables:
        st.success(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã Shadow Trading –Ω–∞–π–¥–µ–Ω—ã: {', '.join(shadow_tables)}")
      else:
        st.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã Shadow Trading –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        if st.button("üî® –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã Shadow Trading"):
          if initialize_shadow_trading():
            st.success("‚úÖ –¢–∞–±–ª–∏—Ü—ã Shadow Trading —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            st.rerun()
          else:
            st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")

  except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# --- –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï ---
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
if st.checkbox("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (30 —Å–µ–∫)", value=False):
  time.sleep(30)
  st.rerun()
with st.sidebar:
  st.title("üïπÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º")



  col1, col2 = st.columns(2)

  with col1:
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", type="primary", use_container_width=True):
      start_bot()
      time.sleep(1)
      st.rerun()

  with col2:
    if st.button("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", use_container_width=True):
      stop_bot()
      time.sleep(1)
      st.rerun()

  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
  if is_bot_run():
    pid = get_bot_pid()
    st.success(f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: {pid})")
  else:
    st.warning("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

  st.divider()
  # --- –£–ü–†–û–©–ï–ù–ù–ê–Ø –ö–ù–û–ü–ö–ê SHADOW TRADING ---
  st.subheader("üåü Shadow Trading")

  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  display_simple_shadow_metrics()

  if st.button("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", use_container_width=True):
    st.info("üîÑ –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Shadow Trading –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

  st.divider()

  # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ML –º–æ–¥–µ–ª—è–º–∏ ---
  st.subheader("ü§ñ ML –ú–æ–¥–µ–ª–∏")

  ml_state = get_ml_models_state()

  use_enhanced = st.checkbox(
    "Enhanced ML (–ê–Ω—Å–∞–º–±–ª—å)",
    value=ml_state.get('use_enhanced_ml', True),
    help="–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å –º–µ—Ç–∞-–æ–±—É—á–µ–Ω–∏–µ–º"
  )

  use_base = st.checkbox(
    "Base ML (–û—Å–Ω–æ–≤–Ω–∞—è)",
    value=ml_state.get('use_base_ml', True),
    help="–ë–∞–∑–æ–≤–∞—è ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"
  )

  if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å ML –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True):
    update_ml_models_state(use_enhanced, use_base)
    st.success("ML –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    if not use_enhanced and not use_base:
      st.warning("‚ö†Ô∏è –û–±–µ ML –º–æ–¥–µ–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã!")

  st.divider()

  # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
    st.rerun()

  st.divider()

  st.subheader("üìä –î–µ–π—Å—Ç–≤–∏—è")
  if st.button("üìà –û—Ç—á–µ—Ç –æ –º–æ–¥–µ–ª–∏", use_container_width=True):
    state_manager.set_command("generate_report")
    st.toast("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

  if st.button("üîÑ –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", use_container_width=True):
    state_manager.set_command("retrain_model")
    st.toast("–ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ!")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –¥–∞—à–±–æ—Ä–¥–∞ ---
st.title("ü§ñ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
status = state_manager.get_status()
metrics = state_manager.get_metrics()
model_info = state_manager.get_model_info()

st.sidebar.write("üîç **–û—Ç–ª–∞–¥–∫–∞ –º–µ—Ç—Ä–∏–∫:**")
if metrics:
  st.sidebar.success(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã")
  st.sidebar.write(f"–ë–∞–ª–∞–Ω—Å: {metrics.total_balance_usdt:.2f}")
else:
  st.sidebar.error("‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
state_file_content = state_manager._read_state()
st.sidebar.write(f"üìÑ –ö–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ: {list(state_file_content.keys())}")

# –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
open_positions_list = state_manager.get_open_positions()
closed_trades_list = asyncio.run(db_manager.get_all_trades(limit=1000))

df_open = pd.DataFrame(open_positions_list) if open_positions_list else pd.DataFrame()
df_closed = pd.DataFrame(closed_trades_list) if closed_trades_list else pd.DataFrame()

# --- –ù–û–í–´–ô –ë–õ–û–ö ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
current_config = config_manager.load_config()
trade_cfg = current_config.get('trade_settings', {})
strategy_cfg = current_config.get('strategy_settings', {})
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---



col_status, col_ml = st.columns([3, 1])

with col_status:
  if is_bot_run():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_bot_pid() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PID –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    pid = get_bot_pid()
    st.success(f"üü¢ **–°—Ç–∞—Ç—É—Å: –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç** (PID: {pid})")
  else:
    st.warning("üü° **–°—Ç–∞—Ç—É—Å: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**")

with col_ml:
  ml_state = get_ml_models_state()
  enhanced_status = "‚úÖ" if ml_state.get('use_enhanced_ml', True) else "‚ùå"
  base_status = "‚úÖ" if ml_state.get('use_base_ml', True) else "‚ùå"
  st.metric("ML –ú–æ–¥–µ–ª–∏", f"E:{enhanced_status} B:{base_status}")

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
cols = st.columns(5)
if metrics:
  cols[0].metric("–û–±—â–∏–π –±–∞–ª–∞–Ω—Å", f"${metrics.total_balance_usdt:.2f}")
  cols[1].metric("–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å", f"${metrics.available_balance_usdt:.2f}")
  cols[2].metric("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", f"${metrics.unrealized_pnl_total:.2f}")
  cols[3].metric("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", f"${metrics.realized_pnl_total:.2f}")

  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ROI
  if metrics.total_balance_usdt > 0:
    roi = (metrics.realized_pnl_total / metrics.total_balance_usdt) * 100
    cols[4].metric("ROI", f"{roi:.2f}%")
else:
  # Fallback: –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
  try:
    recent_trades = asyncio.run(db_manager.get_all_trades(limit=100))
    if recent_trades:
      total_pnl = sum(trade.get('profit_loss', 0) for trade in recent_trades if trade.get('profit_loss'))
      cols[0].metric("–û–±—â–∏–π –±–∞–ª–∞–Ω—Å", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
      cols[1].metric("–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
      cols[2].metric("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
      cols[3].metric("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", f"${total_pnl:.2f}")
      cols[4].metric("ROI", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    else:
      for i, col in enumerate(cols):
        col.metric(["–û–±—â–∏–π –±–∞–ª–∞–Ω—Å", "–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å", "–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", "ROI"][i], "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
  except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fallback –º–µ—Ç—Ä–∏–∫: {e}")
    for i, col in enumerate(cols):
      col.metric(["–û–±—â–∏–π –±–∞–ª–∞–Ω—Å", "–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å", "–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", "ROI"][i], "–û—à–∏–±–∫–∞")
st.divider()

# --- –í–∫–ª–∞–¥–∫–∏ ---
tabs = st.tabs([
  "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
  "üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
  "üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏",
  "üåç –†–µ–∂–∏–º—ã —Ä—ã–Ω–∫–∞",
  "üìâ –ê–Ω–∞–ª–∏–∑",
  "üìä ROI –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
  "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
])

#if st.button("üåü Shadow Trading", use_container_width=True):
#  st.session_state.page = "shadow_trading"
#  st.rerun()

# --- –í–∫–ª–∞–¥–∫–∞: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ---
with tabs[0]:
  col1, col2 = st.columns([1, 1])

  with col1:
    st.subheader("üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
    if not df_open.empty:
      # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π PnL –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
      if 'current_price' in df_open.columns and 'open_price' in df_open.columns:
        df_open['current_pnl'] = (df_open['current_price'] - df_open['open_price']) * df_open['quantity']
        df_open['current_pnl_pct'] = ((df_open['current_price'] - df_open['open_price']) / df_open['open_price']) * 100

      display_cols = ['open_timestamp', 'symbol', 'side', 'quantity', 'open_price', 'current_pnl', 'current_pnl_pct']
      available_cols = [col for col in display_cols if col in df_open.columns]

      # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      df_display = df_open[available_cols].copy()
      if 'open_timestamp' in df_display.columns:
        df_display['open_timestamp'] = pd.to_datetime(df_display['open_timestamp']).dt.strftime('%H:%M:%S')


      # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ PnL
      def color_pnl(val):
        if isinstance(val, (int, float)):
          color = 'green' if val > 0 else 'red' if val < 0 else 'black'
          return f'color: {color}'
        return ''


      # styled_df = df_display.style.applymap(color_pnl, subset=['current_pnl',
      #                                                          'current_pnl_pct'] if 'current_pnl' in df_display.columns else [])
      styled_df = df_display.style.map(lambda x: 'color: green' if x > 0 else 'color: red',subset=['profit_pct', 'profit_usd'])
      st.dataframe(styled_df, use_container_width=True)
    else:
      st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

  with col2:
    st.subheader("üìä –ö—Ä–∏–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
    if not df_closed.empty and 'profit_loss' in df_closed.columns:
      df_closed['timestamp'] = pd.to_datetime(df_closed['close_timestamp'])
      df_closed_sorted = df_closed.sort_values('timestamp')
      df_closed_sorted['cumulative_pnl'] = df_closed_sorted['profit_loss'].cumsum()

      fig = go.Figure()
      fig.add_trace(go.Scatter(
        x=df_closed_sorted['timestamp'],
        y=df_closed_sorted['cumulative_pnl'],
        mode='lines',
        name='–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π PnL',
        line=dict(color='green' if df_closed_sorted['cumulative_pnl'].iloc[-1] > 0 else 'red')
      ))

      fig.update_layout(
        title="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å",
        xaxis_title="–í—Ä–µ–º—è",
        yaxis_title="PnL (USDT)",
        height=300
      )

      st.plotly_chart(fig, use_container_width=True)
    else:
      st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")

  # –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
  st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫")
  if not df_closed.empty:
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    col_filter1, col_filter2, col_filter3 = st.columns(3)

    with col_filter1:
      symbol_filter = st.selectbox(
        "–°–∏–º–≤–æ–ª",
        options=['–í—Å–µ'] + sorted(df_closed['symbol'].unique().tolist()),
        key='symbol_filter'
      )

    with col_filter2:
      strategy_filter = st.selectbox(
        "–°—Ç—Ä–∞—Ç–µ–≥–∏—è",
        options=['–í—Å–µ'] + sorted(
          df_closed['strategy_name'].unique().tolist()) if 'strategy_name' in df_closed.columns else ['–í—Å–µ'],
        key='strategy_filter'
      )

    with col_filter3:
      profit_filter = st.selectbox(
        "–†–µ–∑—É–ª—å—Ç–∞—Ç",
        options=['–í—Å–µ', '–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ', '–£–±—ã—Ç–æ—á–Ω—ã–µ'],
        key='profit_filter'
      )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    df_filtered = df_closed.copy()

    if symbol_filter != '–í—Å–µ':
      df_filtered = df_filtered[df_filtered['symbol'] == symbol_filter]

    if strategy_filter != '–í—Å–µ' and 'strategy_name' in df_filtered.columns:
      df_filtered = df_filtered[df_filtered['strategy_name'] == strategy_filter]

    if profit_filter == '–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ':
      df_filtered = df_filtered[df_filtered['profit_loss'] > 0]
    elif profit_filter == '–£–±—ã—Ç–æ—á–Ω—ã–µ':
      df_filtered = df_filtered[df_filtered['profit_loss'] < 0]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
    display_cols = ['close_timestamp', 'symbol', 'strategy_name', 'side', 'quantity',
                    'open_price', 'close_price', 'profit_loss', 'profit_pct']
    available_cols = [col for col in display_cols if col in df_filtered.columns]

    df_display = df_filtered[available_cols].copy()
    if 'close_timestamp' in df_display.columns:
      df_display['close_timestamp'] = pd.to_datetime(df_display['close_timestamp']).dt.strftime('%Y-%m-%d %H:%M')

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç
    if 'profit_pct' not in df_display.columns and 'profit_loss' in df_display.columns and 'open_price' in df_display.columns:
      df_display['profit_pct'] = (df_display['profit_loss'] / (df_display['open_price'] * df_display['quantity'])) * 100

    st.dataframe(df_display.sort_values('close_timestamp', ascending=False), use_container_width=True, height=400)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
    if len(df_filtered) > 0:
      col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
      col_stat1.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", len(df_filtered))
      col_stat2.metric("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö", len(df_filtered[df_filtered['profit_loss'] > 0]))
      col_stat3.metric("Win Rate",
                       f"{(len(df_filtered[df_filtered['profit_loss'] > 0]) / len(df_filtered) * 100):.1f}%")
      col_stat4.metric("–û–±—â–∏–π PnL", f"${df_filtered['profit_loss'].sum():.2f}")

# --- –í–∫–ª–∞–¥–∫–∞: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ---
with tabs[1]:
  st.header("üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

  performance = get_strategy_performance()

  if 'shadow_manager' not in st.session_state and hasattr(st.session_state, 'trading_system'):
    setup_shadow_dashboard_integration(st.session_state.trading_system.shadow_trading)

  if performance:
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    perf_data = []
    for strategy, metrics in performance.items():
      perf_data.append({
        '–°—Ç—Ä–∞—Ç–µ–≥–∏—è': strategy,
        '–°–¥–µ–ª–æ–∫': metrics['total_trades'],
        '–ü–æ–±–µ–¥': metrics['wins'],
        '–ü–æ—Ä–∞–∂–µ–Ω–∏–π': metrics['losses'],
        'Win Rate': f"{metrics['win_rate'] * 100:.1f}%",
        '–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å': f"${metrics['total_profit']:.2f}",
        '–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å': f"${metrics['avg_profit']:.2f}",
        '–ú–∞–∫—Å –ø—Ä–∏–±—ã–ª—å': f"${metrics['max_profit']:.2f}",
        '–ú–∞–∫—Å —É–±—ã—Ç–æ–∫': f"${metrics['max_loss']:.2f}",
        'Profit Factor': f"{metrics['profit_factor']:.2f}"
      })

    df_perf = pd.DataFrame(perf_data)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Win Rate
    df_perf['_wr'] = df_perf['Win Rate'].str.rstrip('%').astype(float)
    df_perf = df_perf.sort_values('_wr', ascending=False).drop('_wr', axis=1)

    st.dataframe(df_perf, use_container_width=True, hide_index=True)

    # –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    col1, col2 = st.columns(2)

    with col1:
      # –ì—Ä–∞—Ñ–∏–∫ Win Rate –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
      fig_wr = px.bar(
        x=list(performance.keys()),
        y=[m['win_rate'] * 100 for m in performance.values()],
        title="Win Rate –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º",
        labels={'x': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è', 'y': 'Win Rate (%)'}
      )
      fig_wr.add_hline(y=50, line_dash="dash", line_color="red")
      st.plotly_chart(fig_wr, use_container_width=True)

    with col2:
      # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
      fig_profit = px.bar(
        x=list(performance.keys()),
        y=[m['total_profit'] for m in performance.values()],
        title="–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º",
        labels={'x': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è', 'y': '–ü—Ä–∏–±—ã–ª—å (USDT)'},
        color=[m['total_profit'] for m in performance.values()],
        color_continuous_scale=['red', 'yellow', 'green']
      )
      st.plotly_chart(fig_profit, use_container_width=True)

    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Å–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    adaptive_weights = state_manager.get_custom_data('adaptive_weights')
    if adaptive_weights:
      st.subheader("‚öñÔ∏è –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

      weights_data = []
      for strategy, weight in adaptive_weights.items():
        weights_data.append({
          '–°—Ç—Ä–∞—Ç–µ–≥–∏—è': strategy,
          '–¢–µ–∫—É—â–∏–π –≤–µ—Å': f"{weight:.2f}",
          '–°—Ç–∞—Ç—É—Å': '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if weight > 0.5 else '‚ö†Ô∏è –°–Ω–∏–∂–µ–Ω –≤–µ—Å' if weight > 0 else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'
        })

      df_weights = pd.DataFrame(weights_data)
      st.dataframe(df_weights, use_container_width=True, hide_index=True)
  else:
    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

# --- –í–∫–ª–∞–¥–∫–∞: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
with tabs[2]:
  st.header("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏")

  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  all_strategies = [
    "Live_ML_Strategy",
    "Ichimoku_Cloud",
    "Dual_Thrust",
    "Mean_Reversion_BB",
    "Momentum_Spike",
    "Grid_Trading",
    'Stop_and_Reverse'
  ]

  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  active_strategies = state_manager.get_custom_data('active_strategies') or {s: True for s in all_strategies}

  st.subheader("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

  # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
  cols = st.columns(3)

  updated_strategies = {}
  for i, strategy in enumerate(all_strategies):
    col_idx = i % 3
    with cols[col_idx]:
      is_active = st.checkbox(
        strategy,
        value=active_strategies.get(strategy, True),
        key=f"strat_{strategy}"
      )
      updated_strategies[strategy] = is_active

  if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"):
    state_manager.set_custom_data('active_strategies', updated_strategies)
    state_manager.set_command('update_strategies')
    st.toast("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
  st.divider()
  st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")

  col1, col2 = st.columns(2)

  with col1:
    min_win_rate = st.slider(
      "–ú–∏–Ω. Win Rate –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
      min_value=0.0,
      max_value=1.0,
      value=0.3,
      step=0.05,
      help="–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å Win Rate –Ω–∏–∂–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã"
    )

    weight_change_rate = st.slider(
      "–°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–æ–≤",
      min_value=0.01,
      max_value=0.5,
      value=0.1,
      step=0.01,
      help="–ù–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –≤–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
    )

  with col2:
    min_trades_eval = st.number_input(
      "–ú–∏–Ω. —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏",
      min_value=5,
      max_value=100,
      value=10,
      help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
    )

    regime_weight_bonus = st.slider(
      "–ë–æ–Ω—É—Å –≤–µ—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞",
      min_value=0.0,
      max_value=0.5,
      value=0.2,
      step=0.05,
      help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–º —Ä–µ–∂–∏–º–µ"
    )

  if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"):
    adaptation_params = {
      'min_win_rate': min_win_rate,
      'weight_change_rate': weight_change_rate,
      'min_trades_eval': min_trades_eval,
      'regime_weight_bonus': regime_weight_bonus
    }
    state_manager.set_custom_data('adaptation_params', adaptation_params)
    st.success("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

# --- –í–∫–ª–∞–¥–∫–∞: –†–µ–∂–∏–º—ã —Ä—ã–Ω–∫–∞ ---
with tabs[3]:
  st.header("üåç –†–µ–∂–∏–º—ã —Ä—ã–Ω–∫–∞")

  market_regimes = get_market_regimes()

  if market_regimes:
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–∂–∏–º–∞–º–∏
    regime_data = []
    for symbol, regime_info in market_regimes.items():
      regime_data.append({
        '–°–∏–º–≤–æ–ª': symbol,
        '–†–µ–∂–∏–º': regime_info.get('regime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{regime_info.get('confidence', 0) * 100:.1f}%",
        '–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞': f"{regime_info.get('trend_strength', 0):.2f}",
        '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å': f"{regime_info.get('volatility', 0):.3f}",
        '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': regime_info.get('duration', 'N/A')
      })

    df_regimes = pd.DataFrame(regime_data)


    # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
    def color_regime(val):
      regime_colors = {
        'strong_trend_up': 'background-color: #4CAF50',
        'trend_up': 'background-color: #8BC34A',
        'ranging': 'background-color: #FFC107',
        'trend_down': 'background-color: #FF9800',
        'strong_trend_down': 'background-color: #F44336',
        'volatile': 'background-color: #E91E63',
        'quiet': 'background-color: #9E9E9E'
      }

      for regime, color in regime_colors.items():
        if regime in str(val).lower():
          return color
      return ''


    styled_regimes = df_regimes.style.map(color_regime, subset=['–†–µ–∂–∏–º'])
    st.dataframe(styled_regimes, use_container_width=True, hide_index=True)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∂–∏–º–æ–≤
    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤")

    if df_regimes['–†–µ–∂–∏–º'].value_counts().any():
      fig_regimes = px.pie(
        values=df_regimes['–†–µ–∂–∏–º'].value_counts().values,
        names=df_regimes['–†–µ–∂–∏–º'].value_counts().index,
        title="–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤"
      )
      st.plotly_chart(fig_regimes, use_container_width=True)
  else:
    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∂–∏–º–∞—Ö —Ä—ã–Ω–∫–∞")

  # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∂–∏–º–∞—Ö
  st.divider()
  st.subheader("üìà –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–∂–∏–º–æ–≤")

  regime_history = state_manager.get_custom_data('regime_history')
  if regime_history:
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    st.info("–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∂–∏–º–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–æ–≥–∞—Ö")
  else:
    st.info("–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∂–∏–º–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
#--------------------------------------------------------------------------------–Ω–æ–≤–æ–µ
  # –ü–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ:
  if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∂–∏–º–æ–≤"):
    state_manager.set_command("export_regime_statistics")
    st.success("–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
    selected_symbol = st.selectbox(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
      options=list(market_regimes.keys()) if market_regimes else []
    )

    if selected_symbol:
      # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ command
      state_manager.set_command("get_regime_statistics", {"symbol": selected_symbol})
      time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

      stats = state_manager.get_custom_data(f"regime_stats_{selected_symbol}")
      if stats:
        st.json(stats)
#-------------------------------------------------------------------------------------------
# --- –í–∫–ª–∞–¥–∫–∞: –ê–Ω–∞–ª–∏–∑ ---
with tabs[4]:
  st.header("üìâ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")

  analysis_type = st.selectbox(
    "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
    ["–ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º", "–ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤", "ML –º–µ—Ç—Ä–∏–∫–∏"]
  )

  if analysis_type == "–ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º":
    if not df_closed.empty:
      # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
      symbol_stats = df_closed.groupby('symbol').agg({
        'profit_loss': ['count', 'sum', 'mean'],
        'quantity': 'sum'
      }).round(2)

      symbol_stats.columns = ['–°–¥–µ–ª–æ–∫', '–û–±—â–∏–π PnL', '–°—Ä–µ–¥–Ω–∏–π PnL', '–û–±—â–∏–π –æ–±—ä–µ–º']
      symbol_stats['Win Rate'] = df_closed[df_closed['profit_loss'] > 0].groupby('symbol').size() / symbol_stats[
        '–°–¥–µ–ª–æ–∫'] * 100

      st.dataframe(symbol_stats.sort_values('–û–±—â–∏–π PnL', ascending=False), use_container_width=True)

      # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–ø —Å–∏–º–≤–æ–ª–æ–≤
      top_symbols = symbol_stats.nlargest(10, '–û–±—â–∏–π PnL')
      fig_top = px.bar(
        x=top_symbols.index,
        y=top_symbols['–û–±—â–∏–π PnL'],
        title="–¢–æ–ø-10 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –ø—Ä–∏–±—ã–ª–∏",
        labels={'x': '–°–∏–º–≤–æ–ª', 'y': 'PnL (USDT)'}
      )
      st.plotly_chart(fig_top, use_container_width=True)

  elif analysis_type == "–ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏":
    if not df_closed.empty:
      df_time = df_closed.copy()
      df_time['timestamp'] = pd.to_datetime(df_time['close_timestamp'])
      df_time['hour'] = df_time['timestamp'].dt.hour
      df_time['weekday'] = df_time['timestamp'].dt.day_name()

      # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
      hourly_stats = df_time.groupby('hour')['profit_loss'].agg(['count', 'sum', 'mean'])

      fig_hourly = go.Figure()
      fig_hourly.add_trace(go.Bar(
        x=hourly_stats.index,
        y=hourly_stats['sum'],
        name='–û–±—â–∏–π PnL',
        yaxis='y'
      ))
      fig_hourly.add_trace(go.Scatter(
        x=hourly_stats.index,
        y=hourly_stats['count'],
        name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫',
        yaxis='y2',
        line=dict(color='red')
      ))

      fig_hourly.update_xaxes(title_text="–ß–∞—Å –¥–Ω—è")
      fig_hourly.update_yaxes(title_text="PnL (USDT)", secondary_y=False)
      fig_hourly.update_yaxes(title_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫", secondary_y=True)
      fig_hourly.update_layout(
        title="–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º",
        yaxis2=dict(overlaying='y', side='right')
      )

      st.plotly_chart(fig_hourly, use_container_width=True)

      # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
      weekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
      weekday_stats = df_time.groupby('weekday')['profit_loss'].agg(['count', 'sum', 'mean']).reindex(weekday_order)

      fig_weekday = px.bar(
        x=weekday_stats.index,
        y=weekday_stats['sum'],
        title="–ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
        labels={'x': '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', 'y': 'PnL (USDT)'}
      )
      st.plotly_chart(fig_weekday, use_container_width=True)

  elif analysis_type == "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤":
    st.subheader("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤")

    if not df_closed.empty:
      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
      df_risk = df_closed.copy()
      df_risk['timestamp'] = pd.to_datetime(df_risk['close_timestamp'])
      df_risk = df_risk.sort_values('timestamp')
      df_risk['cumulative_pnl'] = df_risk['profit_loss'].cumsum()
      df_risk['running_max'] = df_risk['cumulative_pnl'].cummax()
      df_risk['drawdown'] = df_risk['cumulative_pnl'] - df_risk['running_max']

      max_drawdown = df_risk['drawdown'].min()
      max_drawdown_pct = (max_drawdown / df_risk['running_max'].max() * 100) if df_risk['running_max'].max() > 0 else 0

      col1, col2, col3 = st.columns(3)
      col1.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", f"${max_drawdown:.2f}")
      col2.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞ %", f"{max_drawdown_pct:.2f}%")

      # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
      if len(df_risk) > 1:
        daily_returns = df_risk.groupby(df_risk['timestamp'].dt.date)['profit_loss'].sum()
        sharpe_ratio = (daily_returns.mean() / daily_returns.std() * np.sqrt(252)) if daily_returns.std() > 0 else 0
        col3.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", f"{sharpe_ratio:.2f}")

      # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–∞–¥–∫–∏
      fig_dd = go.Figure()
      fig_dd.add_trace(go.Scatter(
        x=df_risk['timestamp'],
        y=df_risk['cumulative_pnl'],
        name='–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π PnL',
        line=dict(color='green')
      ))
      fig_dd.add_trace(go.Scatter(
        x=df_risk['timestamp'],
        y=df_risk['running_max'],
        name='–ú–∞–∫—Å–∏–º—É–º',
        line=dict(color='blue', dash='dash')
      ))
      fig_dd.add_trace(go.Scatter(
        x=df_risk['timestamp'],
        y=df_risk['drawdown'],
        name='–ü—Ä–æ—Å–∞–¥–∫–∞',
        fill='tozeroy',
        line=dict(color='red')
      ))

      fig_dd.update_layout(
        title="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å–∞–¥–∫–∏",
        xaxis_title="–í—Ä–µ–º—è",
        yaxis_title="USDT",
        height=400
      )

      st.plotly_chart(fig_dd, use_container_width=True)

      # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–µ–π/—É–±—ã—Ç–∫–æ–≤
      st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L")

      fig_dist = px.histogram(
        df_closed,
        x='profit_loss',
        nbins=50,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–µ–π –∏ —É–±—ã—Ç–∫–æ–≤",
        labels={'profit_loss': 'P&L (USDT)', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}
      )
      fig_dist.add_vline(x=0, line_dash="dash", line_color="red")
      st.plotly_chart(fig_dist, use_container_width=True)

  elif analysis_type == "ML –º–µ—Ç—Ä–∏–∫–∏":
    st.subheader("ü§ñ –ú–µ—Ç—Ä–∏–∫–∏ ML –º–æ–¥–µ–ª–µ–π")

    model_info = state_manager.get_model_info()

    if model_info:
      col1, col2 = st.columns(2)

      with col1:
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", f"{model_info.get('accuracy', 0) * 100:.2f}%")
        st.metric("F1 Score", f"{model_info.get('f1_score', 0):.3f}")
        st.metric("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ", model_info.get('last_training', 'N/A'))

      with col2:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", model_info.get('features_count', 0))
        st.metric("–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏", model_info.get('training_samples', 0))
        st.metric("–í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏", model_info.get('version', 'N/A'))

      # –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
      feature_importance = model_info.get('feature_importance', {})
      if feature_importance:
        st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        # –ë–µ—Ä–µ–º —Ç–æ–ø-20 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        top_features = dict(sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)[:20])

        fig_features = px.bar(
          x=list(top_features.values()),
          y=list(top_features.keys()),
          orientation='h',
          title="–¢–æ–ø-20 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
          labels={'x': '–í–∞–∂–Ω–æ—Å—Ç—å', 'y': '–ü—Ä–∏–∑–Ω–∞–∫'}
        )
        st.plotly_chart(fig_features, use_container_width=True)
    else:
      st.info("–ú–µ—Ç—Ä–∏–∫–∏ ML –º–æ–¥–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

# –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ–∫—Ü–∏–π:
with tabs[5]:
  st.header("üìä ROI –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")

  col1, col2 = st.columns(2)

  with col1:
    st.subheader("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    current_roi_sl = strategy_cfg.get('roi_stop_loss_pct', 20.0)
    current_roi_tp = strategy_cfg.get('roi_take_profit_pct', 60.0)
    current_leverage = trade_cfg.get('leverage', 10)

    st.metric("Stop-Loss ROI", f"{current_roi_sl}%", help="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞—Ä–∂–∏")
    st.metric("Take-Profit ROI", f"{current_roi_tp}%", help="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞—Ä–∂–∏")
    st.metric("–ü–ª–µ—á–æ", f"{current_leverage}x")
    st.metric("Risk/Reward", f"1:{current_roi_tp / current_roi_sl:.1f}")

  with col2:
    st.subheader("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ü–µ–Ω—É")

    test_price = st.number_input(
      "–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞",
      value=50000.0,
      step=100.0,
      help="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–∞ SL/TP"
    )

  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
  sl_price_change_pct = (current_roi_sl / 100.0) / current_leverage
  tp_price_change_pct = (current_roi_tp / 100.0) / current_leverage

  sl_price = test_price * (1 - sl_price_change_pct)
  tp_price = test_price * (1 + tp_price_change_pct)

  st.metric("SL –¶–µ–Ω–∞", f"{sl_price:.2f}", f"-{sl_price_change_pct * 100:.2f}%")
  st.metric("TP –¶–µ–Ω–∞", f"{tp_price:.2f}", f"+{tp_price_change_pct * 100:.2f}%")

  st.info(f"""
    üìà **–†–∞—Å—á–µ—Ç –¥–ª—è BUY —Å–¥–µ–ª–∫–∏:**
    - –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {test_price:,.2f}
    - Stop-Loss: {sl_price:,.2f} (–ø–æ—Ç–µ—Ä—è {current_roi_sl}% ROI)
    - Take-Profit: {tp_price:,.2f} (–ø—Ä–∏–±—ã–ª—å {current_roi_tp}% ROI)
    """)



# --- –í–∫–ª–∞–¥–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
with tabs[6]:
  st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
  current_config = config_manager.load_config()

  with st.form("settings_form"):
    col1, col2 = st.columns(2)

    with col1:
      st.subheader("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏")
      general_cfg = current_config.get('general_settings', {})
      trade_cfg = current_config.get('trade_settings', {})

      leverage = st.slider("–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ", 1, 100, value=int(trade_cfg.get('leverage', 10)))

      order_type = st.selectbox(
        "–¢–∏–ø —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞",
        options=["percentage", "fixed"],
        index=0 if trade_cfg.get('order_size_type') == 'percentage' else 1
      )

      order_value_label = f"–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ({'%' if order_type == 'percentage' else 'USDT'})"
      order_value = st.number_input(
        order_value_label,
        min_value=0.1,
        value=float(trade_cfg.get('order_size_value', 1.0))
      )

      min_order_value = st.number_input(
        "–ú–∏–Ω. —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ (USDT)",
        min_value=1.0,
        value=float(trade_cfg.get('min_order_value_usdt', 5.5))
      )

      # --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ---
      grid_allocation = st.number_input(
        "–û–±—â–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–µ—Ç–∫–∏ (USDT)",
        min_value=10.0,
        value=float(trade_cfg.get('grid_total_usdt_allocation', 50.0)),
        step=10.0,
        help="–û–±—â–∞—è —Å—É–º–º–∞ –≤ USDT, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –æ—Ä–¥–µ—Ä–∞–º –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–æ—á–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."
      )
      # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---

      min_volume = st.number_input(
        "–ú–∏–Ω. —Å—É—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º (USDT)",
        min_value=100000,
        max_value=100000000,
        value=general_cfg.get('min_24h_volume_usdt', 1000000),
        step=100000
      )

      st.divider()

      mode = st.selectbox(
        "–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤",
        options=["dynamic", "static"],
        index=0 if general_cfg.get('symbol_selection_mode') == 'dynamic' else 1
      )

      limit = st.number_input(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–ª—è dynamic)",
        min_value=1,
        max_value=500,
        value=general_cfg.get('dynamic_symbols_count', 20)
      )

      static_list_str = st.text_area(
        "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
        value=", ".join(general_cfg.get('static_symbol_list', []))
      )

      blacklist_str = st.text_area(
        "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
        value=", ".join(general_cfg.get('symbol_blacklist', []))
      )

      interval = st.slider(
        "–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Å–µ–∫)",
        10,
        300,
        value=general_cfg.get('monitoring_interval_seconds', 30)
      )

    with col2:
      st.subheader("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
      # strategy_cfg = current_config.get('strategy_settings', {})

      confidence = st.slider(
        "–ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞",
        0.50,
        1.0,
        value=float(strategy_cfg.get('signal_confidence_threshold', 0.55)),
        step=0.01
      )

      st.divider()

      use_trend = st.checkbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É (EMA)",
        value=strategy_cfg.get('use_trend_filter', True)
      )

      ema_period = st.number_input(
        "–ü–µ—Ä–∏–æ–¥ EMA",
        min_value=10,
        max_value=500,
        value=int(strategy_cfg.get('ema_period', 200))
      )

      st.divider()

      use_adx = st.checkbox(
        "–§–∏–ª—å—Ç—Ä —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ (ADX)",
        value=strategy_cfg.get('use_adx_filter', True)
      )

      adx_thresh = st.slider(
        "–ü–æ—Ä–æ–≥ ADX",
        10,
        40,
        value=int(strategy_cfg.get('adx_threshold', 20))
      )

      st.divider()

      use_vol = st.checkbox(
        "–§–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR)",
        value=strategy_cfg.get('use_volatility_filter', True)
      )

      atr_pct = st.slider(
        "–ú–∞–∫—Å. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR % –æ—Ç —Ü–µ–Ω—ã)",
        1.0,
        30.0,
        value=float(strategy_cfg.get('max_atr_percentage', 5.0)),
        step=0.1
      )

      st.divider()

      use_aroon = st.checkbox(
        "–§–∏–ª—å—Ç—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ (Aroon)",
        value=strategy_cfg.get('use_aroon_filter', True)
      )

      use_psar = st.checkbox(
        "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ –ø–æ Parabolic SAR",
        value=strategy_cfg.get('use_psar_exit', True)
      )

      st.divider()

      use_btc_filter = st.checkbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É BTC",
        value=strategy_cfg.get('use_btc_trend_filter', True)
      )

      use_atr_ts = st.checkbox(
        "–¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ø–æ ATR",
        value=strategy_cfg.get('use_atr_trailing_stop', True)
      )

      atr_ts_mult = st.number_input(
        "–ú–Ω–æ–∂–∏—Ç–µ–ª—å ATR –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞",
        min_value=0.5,
        max_value=10.0,
        value=float(strategy_cfg.get('atr_ts_multiplier', 1)),
        step=0.1
      )

      st.divider()

      st.subheader("üìà Risk Management")

      sl_mult = st.number_input(
        "–ú–Ω–æ–∂–∏—Ç–µ–ª—å Stop-Loss (ATR)",
        min_value=0.1,
        max_value=10.0,
        value=float(strategy_cfg.get('sl_multiplier', 0.1)),
        step=0.1
      )

      tp_mult = st.number_input(
        "–ú–Ω–æ–∂–∏—Ç–µ–ª—å Take-Profit (ATR)",
        min_value=0.1,
        max_value=10.0,
        value=float(strategy_cfg.get('tp_multiplier', 2.5)),
        step=0.1
      )

      st.divider()

      roi_sl = st.number_input(
        "Stop-Loss (% –æ—Ç –º–∞—Ä–∂–∏)",
        min_value=1.0,
        max_value=100.0,
        value=float(trade_cfg.get('roi_stop_loss_pct', 5.0)),
        step=1.0
      )

      roi_tp = st.number_input(
        "Take-Profit (% –æ—Ç –º–∞—Ä–∂–∏)",
        min_value=1.0,
        max_value=1000.0,
        value=float(trade_cfg.get('roi_take_profit_pct', 60.0)),
        step=5.0
      )

      ltf_timeframe = st.selectbox(
        "–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –≤—Ö–æ–¥–∞ (LTF)",
        options=["1m", "5m", "15m"],
        index=["1m", "5m", "15m"].index(strategy_cfg.get('ltf_entry_timeframe', '15m'))
      )

    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True)

    if submitted:
      # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      new_config = config_manager.load_config()

      try:
        temp_config = {
          'strategy_settings': {
            'roi_stop_loss_pct': roi_sl,
            'roi_take_profit_pct': roi_tp,
          },
          'trade_settings': {
            'leverage': leverage
          }
        }


        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        class TempRiskManager:
          def __init__(self, config):
            self.config = config

          def validate_roi_parameters(self):
            # –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            strategy_settings = self.config.get('strategy_settings', {})
            trade_settings = self.config.get('trade_settings', {})

            roi_sl_pct = trade_settings.get('roi_stop_loss_pct', 5.0)
            roi_tp_pct = trade_settings.get('roi_take_profit_pct', 60.0)
            leverage = trade_settings.get('leverage', 10)

            validation_result = {'is_valid': True, 'warnings': [], 'errors': []}

            if roi_sl_pct < 1.0:
              validation_result['warnings'].append(f"–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π SL ROI: {roi_sl_pct}%")
            elif roi_sl_pct > 50.0:
              validation_result['warnings'].append(f"–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π SL ROI: {roi_sl_pct}%")

            if roi_tp_pct < 5.0:
              validation_result['warnings'].append(f"–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π TP ROI: {roi_tp_pct}%")
            elif roi_tp_pct > 200.0:
              validation_result['warnings'].append(f"–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π TP ROI: {roi_tp_pct}%")

            risk_reward_ratio = roi_tp_pct / roi_sl_pct
            if risk_reward_ratio < 1.5:
              validation_result['warnings'].append(f"–ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 1:{risk_reward_ratio:.1f}")

            if leverage < 1:
              validation_result['errors'].append("–ü–ª–µ—á–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1")
              validation_result['is_valid'] = False

            return validation_result


        temp_risk_manager = TempRiskManager(temp_config)
        roi_validation = temp_risk_manager.validate_roi_parameters()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if roi_validation['warnings']:
          st.warning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ ROI –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:")
          for warning in roi_validation['warnings']:
            st.warning(f"‚Ä¢ {warning}")

        if roi_validation['errors']:
          st.error("‚ùå –û—à–∏–±–∫–∏ –≤ ROI –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:")
          for error in roi_validation['errors']:
            st.error(f"‚Ä¢ {error}")
          st.error("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫!")
          st.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        sl_price_change = (roi_sl / 100.0) / leverage * 100
        tp_price_change = (roi_tp / 100.0) / leverage * 100

        st.info(f"üìä –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É:")
        st.info(f"‚Ä¢ SL –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞: {sl_price_change:.2f}%")
        st.info(f"‚Ä¢ TP –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞: {tp_price_change:.2f}%")
        st.info(f"‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 1:{roi_tp / roi_sl:.1f}")

      except Exception as validation_error:
        st.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ROI: {validation_error}")
      # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---



      new_config['trade_settings'] = {
        "leverage": leverage,
        "order_size_type": order_type,
        "order_size_value": order_value,
        "min_order_value_usdt": min_order_value,
        "grid_total_usdt_allocation": grid_allocation,
        "roi_stop_loss_pct": roi_sl,
        "roi_take_profit_pct": roi_tp
      }

      new_config['strategy_settings'] = {
        "signal_confidence_threshold": confidence,
        "use_trend_filter": use_trend,
        "ema_period": ema_period,
        "use_adx_filter": use_adx,
        "adx_threshold": adx_thresh,
        "use_volatility_filter": use_vol,
        "max_atr_percentage": atr_pct,
        "use_aroon_filter": use_aroon,
        "use_psar_exit": use_psar,
        "use_btc_trend_filter": use_btc_filter,
        "use_atr_trailing_stop": use_atr_ts,
        "atr_ts_multiplier": atr_ts_mult,
        "sl_multiplier": sl_mult,
        "tp_multiplier": tp_mult,
        "ltf_entry_timeframe": ltf_timeframe,
      }

      new_config['general_settings'] = {
        "symbol_selection_mode": mode,
        "dynamic_symbols_count": limit,
        "static_symbol_list": [s.strip().upper() for s in static_list_str.split(',') if s.strip()],
        "symbol_blacklist": [s.strip().upper() for s in blacklist_str.split(',') if s.strip()],
        "min_24h_volume_usdt": min_volume,
        "monitoring_interval_seconds": interval
      }

      # –°–æ—Ö—Ä–∞–Ω—è–µ–º feature_weights –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if 'feature_weights' not in new_config:
        new_config['feature_weights'] = current_config.get('feature_weights', {})
      if submitted:
        config_manager.save_config(new_config)
        st.toast("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü—Ä–∏–º–µ–Ω—è—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")
#add_shadow_trading_section()

# --- –§—É—Ç–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π ---
st.divider()

add_shadow_trading_section()

col1, col2, col3 = st.columns(3)

with col1:
  model_info = state_manager.get_model_info()
  if model_info:
    st.caption(f"üìä –ú–æ–¥–µ–ª—å: {model_info.get('version', 'N/A')}")

with col2:
  st.caption(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")

with col3:
  # is_bot_running = st.session_state.bot_process and st.session_state.bot_process.poll() is None
  if is_bot_run():
    st.caption("üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
  else:
    st.caption("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

with st.expander("üéØ Stop-and-Reverse Strategy Settings", expanded=False):
    st.header("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Stop-and-Reverse")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SAR
    try:
      current_config = config_manager.load_config()
      sar_config = current_config.get('stop_and_reverse_strategy', {})

      if not sar_config:
        st.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.json")
        st.stop()

      col1, col2 = st.columns(2)

      with col1:
        st.subheader("üö¶ –§–∏–ª—å—Ç—Ä—ã —Ä–µ–∂–∏–º–æ–≤")

        # –§–∏–ª—å—Ç—Ä—ã —Ä–µ–∂–∏–º–æ–≤
        chop_threshold = st.slider(
          "Choppiness Index –ø–æ—Ä–æ–≥",
          min_value=20,
          max_value=60,
          value=sar_config.get('chop_threshold', 40),
          help="–†—ã–Ω–∫–∏ —Å CHOP > —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –∏–∑–±–µ–≥–∞—Ç—å—Å—è"
        )

        adx_threshold = st.slider(
          "ADX –º–∏–Ω–∏–º—É–º –¥–ª—è —Ç—Ä–µ–Ω–¥–∞",
          min_value=15,
          max_value=35,
          value=sar_config.get('adx_threshold', 25),
          help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
        )

        atr_multiplier = st.slider(
          "ATR –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏",
          min_value=1.0,
          max_value=2.0,
          value=sar_config.get('atr_multiplier', 1.25),
          step=0.05,
          help="–¢–µ–∫—É—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ X —Ä–∞–∑"
        )

        st.subheader("üìä PSAR –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

        psar_start = st.slider(
          "PSAR –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥",
          min_value=0.01,
          max_value=0.05,
          value=sar_config.get('psar_start', 0.02),
          step=0.001,
          format="%.3f"
        )

        psar_step = st.slider(
          "PSAR –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ",
          min_value=0.01,
          max_value=0.05,
          value=sar_config.get('psar_step', 0.02),
          step=0.001,
          format="%.3f"
        )

        psar_max = st.slider(
          "PSAR –º–∞–∫—Å–∏–º—É–º",
          min_value=0.1,
          max_value=0.3,
          value=sar_config.get('psar_max', 0.2),
          step=0.01
        )

      with col2:
        st.subheader("üéØ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫")

        min_signal_score = st.slider(
          "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª —Å–∏–≥–Ω–∞–ª–∞",
          min_value=2,
          max_value=8,
          value=sar_config.get('min_signal_score', 4),
          help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"
        )

        st.subheader("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏")

        min_daily_volume = st.number_input(
          "–ú–∏–Ω. –¥–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º (USD)",
          min_value=100000,
          max_value=10000000,
          value=sar_config.get('min_daily_volume_usd', 1000000),
          step=100000,
          help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"
        )

        max_monitored_symbols = st.number_input(
          "–ú–∞–∫—Å. –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤",
          min_value=10,
          max_value=100,
          value=sar_config.get('max_monitored_symbols', 50),
          step=5
        )

        st.subheader("üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")

        use_shadow_system = st.checkbox(
          "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Shadow System",
          value=sar_config.get('shadow_system_integration', {}).get('use_shadow_system', True),
          help="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ–Ω–µ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"
        )

        use_ml_confirmation = st.checkbox(
          "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ML –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
          value=sar_config.get('ml_integration', {}).get('use_ml_confirmation', False),
          help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç ML –º–æ–¥–µ–ª–µ–π"
        )

      # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SAR", type="primary"):
        try:
          # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          updated_sar_config = sar_config.copy()
          updated_sar_config.update({
            'chop_threshold': chop_threshold,
            'adx_threshold': adx_threshold,
            'atr_multiplier': atr_multiplier,
            'psar_start': psar_start,
            'psar_step': psar_step,
            'psar_max': psar_max,
            'min_signal_score': min_signal_score,
            'min_daily_volume_usd': min_daily_volume,
            'max_monitored_symbols': max_monitored_symbols,
          })

          # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
          updated_sar_config['shadow_system_integration']['use_shadow_system'] = use_shadow_system
          updated_sar_config['ml_integration']['use_ml_confirmation'] = use_ml_confirmation

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          current_config['stop_and_reverse_strategy'] = updated_sar_config
          config_manager.save_config(current_config)

          # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
          state_manager.set_command('reload_sar_config')

          st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
          st.info("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã")

        except Exception as e:
          st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

      # –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
      st.divider()
      st.subheader("üìà –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

      try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        sar_status = state_manager.get_custom_data('sar_strategy_status')

        if sar_status:
          col1, col2, col3 = st.columns(3)

          with col1:
            st.metric(
              "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã",
              sar_status.get('monitored_symbols_count', 0)
            )

          with col2:
            st.metric(
              "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏",
              sar_status.get('current_positions_count', 0)
            )

          with col3:
            last_update = sar_status.get('last_symbol_update')
            if last_update:
              from datetime import datetime

              last_update_dt = datetime.fromisoformat(last_update)
              time_diff = datetime.now() - last_update_dt
              st.metric(
                "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                f"{time_diff.seconds // 60} –º–∏–Ω –Ω–∞–∑–∞–¥"
              )

          # –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
          monitored_symbols = sar_status.get('monitored_symbols', [])
          if monitored_symbols:
            st.subheader("üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã")

            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            cols = st.columns(4)
            for i, symbol in enumerate(monitored_symbols):
              col_idx = i % 4
              with cols[col_idx]:
                st.write(f"‚Ä¢ {symbol}")

          # –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
          current_positions = sar_status.get('current_positions', [])
          if current_positions:
            st.subheader("üíº –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ SAR")
            for position in current_positions:
              st.write(f"üîπ {position}")

        else:
          st.info("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å SAR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

      except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ SAR: {e}")

    except Exception as e:
      st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SAR: {e}")


# --- –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---
auto_refresh = st.sidebar.checkbox("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (30 —Å–µ–∫)", value=True)
if auto_refresh:
  # –ò—Å–ø–æ–ª—å–∑—É–µ–º st_autorefresh –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  try:
    st_autorefresh(interval=30000, key="dashboard_refresh")  # 30 —Å–µ–∫—É–Ω–¥
  except:
    # Fallback –±–µ–∑ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    st.sidebar.info("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'")