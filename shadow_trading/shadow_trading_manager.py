import asyncio
import json
from datetime import datetime
from typing import Dict, Any, List, Optional

from core.schemas import TradingSignal
from data.database_manager import AdvancedDatabaseManager
# from main import logger
from shadow_trading.signal_tracker import FilterReason, SignalTracker, PriceMonitor, PerformanceAnalyzer

from utils.logging_config import get_logger
logger = get_logger(__name__)

class ShadowTradingManager:
  """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã Shadow Trading"""

  def __init__(self, db_manager: AdvancedDatabaseManager, data_fetcher,  config_path=None):
    self.db_manager = db_manager
    self.data_fetcher = data_fetcher

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Shadow Trading –∏–∑ –ø–∞–ø–∫–∏ config
    if config_path is None:
      config_path = "config/enhanced_shadow_trading_config.json"  # –í –ø–∞–ø–∫–µ config

    try:
      import json
      import os

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if not os.path.exists(config_path):
        logger.warning(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Shadow Trading –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        self.shadow_config = self._get_default_config()
      else:
        with open(config_path, 'r', encoding='utf-8') as f:
          full_config = json.load(f)
          self.shadow_config = full_config.get('enhanced_shadow_trading', {})
          logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Shadow Trading –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Shadow Trading: {e}")
      self.shadow_config = self._get_default_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    self.signal_tracker = SignalTracker(db_manager, self.shadow_config)
    self.price_monitor = PriceMonitor(self.signal_tracker, data_fetcher)
    # self.price_monitor = PriceMonitor(self.signal_tracker, data_fetcher, self.shadow_config)
    # self.performance_analyzer = PerformanceAnalyzer(db_manager, self.shadow_config)
    self.performance_analyzer = PerformanceAnalyzer(db_manager)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    self._apply_config_settings()

    self.is_active = False

  def _apply_config_settings(self):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    self.is_enabled = self.shadow_config.get('enabled', True)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitoring_config = self.shadow_config.get('monitoring', {})
    self.price_update_interval = monitoring_config.get('price_update_interval_seconds', 30)
    self.signal_tracking_duration = monitoring_config.get('signal_tracking_duration_hours', 24)
    self.max_concurrent_tracking = monitoring_config.get('max_concurrent_tracking', 1000)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
    alerts_config = self.shadow_config.get('alerts', {})
    self.auto_alerts_enabled = alerts_config.get('enabled', True)
    self.alert_cooldown_minutes = alerts_config.get('cooldown_minutes', 60)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
    reporting_config = self.shadow_config.get('reporting', {})
    self.auto_reports_enabled = reporting_config.get('auto_reports_enabled', True)
    self.daily_summary_time = reporting_config.get('daily_summary_time_utc', 9)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_config = self.shadow_config.get('optimization', {})
    self.auto_optimization_enabled = optimization_config.get('auto_optimization_enabled', True)
    self.optimization_frequency_hours = optimization_config.get('optimization_frequency_hours', 24)

    logger.info(f"Shadow Trading –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: enabled={self.is_enabled}")

  def _get_default_config(self):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return {
      "enabled": True,
      "monitoring": {"price_update_interval_seconds": 30},
      "alerts": {"enabled": True},
      "reporting": {"auto_reports_enabled": True},
      "optimization": {"optimization_frequency_hours": 24}
    }

  async def start_shadow_trading(self):
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã Shadow Trading"""
    if self.is_active:
      logger.warning("Shadow Trading —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
      return

    try:
      await self.price_monitor.start_monitoring()
      self.is_active = True
      logger.info("üåü Shadow Trading —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Shadow Trading: {e}")

  async def start_enhanced_monitoring(self):
      """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
      await self.start_shadow_trading()  # –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥

      # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
      if self.auto_reports_enabled:
        asyncio.create_task(self._auto_reporting_loop())

      if self.auto_alerts_enabled:
        asyncio.create_task(self._auto_alert_loop())

      asyncio.create_task(self._periodic_optimization_loop())

      logger.info("üöÄ Enhanced Shadow Trading —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

  async def _auto_reporting_loop(self):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
    while self.is_active:
      try:
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 9:00 UTC
        current_hour = datetime.now().hour
        if current_hour == 9:
          daily_report = await self.generate_daily_report()
          logger.info("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç:")
          logger.info(daily_report)

        await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å

      except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏: {e}")
        await asyncio.sleep(3600)

  async def _auto_alert_loop(self):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    while self.is_active:
      try:
        # –ü—Ä–æ—Å—Ç—ã–µ –∞–ª–µ—Ä—Ç—ã –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        performance = await self.performance_analyzer.get_overall_performance(1)

        if 'error' not in performance:
          win_rate = performance.get('win_rate_pct', 0)
          if win_rate < 40 and performance.get('completed_signals', 0) >= 5:
            logger.warning(f"üö® SHADOW TRADING ALERT: –ù–∏–∑–∫–∏–π Win Rate {win_rate}%")

        await asyncio.sleep(900)  # 15 –º–∏–Ω—É—Ç

      except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        await asyncio.sleep(900)

  async def _periodic_optimization_loop(self):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    while self.is_active:
      try:
        # –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        performance = await self.performance_analyzer.get_overall_performance(7)

        if 'error' not in performance:
          logger.info("üîß –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
          logger.info(f"  Win Rate: {performance.get('win_rate_pct', 0)}%")
          logger.info(f"  –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {performance.get('total_signals', 0)}")
          logger.info(f"  Profit Factor: {performance.get('profit_factor', 0)}")

        await asyncio.sleep(self.optimization_frequency_hours * 3600)

      except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        await asyncio.sleep(3600)

  async def force_comprehensive_report(self) -> str:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
      # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      overall_perf = await self.performance_analyzer.get_overall_performance(7)
      source_perf = await self.performance_analyzer.get_performance_by_source(7)

      # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
      lines = [
        "=" * 60,
        "üìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ SHADOW TRADING",
        "=" * 60,
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "",
        "üéØ –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:"
      ]

      if 'error' not in overall_perf:
        lines.extend([
          f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {overall_perf.get('total_signals', 0)}",
          f"  ‚Ä¢ Win Rate: {overall_perf.get('win_rate_pct', 0)}%",
          f"  ‚Ä¢ –û–±—â–∏–π P&L: {overall_perf.get('total_pnl_pct', 0):+.2f}%",
          f"  ‚Ä¢ Profit Factor: {overall_perf.get('profit_factor', 0):.2f}",
          f"  ‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {overall_perf.get('filtered_signals', 0)}",
          ""
        ])

      # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏
      if source_perf:
        lines.append("üèÜ –¢–û–ü –ò–°–¢–û–ß–ù–ò–ö–ò –°–ò–ì–ù–ê–õ–û–í:")
        for source in source_perf[:3]:
          lines.append(
            f"  ‚Ä¢ {source['source']}: WR {source['win_rate_pct']}%, "
            f"P&L {source.get('total_pnl_pct', 0):+.1f}% ({source['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤)"
          )
        lines.append("")

      lines.extend([
        "=" * 60,
        "–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π Shadow Trading",
        "=" * 60
      ])

      return "\n".join(lines)

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
      return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"

  async def stop_shadow_trading(self):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    if not self.is_active:
      return

    try:
      await self.price_monitor.stop_monitoring()
      self.is_active = False
      logger.info("üõë Shadow Trading —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Shadow Trading: {e}")

  async def process_signal(self, signal: TradingSignal, metadata: Dict[str, Any] = None,
                           was_filtered: bool = False, filter_reasons: List[FilterReason] = None) -> str:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º–µ Shadow Trading

    Args:
        signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
        was_filtered: –ë—ã–ª –ª–∏ —Å–∏–≥–Ω–∞–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω
        filter_reasons: –ü—Ä–∏—á–∏–Ω—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    Returns:
        signal_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    """
    try:
      # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
      signal_id = await self.signal_tracker.track_signal(signal, metadata or {})

      if not signal_id:
        return ""

      # –û—Ç–º–µ—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if was_filtered and filter_reasons:
        await self.signal_tracker.mark_signal_filtered(signal_id, filter_reasons)
      else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        await self.price_monitor.add_signal_for_monitoring(signal_id, signal.symbol)

      return signal_id

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ Shadow Trading: {e}")
      return ""

  async def generate_daily_report(self) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
    try:
      # –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      overall_perf = await self.performance_analyzer.get_overall_performance(days=1)

      # –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
      source_perf = await self.performance_analyzer.get_performance_by_source(days=1)

      # –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      filter_analysis = await self.performance_analyzer.get_filter_analysis(days=1)

      # –ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      hourly_perf = await self.performance_analyzer.get_hourly_performance(days=1)

      report = {
        'date': datetime.now().strftime('%Y-%m-%d'),
        'overall_performance': overall_perf,
        'performance_by_source': source_perf,
        'filter_analysis': filter_analysis,
        'hourly_performance': hourly_perf,
        'generated_at': datetime.now().isoformat()
      }

      return report

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
      return {'error': str(e)}

  async def get_signal_details(self, signal_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–≥–Ω–∞–ª–µ"""
    try:
      query = """
                SELECT * FROM signal_analysis WHERE signal_id = ?
            """
      result = await self.db_manager._execute(query, (signal_id,), fetch='one')

      if not result:
        return None

      # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
      price_query = """
                SELECT price, timestamp, minutes_elapsed 
                FROM price_tracking 
                WHERE signal_id = ? 
                ORDER BY timestamp
            """
      price_history = await self.db_manager._execute(price_query, (signal_id,), fetch='all')

      # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      signal_details = dict(result)
      signal_details['price_history'] = [
        {
          'price': row['price'],
          'timestamp': row['timestamp'],
          'minutes_elapsed': row['minutes_elapsed']
        }
        for row in price_history
      ]

      # –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è
      try:
        signal_details['indicators_triggered'] = json.loads(signal_details['indicators_triggered'] or '[]')
        signal_details['ml_prediction_data'] = json.loads(signal_details['ml_prediction_data'] or '{}')
        signal_details['filter_reasons'] = json.loads(signal_details['filter_reasons'] or '[]')
      except json.JSONDecodeError:
        pass

      return signal_details

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–∏–≥–Ω–∞–ª–∞ {signal_id}: {e}")
      return None