#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ orderbook –≤ —Ä–∞–º–∫–∞—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
#–∑–∞–ø—É—Å—Ç python quick_test_orderbook.py --mode logic
"""

import asyncio
import sys
import os
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.logging_config import get_logger

logger = get_logger(__name__)


class QuickOrderBookTest:
  """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç orderbook –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º"""

  def __init__(self):
    self.test_results = []

  def log_result(self, test_name: str, success: bool, details: str = ""):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
    status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
    message = f"{status}: {test_name}"
    if details:
      message += f" - {details}"

    logger.info(message)
    self.test_results.append({
      'test': test_name,
      'success': success,
      'details': details,
      'timestamp': datetime.now().isoformat()
    })

  def validate_and_fix_orderbook(self, orderbook_data: dict) -> tuple[bool, dict, str]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ orderbook

    Returns:
        (is_valid_after_fix, fixed_orderbook, message)
    """
    try:
      if not orderbook_data or not isinstance(orderbook_data, dict):
        return False, {}, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"

      # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      if 'result' in orderbook_data:
        data = orderbook_data['result']
      else:
        data = orderbook_data

      bids = data.get('b', [])
      asks = data.get('a', [])

      if not bids or not asks:
        return False, orderbook_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ bids –∏–ª–∏ asks"

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É bids (–ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã)
      bids_fixed = False
      if len(bids) > 1:
        try:
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
          first_bid_price = float(bids[0][0])
          second_bid_price = float(bids[1][0])

          if first_bid_price < second_bid_price:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            bids.sort(key=lambda x: float(x[0]), reverse=True)
            bids_fixed = True
            logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ bids: {first_bid_price} -> {float(bids[0][0])}")

        except (ValueError, IndexError) as e:
          return False, orderbook_data, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ bids: {e}"

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É asks (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã)
      asks_fixed = False
      if len(asks) > 1:
        try:
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
          first_ask_price = float(asks[0][0])
          second_ask_price = float(asks[1][0])

          if first_ask_price > second_ask_price:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            asks.sort(key=lambda x: float(x[0]))
            asks_fixed = True
            logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ asks: {first_ask_price} -> {float(asks[0][0])}")

        except (ValueError, IndexError) as e:
          return False, orderbook_data, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ asks: {e}"

      # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      if 'result' in orderbook_data:
        orderbook_data['result']['b'] = bids
        orderbook_data['result']['a'] = asks
      else:
        orderbook_data['b'] = bids
        orderbook_data['a'] = asks

      # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      try:
        best_bid = float(bids[0][0]) if bids else 0
        best_ask = float(asks[0][0]) if asks else 0

        if best_bid >= best_ask and best_bid > 0 and best_ask > 0:
          return False, orderbook_data, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π spread: bid={best_bid} >= ask={best_ask}"

        spread_pct = (best_ask - best_bid) / best_bid * 100 if best_bid > 0 else 0

        fix_message = []
        if bids_fixed:
          fix_message.append("–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã bids")
        if asks_fixed:
          fix_message.append("–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã asks")

        if fix_message:
          message = f"–î–∞–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã ({', '.join(fix_message)}). Spread: {spread_pct:.3f}%"
        else:
          message = f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. Spread: {spread_pct:.3f}%"

        return True, orderbook_data, message

      except Exception as e:
        return False, orderbook_data, f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"

    except Exception as e:
      return False, orderbook_data, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"

  async def test_with_bybit_connector(self, connector, test_symbols: list = None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º BybitConnector"""
    if test_symbols is None:
      test_symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ orderbook —Å —Ä–µ–∞–ª—å–Ω—ã–º API")
    logger.info("=" * 60)

    successful_tests = 0
    total_tests = 0

    for symbol in test_symbols:
      total_tests += 1
      test_name = f"OrderBook Test - {symbol}"

      try:
        logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è orderbook –¥–ª—è {symbol}...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        raw_response = await connector._make_request(
          'GET',
          '/v5/market/orderbook',
          params={
            'category': getattr(connector, 'default_category', 'linear'),
            'symbol': symbol,
            'limit': 10
          }
        )

        if not raw_response:
          self.log_result(test_name, False, "API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
          continue

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
        is_valid, fixed_data, message = self.validate_and_fix_orderbook(raw_response)

        if is_valid:
          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
          result_data = fixed_data.get('result', fixed_data)
          bids = result_data.get('b', [])
          asks = result_data.get('a', [])

          if bids and asks:
            best_bid = float(bids[0][0])
            best_ask = float(asks[0][0])
            spread = (best_ask - best_bid) / best_bid * 100

            details = f"Bids: {len(bids)}, Asks: {len(asks)}, Spread: {spread:.3f}%. {message}"
            self.log_result(test_name, True, details)
            successful_tests += 1
          else:
            self.log_result(test_name, False, "–ü—É—Å—Ç—ã–µ bids/asks –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        else:
          self.log_result(test_name, False, message)

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(0.5)

      except Exception as e:
        self.log_result(test_name, False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}")

    # –ò—Ç–æ–≥–∏
    logger.info("=" * 60)
    logger.info(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_tests}/{total_tests}")
    logger.info(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests / total_tests * 100):.1f}%" if total_tests > 0 else "0%")

    if successful_tests == total_tests:
      logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    elif successful_tests > 0:
      logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ.")
    else:
      logger.error("‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    return {
      'total': total_tests,
      'successful': successful_tests,
      'failed': total_tests - successful_tests,
      'success_rate': (successful_tests / total_tests * 100) if total_tests > 0 else 0,
      'details': self.test_results
    }

  def create_mock_orderbook_data(self, symbol: str, correct_sorting: bool = True) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–¥–∞–Ω–Ω—ã–µ orderbook –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if correct_sorting:
      # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      bids = [
        ['50200.50', '1.5'],  # Highest bid
        ['50200.00', '2.0'],
        ['50199.50', '1.0'],
        ['50199.00', '0.5']  # Lowest bid
      ]
      asks = [
        ['50205.00', '1.0'],  # Lowest ask
        ['50205.50', '1.5'],
        ['50206.00', '2.0'],
        ['50206.50', '0.8']  # Highest ask
      ]
    else:
      # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      bids = [
        ['50199.00', '0.5'],  # Should be last
        ['50200.50', '1.5'],  # Should be first
        ['50199.50', '1.0'],  # Should be third
        ['50200.00', '2.0']  # Should be second
      ]
      asks = [
        ['50206.00', '2.0'],  # Should be third
        ['50205.00', '1.0'],  # Should be first
        ['50206.50', '0.8'],  # Should be fourth
        ['50205.50', '1.5']  # Should be second
      ]

    return {
      'result': {
        'symbol': symbol,
        's': symbol,
        'b': bids,
        'a': asks,
        'ts': int(datetime.now().timestamp() * 1000),
        'u': 123456
      }
    }

  def test_sorting_logic(self):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏...")

    # –¢–µ—Å—Ç 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    correct_data = self.create_mock_orderbook_data("TESTUSDT", correct_sorting=True)
    is_valid, _, message = self.validate_and_fix_orderbook(correct_data)
    self.log_result("–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", is_valid, message)

    # –¢–µ—Å—Ç 2: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    incorrect_data = self.create_mock_orderbook_data("TESTUSDT", correct_sorting=False)
    is_valid, fixed_data, message = self.validate_and_fix_orderbook(incorrect_data)
    self.log_result("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", is_valid, message)

    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if is_valid:
      result = fixed_data['result']
      bids = result['b']
      asks = result['a']

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      bids_sorted_correctly = all(
        float(bids[i][0]) >= float(bids[i + 1][0])
        for i in range(len(bids) - 1)
      )
      asks_sorted_correctly = all(
        float(asks[i][0]) <= float(asks[i + 1][0])
        for i in range(len(asks) - 1)
      )

      if bids_sorted_correctly and asks_sorted_correctly:
        self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", True,
                        f"Bids –∏ Asks –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
      else:
        self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", False,
                        f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: bids_ok={bids_sorted_correctly}, asks_ok={asks_sorted_correctly}")

    # –¢–µ—Å—Ç 4: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    edge_cases = [
      {
        'name': '–ü—É—Å—Ç—ã–µ bids',
        'data': {'result': {'symbol': 'TEST', 'b': [], 'a': [['50000', '1.0']]}},
        'should_pass': False
      },
      {
        'name': '–ü—É—Å—Ç—ã–µ asks',
        'data': {'result': {'symbol': 'TEST', 'b': [['50000', '1.0']], 'a': []}},
        'should_pass': False
      },
      {
        'name': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã',
        'data': {'result': {'symbol': 'TEST', 'b': [['abc', '1.0']], 'a': [['50000', '1.0']]}},
        'should_pass': False
      },
      {
        'name': '–û–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞',
        'data': {'result': {'symbol': 'TEST', 'b': [['49999.99', '1.0']], 'a': [['50000.01', '1.0']]}},
        'should_pass': True
      }
    ]

    for case in edge_cases:
      is_valid, _, message = self.validate_and_fix_orderbook(case['data'])
      expected_result = case['should_pass']
      test_passed = (is_valid == expected_result)

      self.log_result(f"–ì—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π: {case['name']}", test_passed,
                      f"–û–∂–∏–¥–∞–ª–æ—Å—å: {'—É—Å–ø–µ—Ö' if expected_result else '–æ—à–∏–±–∫–∞'}, –ø–æ–ª—É—á–µ–Ω–æ: {'—É—Å–ø–µ—Ö' if is_valid else '–æ—à–∏–±–∫–∞'}")

  def run_full_test_suite(self):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ API"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ (–±–µ–∑ API)")
    logger.info("=" * 60)

    self.test_sorting_logic()

    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    successful = sum(1 for result in self.test_results if result['success'])
    total = len(self.test_results)

    logger.info("=" * 60)
    logger.info(f"üìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{total}")
    logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful / total * 100):.1f}%" if total > 0 else "0%")

    return {
      'total': total,
      'successful': successful,
      'failed': total - successful,
      'success_rate': (successful / total * 100) if total > 0 else 0,
      'details': self.test_results
    }


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º
async def run_orderbook_diagnostics(bybit_connector=None):
  """
  –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ orderbook

  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ main.py –∏–ª–∏ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ:

  from quick_test_orderbook import run_orderbook_diagnostics

  # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏
  await run_orderbook_diagnostics()

  # –° —Ä–µ–∞–ª—å–Ω—ã–º API
  await run_orderbook_diagnostics(your_bybit_connector)
  """
  tester = QuickOrderBookTest()

  if bybit_connector:
    logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π API connector - –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
    return await tester.test_with_bybit_connector(bybit_connector)
  else:
    logger.info("üß™ API connector –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏–∫–∏")
    return tester.run_full_test_suite()


# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è orderbook –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–æ–¥–µ
def fix_orderbook_sorting(orderbook_data: dict) -> tuple[bool, dict, str]:
  """
  –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ orderbook –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–æ–¥–µ

  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  from quick_test_orderbook import fix_orderbook_sorting

  # –í –≤–∞—à–µ–º bybit_connector.py
  async def fetch_order_book(self, symbol: str, depth: int = 25):
      # ... –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ...

      # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      is_valid, fixed_data, message = fix_orderbook_sorting(response)
      if not is_valid:
          logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å orderbook –¥–ª—è {symbol}: {message}")
          return None

      # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      return self._process_orderbook(fixed_data)
  """
  tester = QuickOrderBookTest()
  return tester.validate_and_fix_orderbook(orderbook_data)


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
  import argparse

  parser = argparse.ArgumentParser(description='OrderBook Diagnostic Tool')
  parser.add_argument('--mode', choices=['logic', 'api'], default='logic',
                      help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: logic (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫–∞) –∏–ª–∏ api (—Å —Ä–µ–∞–ª—å–Ω—ã–º API)')
  parser.add_argument('--symbols', nargs='*', default=['BTCUSDT', 'ETHUSDT', 'SOLUSDT'],
                      help='–°–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ api)')

  args = parser.parse_args()


  async def main():
    if args.mode == 'logic':
      await run_orderbook_diagnostics()
    else:
      print("–î–ª—è —Ä–µ–∂–∏–º–∞ 'api' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
      print("1. –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à BybitConnector")
      print("2. –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å API –∫–ª—é—á–∞–º–∏")
      print("3. –ü–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ run_orderbook_diagnostics()")
      print("\n–ü—Ä–∏–º–µ—Ä:")
      print("""
from core.bybit_connector import BybitConnector

async def test_with_api():
    connector = BybitConnector(api_key="...", api_secret="...", testnet=True)
    return await run_orderbook_diagnostics(connector)

# –ó–∞–ø—É—Å–∫
results = await test_with_api()
            """)

      # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫–∏ –∫–∞–∫ fallback
      print("\n–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏...")
      await run_orderbook_diagnostics()


  # –ó–∞–ø—É—Å–∫
  asyncio.run(main())